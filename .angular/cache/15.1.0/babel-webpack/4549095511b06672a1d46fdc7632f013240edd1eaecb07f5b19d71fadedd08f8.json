{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '@fundamental-ngx/core/icon';\nimport * as i4 from '@fundamental-ngx/core/popover';\nimport { PopoverService, PopoverModule } from '@fundamental-ngx/core/popover';\nimport * as i5 from '@fundamental-ngx/core/calendar';\nimport { CalendarComponent, CalendarModule } from '@fundamental-ngx/core/calendar';\nimport * as i6 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@fundamental-ngx/core/datetime';\nimport { DATE_TIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport * as i2 from '@fundamental-ngx/core/form';\nimport { registerFormItemControl, PopoverFormMessageService, FormMessageModule } from '@fundamental-ngx/core/form';\nimport * as i7 from '@fundamental-ngx/core/input-group';\nimport { InputGroupInputDirective, InputGroupModule } from '@fundamental-ngx/core/input-group';\nimport * as i8 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i9 from '@fundamental-ngx/core/bar';\nimport { BarModule } from '@fundamental-ngx/core/bar';\nimport * as i10 from '@fundamental-ngx/i18n';\nimport { I18nModule } from '@fundamental-ngx/i18n';\nimport { DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\n\n/** Creates an error to be thrown when attempting to use an invalid date implementation. */\nconst _c0 = [\"inputGroupComponent\"];\nfunction DatePickerComponent_fd_form_message_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fd-form-message\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"embedded\", true)(\"type\", ctx_r1.state);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1._message, \" \");\n  }\n}\nfunction DatePickerComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13)(2, \"fd-bar-element\")(3, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function DatePickerComponent_div_12_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onTodayButtonClick());\n    });\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"label\", ctx_r2.todayButtonLabel);\n  }\n}\nfunction DatePickerComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.valueStateSuccessMessage || i0.ɵɵpipeBind1(2, 1, \"coreDatePicker.valueStateSuccessMessage\"));\n  }\n}\nfunction DatePickerComponent_ng_container_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.valueStateInformationMessage || i0.ɵɵpipeBind1(2, 1, \"coreDatePicker.valueStateInformationMessage\"));\n  }\n}\nfunction DatePickerComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.valueStateWarningMessage || i0.ɵɵpipeBind1(2, 1, \"coreDatePicker.valueStateWarningMessage\"));\n  }\n}\nfunction DatePickerComponent_ng_container_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.valueStateErrorMessage || i0.ɵɵpipeBind1(2, 1, \"coreDatePicker.valueStateErrorMessage\"));\n  }\n}\nconst _c1 = function () {\n  return [];\n};\nconst _c2 = [\"*\"];\nfunction createMissingDateImplementationError(provider) {\n  return Error(`FdDatePicker: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: FdDatetimeModule, or provide a ` + `custom implementation.`);\n}\nlet datePickerCounter = 0;\n/**\n * The datetime picker component is an opinionated composition of the fd-popover and\n * fd-calendar components to accomplish the UI pattern for picking a date.\n *\n * Supports Angular Forms.\n * ```html\n * <fd-date-picker [(ngModel)]=\"date\"></fd-date-picker>\n * ```\n *\n */\nlet DatePickerComponent = /*#__PURE__*/(() => {\n  class DatePickerComponent {\n    /** Text displayed in message */\n    set message(message) {\n      this._message = message;\n      this._popoverFormMessage.message = message;\n    }\n    /** The trigger events that will open/close the message box.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    set messageTriggers(triggers) {\n      this._messageTriggers = triggers;\n      this._popoverFormMessage.triggers = triggers;\n    }\n    /**\n     *  The state of the form control - applies css classes.\n     *  Also, this is applied to message.\n     *  Can be `success`, `error`, `warning`, `information` or blank for default.\n     */\n    set state(state) {\n      this._state = state || 'default';\n      this._popoverFormMessage.messageType = state || 'default';\n    }\n    /** @hidden */\n    get state() {\n      if (this._state == null && this.useValidation && this._isInvalidDateInput) {\n        return 'error';\n      }\n      return this._state;\n    }\n    /**\n     * Whether to recalculate value from the input as user types or on blur.\n     * By default, updates the value as user types.\n     * @default false\n     */\n    set processInputOnBlur(v) {\n      this._processInputOnBlur = coerceBooleanProperty(v);\n    }\n    get processInputOnBlur() {\n      return this._processInputOnBlur;\n    }\n    /** @hidden */\n    get _rangeDelimiter() {\n      return this._dateTimeFormats.rangeDelimiter;\n    }\n    /**\n     * Date input aria label based on type\n     * @hidden\n     */\n    get _dateInputArialLabel() {\n      // return either input value or a key for \"fdTranslate\" pipe\n      return this.type === 'range' ? this.dateRangeInputLabel : this.dateInputLabel;\n    }\n    /**\n     * Date input aria label key based on type\n     * @hidden\n     */\n    get _dateInputArialLabelKey() {\n      // return either input value or a key for \"fdTranslate\" pipe\n      return this.type === 'range' ? 'coreDatePicker.dateRangeInputLabel' : 'coreDatePicker.dateInputLabel';\n    }\n    /** @hidden */\n    constructor(_changeDetectionRef,\n    // Use @Optional to avoid angular injection error message and throw our own which is more precise one\n    _dateTimeAdapter, _dateTimeFormats, _popoverFormMessage) {\n      this._changeDetectionRef = _changeDetectionRef;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._popoverFormMessage = _popoverFormMessage;\n      /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n      this.type = 'single';\n      /** Date picker input placeholder string */\n      this.placeholder = '';\n      /** If it is mandatory field */\n      this.required = false;\n      /** @hidden */\n      this._message = null;\n      /** @hidden */\n      this._messageTriggers = ['focusin', 'focusout'];\n      /** The currently selected FdDates model start and end in range mode. */\n      this.selectedRangeDate = {\n        start: null,\n        end: null\n      };\n      /**\n       * Whether user wants to mark day cells on hover.\n       * Works only on range mode, when start date is selected on Day View.\n       */\n      this.rangeHoverEffect = false;\n      /** Whether to validate the date picker input. */\n      this.useValidation = true;\n      /** Whether a null input is considered valid. */\n      this.allowNull = true;\n      /** Actually shown active view one of 'day' | 'month' | 'year' in calendar component*/\n      this.activeView = 'day';\n      /**\n       *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n       *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n       */\n      this.placement = 'bottom-start';\n      /** Defines if date picker should be closed after date choose */\n      this.closeOnDateChoose = true;\n      /** Enables Today-Selection-Button if true */\n      this.showTodayButton = false;\n      /** Label for Today-Selection-Button */\n      this.todayButtonLabel = 'Today';\n      /** @hidden */\n      this._state = 'default';\n      /**\n       * Whether AddOn Button should be focusable\n       * @default true\n       */\n      this.buttonFocusable = true;\n      /**\n       * Special days mark, it can be used by passing array of object with\n       * Special day number, list 1-20 [class:`fd-calendar__special-day--{{number}}`] is available there:\n       * https://sap.github.io/fundamental-styles/components/calendar.html calendar special days section\n       * Rule accepts method with FdDate object as a parameter. ex:\n       * `rule: (fdDate: FdDate) => fdDate.getDay() === 1`, which will mark all sundays as special day.\n       */\n      this.specialDaysRules = [];\n      /**\n       * Object to customize year grid,\n       * Row, Columns and method to display year can be modified\n       */\n      this.yearGrid = {\n        rows: 4,\n        cols: 5\n      };\n      /**\n       * Object to customize aggregated year grid,\n       * Row, Columns and method to display year can be modified\n       */\n      this.aggregatedYearGrid = {\n        rows: 4,\n        cols: 3\n      };\n      /**\n       * Whether user wants to mark sunday/saturday with `fd-calendar__item--weekend` class\n       */\n      this.markWeekends = true;\n      /**\n       * Whether user wants to show week numbers next to days\n       */\n      this.showWeekNumbers = true;\n      /** Whether the date picker is open. Can be used through two-way binding. */\n      this.isOpen = false;\n      /** Should date picker be inlined. */\n      this.inline = true;\n      /**\n       * Whether to prevent page scrolling when focusing date picker input field after calendar has been closed.\n       */\n      this.preventScrollOnFocus = false;\n      /** @hidden */\n      this._processInputOnBlur = false;\n      /** Event emitted when the state of the isOpen property changes. */\n      this.isOpenChange = new EventEmitter();\n      /** Fired when a new date is selected. */\n      this.selectedDateChange = new EventEmitter();\n      /** Event thrown every time selected first or last date in range mode is changed */\n      this.selectedRangeDateChange = new EventEmitter();\n      /** Event thrown every time calendar active view is changed */\n      this.activeViewChange = new EventEmitter();\n      /** @hidden The value of the input */\n      this._inputFieldDate = null;\n      /** @hidden Whether the date input is invalid */\n      this._isInvalidDateInput = false;\n      /** @hidden */\n      this._formValueStateMessageId = `fd-date-picker-form-message-${datePickerCounter++}`;\n      /** @hidden */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /**\n       * Function used to disable certain dates in the calendar.\n       * @param date date representation\n       */\n      this.disableFunction = () => false;\n      /**\n       * Function used to disable certain dates in the calendar for the range start selection.\n       * @param date date representation\n       */\n      this.disableRangeStartFunction = () => false;\n      /**\n       * Function used to disable certain dates in the calendar for the range end selection.\n       * @param date date representation\n       */\n      this.disableRangeEndFunction = () => false;\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n      if (!this._dateTimeAdapter) {\n        throw createMissingDateImplementationError('DateTimeAdapter');\n      }\n      if (!this._dateTimeFormats) {\n        throw createMissingDateImplementationError('DATE_TIME_FORMATS');\n      }\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this.formatInputDate(this.selectedDate);\n        this._changeDetectionRef.detectChanges();\n      });\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._InitialiseVariablesInMessageService();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /**\n     * Method that handle calendar active view change and throws event.\n     */\n    handleCalendarActiveViewChange(activeView) {\n      this.activeViewChange.emit(activeView);\n    }\n    /** @hidden */\n    closeFromCalendar() {\n      if (this.type === 'single' && this.closeOnDateChoose) {\n        this.onTouched();\n        this.closeCalendar();\n      }\n    }\n    /** Opens the calendar */\n    openCalendar() {\n      if (!this.disabled) {\n        this.isOpen = true;\n        this.isOpenChange.emit(this.isOpen);\n        this._changeMessageVisibility();\n      }\n    }\n    /** Toggles the calendar open or closed */\n    toggleCalendar() {\n      this.isOpen = !this.isOpen;\n      this.isOpenChange.emit(this.isOpen);\n      if (!this.isOpen) {\n        this.onTouched();\n      }\n      this._changeMessageVisibility();\n    }\n    /** Closes the calendar if it is open */\n    closeCalendar() {\n      if (this.isOpen) {\n        this.isOpen = false;\n        this.isOpenChange.emit(this.isOpen);\n        this._changeMessageVisibility();\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected single date changed\n     */\n    handleSingleDateChange(date) {\n      if (date) {\n        this.selectedDate = date;\n        this.selectedDateChange.emit(date);\n        this.onChange(date);\n        this.formatInputDate(date);\n        this._isInvalidDateInput = !this.isModelValid();\n        if (this.closeOnDateChoose && this.type === 'single') {\n          this.closeCalendar();\n        }\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered date formatting in the date control\n     */\n    formatInputDate(date) {\n      if (date) {\n        this._inputFieldDate = this._formatDate(date);\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected range date changed\n     */\n    handleRangeDateChange(dates) {\n      const startChanged = !this._dateTimeAdapter.datesEqual(dates.start, this.selectedRangeDate.start);\n      const endChanged = !this._dateTimeAdapter.datesEqual(dates.end, this.selectedRangeDate.end);\n      if (dates && (startChanged || endChanged)) {\n        const shouldClose = this.closeOnDateChoose && dates.end !== null;\n        this._inputFieldDate = this._formatDateRange(dates);\n        this.selectedRangeDate = {\n          start: dates.start,\n          end: dates.end\n        };\n        this.selectedRangeDateChange.emit(this.selectedRangeDate);\n        this.onChange(this.selectedRangeDate);\n        this._isInvalidDateInput = !this.isModelValid();\n        if (shouldClose) {\n          this.closeCalendar();\n        }\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered when Today-Selection-Button clicked, it changes selected date or date range to today's date\n     */\n    onTodayButtonClick() {\n      const todayDate = this._dateTimeAdapter.today();\n      if (this.type === 'single') {\n        this.handleSingleDateChange(todayDate);\n        this.closeFromCalendar();\n      } else if (this.type === 'range') {\n        this.handleRangeDateChange({\n          start: todayDate,\n          end: todayDate\n        });\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered when the text input is confirmed to ba changed, by clicking enter, or blur\n     */\n    handleInputChange(strDate, isTypeEvent) {\n      if (isTypeEvent && this.processInputOnBlur || !isTypeEvent && !this.processInputOnBlur) {\n        // if processInputOnBlur === true, ignore type event\n        // if processInputOnBlur === false, ignore blur/enter event\n        return;\n      }\n      this.dateStringUpdate(strDate);\n    }\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate() {\n      return this.isModelValid() ? null : {\n        dateValidation: {\n          valid: false\n        }\n      };\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetectionRef.detectChanges();\n    }\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms\n     */\n    writeValue(selected) {\n      /** If written value is not defined, null, empty string */\n      if (!selected) {\n        this._inputFieldDate = '';\n        this._refreshCurrentlyDisplayedCalendarDate(this._dateTimeAdapter.today());\n        this.selectedRangeDate = {\n          start: null,\n          end: null\n        };\n        this.selectedDate = null;\n        this._changeDetectionRef.detectChanges();\n        return;\n      }\n      if (this.type === 'single') {\n        /**\n         * For single mode, if the date is invalid, model is changed, it refreshes currently\n         * input field text, but it does not refresh currently displayed day\n         */\n        selected = this._parseDate(selected);\n        this.selectedDate = selected;\n        this._inputFieldDate = this._formatDate(selected);\n        this._refreshCurrentlyDisplayedCalendarDate(selected);\n      }\n      if (this.type === 'range') {\n        /**\n         * For range mode, if the date is invalid, model is changed, but it does not refresh currently\n         * displayed day view, or input field text\n         */\n        selected = selected;\n        if (selected?.start) {\n          this.selectedRangeDate = {\n            start: this._parseDate(selected.start),\n            end: this._parseDate(selected.end)\n          };\n          this._refreshCurrentlyDisplayedCalendarDate(selected.start);\n          this._inputFieldDate = this._formatDateRange(selected);\n        } else {\n          this._inputFieldDate = '';\n        }\n      }\n      this._isInvalidDateInput = !this.isModelValid();\n      this._changeDetectionRef.detectChanges();\n    }\n    /**\n     * @hidden\n     * Method, which is responsible for transforming string to date, depending on type or\n     * validation the results are different. It also changes to state of _isInvalidDateInput\n     */\n    dateStringUpdate(dateStr) {\n      this._inputFieldDate = dateStr;\n      /** Case when there is single mode */\n      if (this.type === 'single') {\n        if (!dateStr) {\n          this._isInvalidDateInput = !this.allowNull;\n          this.selectedDate = null;\n          this._refreshCurrentlyDisplayedCalendarDate(this.selectedDate);\n          this.onChange(this.selectedDate);\n          this.selectedDateChange.emit(this.selectedDate);\n          return;\n        }\n        const date = this._parseDate(dateStr);\n        /** Check if dates are equal, if so, there is no need to make any changes */\n        if (!this._dateTimeAdapter.datesEqual(date, this.selectedDate)) {\n          this._isInvalidDateInput = !this._isSingleModelValid(date);\n          /** Check if date is valid, if it's not, there is no need to refresh calendar */\n          if (!this._isInvalidDateInput) {\n            this._refreshCurrentlyDisplayedCalendarDate(date);\n          }\n          /**\n           * Date in model is changed no matter if the parsed date from string is valid or not.\n           */\n          this.selectedDate = date;\n          this.onChange(this.selectedDate);\n          this.selectedDateChange.emit(this.selectedDate);\n        }\n        /** Case when there is range mode */\n      } else {\n        if (!dateStr) {\n          this._isInvalidDateInput = !this.allowNull;\n          this.selectedRangeDate = {\n            start: null,\n            end: null\n          };\n          this._refreshCurrentlyDisplayedCalendarDate(this.selectedRangeDate.start);\n          this.onChange(this.selectedRangeDate);\n          this.selectedRangeDateChange.emit(this.selectedRangeDate);\n          return;\n        }\n        const [startDateStr, endDateStr] = dateStr.split(this._rangeDelimiter);\n        const startDate = this._parseDate(startDateStr);\n        const endDate = this._parseDate(endDateStr);\n        /**\n         * Check if dates are equal, if dates are the same there is no need to make any changes\n         * Date in model is changed no matter if the parsed dates from string are valid or not.\n         */\n        if (!this._dateTimeAdapter.datesEqual(startDate, this.selectedRangeDate.start) || !this._dateTimeAdapter.datesEqual(endDate, this.selectedRangeDate.end)) {\n          let selectedRangeDate = null;\n          /** If the end date is before the start date, there is need to replace them  */\n          if (this._dateTimeAdapter.isValid(startDate) && this._dateTimeAdapter.isValid(endDate) && this._dateTimeAdapter.compareDate(startDate, endDate) > 0) {\n            selectedRangeDate = {\n              start: endDate,\n              end: startDate\n            };\n          } else {\n            selectedRangeDate = {\n              start: startDate,\n              end: endDate\n            };\n          }\n          this._isInvalidDateInput = !this._isRangeModelValid(selectedRangeDate);\n          /** Whole object is changed, even it's invalid */\n          this.selectedRangeDate = selectedRangeDate;\n          this.selectedRangeDateChange.emit(this.selectedRangeDate);\n          this.onChange(this.selectedRangeDate);\n          /** Check if start date is valid, if it's not, there is no need o refresh calendar */\n          if (this._isStartDateValid(this.selectedRangeDate.start)) {\n            this._refreshCurrentlyDisplayedCalendarDate(this.selectedRangeDate.start);\n          }\n        }\n      }\n    }\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    isModelValid() {\n      if (this.type === 'single') {\n        return this._isSingleModelValid(this.selectedDate);\n      } else {\n        return this._isRangeModelValid(this.selectedRangeDate);\n      }\n    }\n    /** @hidden */\n    _changeMessageVisibility() {\n      if (this.isOpen) {\n        this._popoverFormMessage.hide();\n      } else {\n        this._popoverFormMessage.show();\n      }\n    }\n    /** @hidden */\n    _onOpenStateChanged(isOpen) {\n      this.isOpenChange.emit(isOpen);\n      this._changeMessageVisibility();\n      // focus input control every time popup is closed\n      if (!isOpen && this._inputElement) {\n        this._inputElement.nativeElement.focus({\n          preventScroll: this.preventScrollOnFocus\n        });\n      }\n      // focus calendar cell on opening\n      if (isOpen && this._calendarComponent) {\n        this._calendarComponent.initialFocus();\n      }\n    }\n    /** @hidden */\n    _onBlur(event) {\n      this.onTouched();\n      this.handleInputChange(event.target.value, false);\n    }\n    /** Method that returns info if single model given is valid */\n    _isSingleModelValid(date) {\n      return this._isDateValid(date) && !this.disableFunction(date) || !date && this.allowNull;\n    }\n    /** Method that returns info if range date model given is valid */\n    _isRangeModelValid(fdRangeDate) {\n      return fdRangeDate && this._isStartDateValid(fdRangeDate.start) && this._isEndDateValid(fdRangeDate.end) || !fdRangeDate.start && !fdRangeDate.end && this.allowNull;\n    }\n    /** Method that returns info if end date model given is valid */\n    _isEndDateValid(endDate) {\n      return this._isDateValid(endDate) && !this.disableRangeEndFunction(endDate);\n    }\n    /** Method that returns info if start date model given is valid */\n    _isStartDateValid(startDate) {\n      return this._isDateValid(startDate) && !this.disableRangeStartFunction(startDate);\n    }\n    /** Method that returns info if given date model is valid */\n    _isDateValid(date) {\n      return this._dateTimeAdapter.isValid(date);\n    }\n    /** @hidden */\n    _refreshCurrentlyDisplayedCalendarDate(date) {\n      if (this._calendarComponent) {\n        this._calendarComponent.setCurrentlyDisplayed(date);\n      }\n    }\n    /** @hidden */\n    _formatDate(date) {\n      return this._dateTimeAdapter.format(date, this._dateTimeFormats.display.dateInput);\n    }\n    /** @hidden */\n    _parseDate(date) {\n      return this._dateTimeAdapter.parse(date, this._dateTimeFormats.parse.dateInput);\n    }\n    /** @hidden */\n    _formatDateRange(dateRange) {\n      const startDate = this._formatDate(dateRange.start);\n      const endDate = this._formatDate(dateRange.end);\n      return startDate + this._rangeDelimiter + endDate;\n    }\n    /** @hidden */\n    _InitialiseVariablesInMessageService() {\n      this._popoverFormMessage.init(this._inputGroupElement);\n      this._popoverFormMessage.message = this._message || '';\n      this._popoverFormMessage.triggers = this._messageTriggers;\n      this._popoverFormMessage.messageType = this._state;\n    }\n  }\n  DatePickerComponent.ɵfac = function DatePickerComponent_Factory(t) {\n    return new (t || DatePickerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DatetimeAdapter, 8), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS, 8), i0.ɵɵdirectiveInject(i2.PopoverFormMessageService));\n  };\n  DatePickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DatePickerComponent,\n    selectors: [[\"fd-date-picker\"]],\n    viewQuery: function DatePickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CalendarComponent, 5);\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n        i0.ɵɵviewQuery(InputGroupInputDirective, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._calendarComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputGroupElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function DatePickerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"blur\", function DatePickerComponent_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-date-picker\", true)(\"fd-date-picker-custom\", ctx.inline);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      placeholder: \"placeholder\",\n      inputId: \"inputId\",\n      required: \"required\",\n      message: \"message\",\n      messageTriggers: \"messageTriggers\",\n      selectedDate: \"selectedDate\",\n      selectedRangeDate: \"selectedRangeDate\",\n      startingDayOfWeek: \"startingDayOfWeek\",\n      rangeHoverEffect: \"rangeHoverEffect\",\n      useValidation: \"useValidation\",\n      dateInputLabel: \"dateInputLabel\",\n      dateRangeInputLabel: \"dateRangeInputLabel\",\n      displayCalendarToggleLabel: \"displayCalendarToggleLabel\",\n      valueStateSuccessMessage: \"valueStateSuccessMessage\",\n      valueStateInformationMessage: \"valueStateInformationMessage\",\n      valueStateWarningMessage: \"valueStateWarningMessage\",\n      valueStateErrorMessage: \"valueStateErrorMessage\",\n      allowNull: \"allowNull\",\n      activeView: \"activeView\",\n      placement: \"placement\",\n      appendTo: \"appendTo\",\n      disabled: \"disabled\",\n      closeOnDateChoose: \"closeOnDateChoose\",\n      showTodayButton: \"showTodayButton\",\n      todayButtonLabel: \"todayButtonLabel\",\n      previousButtonDisableFunction: \"previousButtonDisableFunction\",\n      nextButtonDisableFunction: \"nextButtonDisableFunction\",\n      state: \"state\",\n      buttonFocusable: \"buttonFocusable\",\n      specialDaysRules: \"specialDaysRules\",\n      yearGrid: \"yearGrid\",\n      aggregatedYearGrid: \"aggregatedYearGrid\",\n      markWeekends: \"markWeekends\",\n      showWeekNumbers: \"showWeekNumbers\",\n      isOpen: \"isOpen\",\n      inline: \"inline\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      processInputOnBlur: \"processInputOnBlur\",\n      preventScrollOnFocus: \"preventScrollOnFocus\",\n      disableFunction: \"disableFunction\",\n      disableRangeStartFunction: \"disableRangeStartFunction\",\n      disableRangeEndFunction: \"disableRangeEndFunction\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\",\n      selectedDateChange: \"selectedDateChange\",\n      selectedRangeDateChange: \"selectedRangeDateChange\",\n      activeViewChange: \"activeViewChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DatePickerComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DatePickerComponent),\n      multi: true\n    }, registerFormItemControl(DatePickerComponent), PopoverFormMessageService, PopoverService])],\n    ngContentSelectors: _c2,\n    decls: 21,\n    vars: 58,\n    consts: [[3, \"isOpen\", \"triggers\", \"placement\", \"disabled\", \"focusTrapped\", \"focusAutoCapture\", \"appendTo\", \"isOpenChange\"], [\"glyph\", \"appointment-2\", 3, \"state\", \"disabled\", \"isControl\", \"button\", \"buttonFocusable\", \"isExpanded\", \"glyphAriaLabel\", \"iconTitle\", \"addOnButtonClicked\"], [\"inputGroupComponent\", \"\"], [\"type\", \"text\", \"fd-input-group-input\", \"\", \"aria-haspopup\", \"grid\", \"aria-autocomplete\", \"none\", 1, \"fd-input\", 3, \"disabled\", \"placeholder\", \"ngModel\", \"keyup.enter\", \"ngModelChange\", \"blur\"], [3, \"embedded\", \"type\", 4, \"ngIf\"], [3, \"activeView\", \"markWeekends\", \"specialDaysRules\", \"showWeekNumbers\", \"aggregatedYearGrid\", \"yearGrid\", \"calType\", \"rangeHoverEffect\", \"disableFunction\", \"disableRangeStartFunction\", \"disableRangeEndFunction\", \"selectedDate\", \"selectedRangeDate\", \"startingDayOfWeek\", \"previousButtonDisableFunction\", \"nextButtonDisableFunction\", \"closeCalendar\", \"activeViewChange\", \"selectedRangeDateChange\", \"selectedDateChange\"], [\"fd-bar\", \"\", \"barDesign\", \"footer\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 2, \"display\", \"none\"], [\"aria-atomic\", \"true\", \"aria-live\", \"assertive\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"embedded\", \"type\"], [\"fd-bar\", \"\", \"barDesign\", \"footer\"], [\"fd-bar-right\", \"\"], [\"fd-button\", \"\", 3, \"label\", \"click\"]],\n    template: function DatePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"fd-popover\", 0);\n        i0.ɵɵlistener(\"isOpenChange\", function DatePickerComponent_Template_fd_popover_isOpenChange_0_listener($event) {\n          return ctx.isOpen = $event;\n        })(\"isOpenChange\", function DatePickerComponent_Template_fd_popover_isOpenChange_0_listener($event) {\n          return ctx._onOpenStateChanged($event);\n        });\n        i0.ɵɵelementStart(1, \"fd-popover-control\")(2, \"fd-input-group\", 1, 2);\n        i0.ɵɵlistener(\"addOnButtonClicked\", function DatePickerComponent_Template_fd_input_group_addOnButtonClicked_2_listener() {\n          return ctx.toggleCalendar();\n        });\n        i0.ɵɵpipe(4, \"fdTranslate\");\n        i0.ɵɵpipe(5, \"fdTranslate\");\n        i0.ɵɵelementStart(6, \"input\", 3);\n        i0.ɵɵlistener(\"keyup.enter\", function DatePickerComponent_Template_input_keyup_enter_6_listener($event) {\n          return ctx.handleInputChange($event.target.value, false);\n        })(\"ngModelChange\", function DatePickerComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.handleInputChange($event, true);\n        })(\"blur\", function DatePickerComponent_Template_input_blur_6_listener($event) {\n          return ctx._onBlur($event);\n        });\n        i0.ɵɵpipe(7, \"fdTranslate\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"fd-popover-body\");\n        i0.ɵɵtemplate(9, DatePickerComponent_fd_form_message_9_Template, 2, 3, \"fd-form-message\", 4);\n        i0.ɵɵprojection(10);\n        i0.ɵɵelementStart(11, \"fd-calendar\", 5);\n        i0.ɵɵlistener(\"closeCalendar\", function DatePickerComponent_Template_fd_calendar_closeCalendar_11_listener() {\n          return ctx.closeFromCalendar();\n        })(\"activeViewChange\", function DatePickerComponent_Template_fd_calendar_activeViewChange_11_listener($event) {\n          return ctx.handleCalendarActiveViewChange($event);\n        })(\"selectedRangeDateChange\", function DatePickerComponent_Template_fd_calendar_selectedRangeDateChange_11_listener($event) {\n          return ctx.handleRangeDateChange($event);\n        })(\"selectedDateChange\", function DatePickerComponent_Template_fd_calendar_selectedDateChange_11_listener($event) {\n          return ctx.handleSingleDateChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, DatePickerComponent_div_12_Template, 4, 1, \"div\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"div\", 8);\n        i0.ɵɵelementContainerStart(15, 9);\n        i0.ɵɵtemplate(16, DatePickerComponent_ng_container_16_Template, 3, 3, \"ng-container\", 10);\n        i0.ɵɵtemplate(17, DatePickerComponent_ng_container_17_Template, 3, 3, \"ng-container\", 10);\n        i0.ɵɵtemplate(18, DatePickerComponent_ng_container_18_Template, 3, 3, \"ng-container\", 10);\n        i0.ɵɵtemplate(19, DatePickerComponent_ng_container_19_Template, 3, 3, \"ng-container\", 10);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"isOpen\", ctx.isOpen)(\"triggers\", i0.ɵɵpureFunction0(57, _c1))(\"placement\", ctx.placement)(\"disabled\", ctx.disabled)(\"focusTrapped\", true)(\"focusAutoCapture\", false)(\"appendTo\", ctx.appendTo);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"state\", ctx.state)(\"disabled\", ctx.disabled)(\"isControl\", true)(\"button\", true)(\"buttonFocusable\", ctx.buttonFocusable)(\"isExpanded\", ctx.isOpen)(\"glyphAriaLabel\", ctx.displayCalendarToggleLabel || i0.ɵɵpipeBind1(4, 51, \"coreDatePicker.displayCalendarToggleLabel\"))(\"iconTitle\", ctx.displayCalendarToggleLabel || i0.ɵɵpipeBind1(5, 53, \"coreDatePicker.displayCalendarToggleLabel\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"placeholder\", ctx.placeholder)(\"ngModel\", ctx._inputFieldDate);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"aria-expanded\", ctx.isOpen)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-label\", ctx._dateInputArialLabel || i0.ɵɵpipeBind1(7, 55, ctx._dateInputArialLabelKey))(\"aria-required\", ctx.required)(\"aria-describedby\", ctx._formValueStateMessageId);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"aria-expanded\", ctx.isOpen)(\"aria-hidden\", !ctx.isOpen);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._message);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"activeView\", ctx.activeView)(\"markWeekends\", ctx.markWeekends)(\"specialDaysRules\", ctx.specialDaysRules)(\"showWeekNumbers\", ctx.showWeekNumbers)(\"aggregatedYearGrid\", ctx.aggregatedYearGrid)(\"yearGrid\", ctx.yearGrid)(\"calType\", ctx.type)(\"rangeHoverEffect\", ctx.rangeHoverEffect)(\"disableFunction\", ctx.disableFunction ? ctx.disableFunction : null)(\"disableRangeStartFunction\", ctx.disableRangeStartFunction ? ctx.disableRangeStartFunction : null)(\"disableRangeEndFunction\", ctx.disableRangeEndFunction ? ctx.disableRangeEndFunction : null)(\"selectedDate\", ctx.selectedDate)(\"selectedRangeDate\", ctx.selectedRangeDate)(\"startingDayOfWeek\", ctx.startingDayOfWeek)(\"previousButtonDisableFunction\", ctx.previousButtonDisableFunction)(\"nextButtonDisableFunction\", ctx.nextButtonDisableFunction);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showTodayButton);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._formValueStateMessageId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.state);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"success\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"information\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"warning\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx._message, \" \");\n      }\n    },\n    dependencies: [i3.NgIf, i3.NgSwitch, i3.NgSwitchCase, i4.PopoverControlComponent, i4.PopoverBodyComponent, i4.PopoverComponent, i5.CalendarComponent, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.InputGroupComponent, i7.InputGroupInputDirective, i8.ButtonComponent, i2.FormMessageComponent, i9.BarComponent, i9.BarRightDirective, i9.BarElementDirective, i10.FdTranslatePipe],\n    styles: [\".fd-date-picker-custom{display:inline-block}.fd-date-picker-custom fd-popover{display:block}.fd-date-picker-custom fd-calendar{border-radius:.25rem;border-radius:var(--sapElement_BorderCornerRadius, .25rem)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return DatePickerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedDatePickerCompactDirective = /*#__PURE__*/(() => {\n  class DeprecatedDatePickerCompactDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-date-picker');\n    }\n  }\n  DeprecatedDatePickerCompactDirective.ɵfac = function DeprecatedDatePickerCompactDirective_Factory(t) {\n    return new (t || DeprecatedDatePickerCompactDirective)();\n  };\n  DeprecatedDatePickerCompactDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedDatePickerCompactDirective,\n    selectors: [[\"fd-date-picker\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedDatePickerCompactDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedDatePickerCompactDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DatePickerModule = /*#__PURE__*/(() => {\n  class DatePickerModule {}\n  DatePickerModule.ɵfac = function DatePickerModule_Factory(t) {\n    return new (t || DatePickerModule)();\n  };\n  DatePickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DatePickerModule\n  });\n  DatePickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule, PopoverModule, I18nModule, CalendarModule, FormsModule, InputGroupModule, ButtonModule, FormMessageModule, BarModule, ContentDensityModule, ContentDensityModule]\n  });\n  return DatePickerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DatePickerComponent, DatePickerModule, DeprecatedDatePickerCompactDirective };\n//# sourceMappingURL=fundamental-ngx-core-date-picker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}