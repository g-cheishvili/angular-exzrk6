{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { applyCssClass } from '@fundamental-ngx/cdk/utils';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction StatusIndicatorComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"fd-status-indicator__label--sm\", ctx_r0.labelSize === \"sm\")(\"fd-status-indicator__label--md\", ctx_r0.labelSize === \"md\")(\"fd-status-indicator__label--lg\", ctx_r0.labelSize === \"lg\")(\"fd-status-indicator__label--xl\", ctx_r0.labelSize === \"xl\")(\"fd-status-indicator__label--top\", ctx_r0.labelPosition === \"top\")(\"fd-status-indicator__label--left\", ctx_r0.labelPosition === \"left\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.statusLabel, \"\\n\");\n  }\n}\nfunction StatusIndicatorComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"fd-status-indicator__label--sm\", ctx_r1.labelSize === \"sm\")(\"fd-status-indicator__label--md\", ctx_r1.labelSize === \"md\")(\"fd-status-indicator__label--lg\", ctx_r1.labelSize === \"lg\")(\"fd-status-indicator__label--xl\", ctx_r1.labelSize === \"xl\")(\"fd-status-indicator__label--right\", ctx_r1.labelPosition === \"right\")(\"fd-status-indicator__label--bottom\", ctx_r1.labelPosition === \"bottom\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.statusLabel, \"\\n\");\n  }\n}\nfunction StatusIndicatorComponent_ng_template_4__svg_svg_0__svg_linearGradient_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"linearGradient\", 9)(1, \"stop\", 15);\n    i0.ɵɵelement(2, \"animate\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"stop\", 17);\n    i0.ɵɵelement(4, \"animate\", 16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r6 = i0.ɵɵnextContext().index;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r7.id + i_r6, \"-gradient\");\n    i0.ɵɵattribute(\"x1\", ctx_r7.x1)(\"y1\", ctx_r7.y1)(\"x2\", ctx_r7.x2)(\"y2\", ctx_r7.y2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"offset\", ctx_r7.fillCalculator - i_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattributeInterpolate1(\"values\", \"0, \", ctx_r7.fillCalculator - i_r6, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"offset\", ctx_r7.fillCalculator - i_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattributeInterpolate1(\"values\", \"0, \", ctx_r7.fillCalculator - i_r6, \"\");\n  }\n}\nfunction StatusIndicatorComponent_ng_template_4__svg_svg_0__svg_path_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    const i_r6 = ctx_r12.index;\n    const path_r5 = ctx_r12.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r9.id + i_r6, \"-mask-shape\");\n    i0.ɵɵattributeInterpolate1(\"fill\", \"url(#\", ctx_r9.id + i_r6, \"-gradient)\");\n    i0.ɵɵattribute(\"d\", path_r5);\n  }\n}\nfunction StatusIndicatorComponent_ng_template_4__svg_svg_0__svg_polygon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"polygon\", 19);\n  }\n  if (rf & 2) {\n    const i_r6 = i0.ɵɵnextContext().index;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r10.id + i_r6, \"-mask-shape\");\n    i0.ɵɵattribute(\"points\", ctx_r10.pointsArray[i_r6]);\n  }\n}\nfunction StatusIndicatorComponent_ng_template_4__svg_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 7)(1, \"defs\");\n    i0.ɵɵtemplate(2, StatusIndicatorComponent_ng_template_4__svg_svg_0__svg_linearGradient_2_Template, 5, 9, \"linearGradient\", 8);\n    i0.ɵɵelementStart(3, \"mask\", 9, 10);\n    i0.ɵɵtemplate(5, StatusIndicatorComponent_ng_template_4__svg_svg_0__svg_path_5_Template, 1, 3, \"path\", 11);\n    i0.ɵɵtemplate(6, StatusIndicatorComponent_ng_template_4__svg_svg_0__svg_polygon_6_Template, 1, 2, \"polygon\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(7, \"path\", 13)(8, \"path\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const path_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"id\", ctx_r4.id + i_r6);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r4.fillCalculator - i_r6 > 0 && ctx_r4.fillCalculator - i_r6 < 1) || ctx_r4.fillingType !== \"radial\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r4.id + i_r6, \"-mask\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r4.fillCalculator - i_r6 > 0 && ctx_r4.fillCalculator - i_r6 < 1) || ctx_r4.fillingType !== \"radial\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.fillingType === \"radial\" && ctx_r4.fillCalculator - i_r6 > 0 && ctx_r4.fillCalculator - i_r6 < 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r4.id + i_r6, \"-shape\");\n    i0.ɵɵattributeInterpolate1(\"mask\", \"url(#\", ctx_r4.id + i_r6, \"-mask)\");\n    i0.ɵɵattribute(\"d\", path_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r4.id + i_r6, \"-shape-border\");\n    i0.ɵɵattribute(\"d\", path_r5);\n  }\n}\nfunction StatusIndicatorComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, StatusIndicatorComponent_ng_template_4__svg_svg_0_Template, 9, 10, \"svg\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.path);\n  }\n}\nclass Point {\n  /** @hidden */\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\nlet StatusIndicatorComponent = /*#__PURE__*/(() => {\n  class StatusIndicatorComponent {\n    /** @hidden */\n    set _fillDirection(direction) {\n      this.fillDirection = direction;\n    }\n    get _fillDirection() {\n      return this.fillDirection;\n    }\n    /** @hidden */\n    constructor(_elementRef, _cd) {\n      this._elementRef = _elementRef;\n      this._cd = _cd;\n      /**\n       * defines the size of the status indicator.\n       * Can be one of the following: 'sm' | 'md' | 'lg' | 'xl'\n       * Default size is Medium(md).\n       */\n      this.size = 'md';\n      /**\n       * defines the size of the status indicator.\n       * Can be one of the following: 'sm' | 'md' | 'lg' | 'xl'\n       */\n      this.labelSize = 'sm';\n      /**\n       * value to define fill direction\n       */\n      this.fillDirection = 'clockwise';\n      /**\n       * FillingType to represent the fill pattern of the component\n       */\n      this.fillingType = 'lineardown';\n      /** @hidden */\n      this.pointsArray = [];\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._angleCalculation();\n      this._cd.detectChanges();\n    }\n    /** @hidden */\n    ngOnChanges() {\n      this._calculateFilling();\n      this.buildComponentCssClass();\n    }\n    /** @hidden */\n    ngOnInit() {\n      this.buildComponentCssClass();\n    }\n    /** @hidden\n     * CssClassBuilder interface implementation\n     * function must return single string\n     * function is responsible for order which css classes are applied\n     */\n    buildComponentCssClass() {\n      return ['fd-status-indicator', this.size ? `fd-status-indicator--${this.size}` : '', this.status ? `fd-status-indicator--${this.status}` : '', this.clickable ? `fd-status-indicator--link` : '', this.labelPosition === 'right' || this.labelPosition === 'left' ? `fd-status-indicator--horizontal-label` : '', this.class];\n    }\n    /** @hidden */\n    elementRef() {\n      return this._elementRef;\n    }\n    /** @hidden */\n    _calculateFilling() {\n      if (this.fillPercentage < 0 || this.fillPercentage === undefined) {\n        this.fillCalculator = 0;\n      } else {\n        this.fillCalculator = this.fillPercentage * this.path.length / 100;\n      }\n    }\n    /** @hidden */\n    _angleCalculation() {\n      let sPointsAttributeValue;\n      let polygonPoints;\n      switch (this.fillingType) {\n        case 'angled':\n          this.binaryString = this._convertAngleToBinary(this.angle);\n          this._assignBinaryValue(this.binaryString);\n          break;\n        case 'radial':\n          {\n            const tempPercent = this.fillCalculator % 1;\n            const fillNumber = Number(tempPercent.toFixed(2));\n            const element = this._elementRef.nativeElement.querySelectorAll('svg');\n            for (let i = 1; i < element.length; i++) {\n              sPointsAttributeValue = this._getPolygonPointsForCircularFilling(fillNumber * 100, element[i].getBBox());\n              polygonPoints = sPointsAttributeValue.reduce((acc, item) => acc + item.x + ',' + item.y + ' ', '');\n              this.pointsArray.push(polygonPoints);\n            }\n            break;\n          }\n        case 'linearup':\n          this.binaryString = this._convertAngleToBinary(90);\n          this._assignBinaryValue(this.binaryString);\n          break;\n        case 'lineardown':\n          this.binaryString = this._convertAngleToBinary(270);\n          this._assignBinaryValue(this.binaryString);\n          break;\n        case 'linearleft':\n          this.binaryString = this._convertAngleToBinary(180);\n          this._assignBinaryValue(this.binaryString);\n          break;\n        default:\n          throw new Error(`fdStatusIndicator: No fillType found for ${this.fillingType}.`);\n      }\n    }\n    /** @hidden */\n    _convertAngleToBinary(angle) {\n      if (angle > 0 && angle <= 45) {\n        return '1,0,0,1';\n      } else if (angle >= 45 && angle < 90) {\n        return '0,0,0,1';\n      } else if (angle >= 90 && angle < 135) {\n        return '0,0,0,1';\n      } else if (angle >= 135 && angle < 180) {\n        return '0,0,1,1';\n      } else if (angle >= 180 && angle < 225) {\n        return '0,0,1,0';\n      } else if (angle >= 225 && angle < 270) {\n        return '0,1,1,0';\n      } else if (angle >= 270 && angle < 315) {\n        return '0,1,0,0';\n      } else if (angle >= 315 && angle < 360) {\n        return '1,1,0,0';\n      } else if (angle === 0 || angle === 360) {\n        return '1,0,0,0';\n      } else {\n        return 'invalid';\n      }\n    }\n    /** @hidden */\n    _assignBinaryValue(binaryString) {\n      const binaryValue = binaryString.split(',');\n      this.x1 = binaryValue[0];\n      this.y1 = binaryValue[1];\n      this.x2 = binaryValue[2];\n      this.y2 = binaryValue[3];\n    }\n    /** @hidden */\n    _getPolygonPointsForCircularFilling(value, boundingBoxSvg) {\n      const angle = 3.6 * value;\n      const points = [];\n      let xDifferenceFromBoundaryCentre;\n      let yDifferenceFromBoundaryCentre;\n      let polygonPoint;\n      // starts at 12, the algorithm computes the coordination for clockwise direction only\n      // counter clockwise direction is managed by symmetry\n      const oStartPoint = new Point(boundingBoxSvg.x + boundingBoxSvg.width / 2, boundingBoxSvg.y);\n      const oCentrePoint = new Point(boundingBoxSvg.x + boundingBoxSvg.width / 2, boundingBoxSvg.y + boundingBoxSvg.height / 2);\n      // Reflects x coordinate by centre point for Counter Clockwise type\n      const _adjustIfCounterClockwise = oPoint => {\n        const res = Object.assign({}, oPoint);\n        if (this._fillDirection === 'counterclockwise') {\n          const iXDistanceFromCentre = oPoint.x - oCentrePoint.x;\n          res.x = oCentrePoint.x - iXDistanceFromCentre;\n        }\n        return res;\n      };\n      // Boundary centre is given by angle distance from the beginning (0°). The returned difference is related\n      // to x or y coordinate depending on boundary centre angle (e.g. 0° -> x, 90° -> y, 180° -> x  270° -> y).\n      // Boundary length is length of the corresponding side of bounding box (width for x, height for y).\n      const computeDifferenceFromBoundaryCentre = (inAngle, iBoundaryCentreAngle, iBoundaryLength) => {\n        const tan = Math.tan((iBoundaryCentreAngle - inAngle) * Math.PI / 180);\n        return tan * iBoundaryLength / 2;\n      };\n      points.push(oStartPoint);\n      if (0 < angle && angle < 45) {\n        xDifferenceFromBoundaryCentre = computeDifferenceFromBoundaryCentre(angle, 0, boundingBoxSvg.height);\n        polygonPoint = new Point(oStartPoint.x - xDifferenceFromBoundaryCentre, oStartPoint.y);\n        points.push(_adjustIfCounterClockwise(polygonPoint));\n      }\n      if (45 <= angle) {\n        points.push(_adjustIfCounterClockwise(new Point(boundingBoxSvg.x + boundingBoxSvg.width, boundingBoxSvg.y)));\n      }\n      if (45 < angle && angle < 135) {\n        yDifferenceFromBoundaryCentre = computeDifferenceFromBoundaryCentre(angle, 90, boundingBoxSvg.width);\n        polygonPoint = new Point(boundingBoxSvg.x + boundingBoxSvg.width, boundingBoxSvg.y + boundingBoxSvg.height / 2 - yDifferenceFromBoundaryCentre);\n        points.push(_adjustIfCounterClockwise(polygonPoint));\n      }\n      if (135 <= angle) {\n        points.push(_adjustIfCounterClockwise(new Point(boundingBoxSvg.x + boundingBoxSvg.width, boundingBoxSvg.y + boundingBoxSvg.height)));\n      }\n      if (135 < angle && angle < 225) {\n        xDifferenceFromBoundaryCentre = computeDifferenceFromBoundaryCentre(angle, 180, boundingBoxSvg.height);\n        polygonPoint = new Point(boundingBoxSvg.x + boundingBoxSvg.width / 2 + xDifferenceFromBoundaryCentre, boundingBoxSvg.y + boundingBoxSvg.height);\n        points.push(_adjustIfCounterClockwise(polygonPoint));\n      }\n      if (225 <= angle) {\n        points.push(_adjustIfCounterClockwise(new Point(boundingBoxSvg.x, boundingBoxSvg.y + boundingBoxSvg.height)));\n      }\n      if (225 < angle && angle < 315) {\n        yDifferenceFromBoundaryCentre = computeDifferenceFromBoundaryCentre(angle, 270, boundingBoxSvg.width);\n        polygonPoint = new Point(boundingBoxSvg.x, boundingBoxSvg.y + boundingBoxSvg.height / 2 + yDifferenceFromBoundaryCentre);\n        points.push(_adjustIfCounterClockwise(polygonPoint));\n      }\n      if (315 <= angle) {\n        points.push(_adjustIfCounterClockwise(new Point(boundingBoxSvg.x, boundingBoxSvg.y)));\n      }\n      if (315 < angle && angle <= 360) {\n        xDifferenceFromBoundaryCentre = computeDifferenceFromBoundaryCentre(angle, 360, boundingBoxSvg.height);\n        polygonPoint = new Point(boundingBoxSvg.x + boundingBoxSvg.width / 2 - xDifferenceFromBoundaryCentre, boundingBoxSvg.y);\n        points.push(_adjustIfCounterClockwise(polygonPoint));\n      }\n      points.push(oCentrePoint);\n      return points;\n    }\n  }\n  StatusIndicatorComponent.ɵfac = function StatusIndicatorComponent_Factory(t) {\n    return new (t || StatusIndicatorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  StatusIndicatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StatusIndicatorComponent,\n    selectors: [[\"fd-status-indicator\"]],\n    hostVars: 10,\n    hostBindings: function StatusIndicatorComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-roledescription\", ctx.ariaRoleDescription)(\"focusable\", ctx.focusable)(\"title\", ctx.title)(\"role\", ctx.role)(\"aria-valuetext\", ctx.ariaValueText)(\"aria-valuenow\", ctx.fillPercentage ? ctx.fillPercentage : 0)(\"aria-valuemin\", 0)(\"aria-valuemax\", 100)(\"tabindex\", ctx.focusable ? 0 : -1);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      size: \"size\",\n      status: \"status\",\n      statusLabel: \"statusLabel\",\n      viewBox: \"viewBox\",\n      clickable: \"clickable\",\n      labelSize: \"labelSize\",\n      ariaLabel: \"ariaLabel\",\n      ariaRoleDescription: \"ariaRoleDescription\",\n      focusable: \"focusable\",\n      role: \"role\",\n      ariaValueText: \"ariaValueText\",\n      title: \"title\",\n      labelPosition: \"labelPosition\",\n      path: \"path\",\n      fillPercentage: \"fillPercentage\",\n      fillDirection: \"fillDirection\",\n      fillingType: \"fillingType\",\n      angle: \"angle\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 6,\n    vars: 5,\n    consts: [[\"class\", \"fd-status-indicator__label\", 3, \"fd-status-indicator__label--sm\", \"fd-status-indicator__label--md\", \"fd-status-indicator__label--lg\", \"fd-status-indicator__label--xl\", \"fd-status-indicator__label--top\", \"fd-status-indicator__label--left\", 4, \"ngIf\"], [\"data-sap-ui\", \"__shape0-__box21-24\", \"version\", \"1.1\", \"xlmns\", \"http://www.w3.org/2000/svg\", \"preserveAspectRatio\", \"xMidYMid meet\", 1, \"fd-status-indicator__svg\"], [3, \"ngTemplateOutlet\"], [\"class\", \"fd-status-indicator__label\", 3, \"fd-status-indicator__label--sm\", \"fd-status-indicator__label--md\", \"fd-status-indicator__label--lg\", \"fd-status-indicator__label--xl\", \"fd-status-indicator__label--right\", \"fd-status-indicator__label--bottom\", 4, \"ngIf\"], [\"svgTemplate\", \"\"], [1, \"fd-status-indicator__label\"], [\"xlmns\", \"http://www.w3.org/2000/svg\", \"preserveAspectRatio\", \"xMidYMid meet\", \"overflow\", \"visible\", \"data-sap-ui\", \"id\", 4, \"ngFor\", \"ngForOf\"], [\"xlmns\", \"http://www.w3.org/2000/svg\", \"preserveAspectRatio\", \"xMidYMid meet\", \"overflow\", \"visible\", \"data-sap-ui\", \"id\"], [3, \"id\", 4, \"ngIf\"], [3, \"id\"], [\"maskTemplate\", \"\"], [\"stroke-width\", \"0\", \"stroke\", \"white\", 3, \"id\", 4, \"ngIf\"], [\"fill\", \"white\", 3, \"id\", 4, \"ngIf\"], [\"stroke-width\", \"0\", \"stroke\", \"#89919A\", 3, \"id\"], [\"stroke-width\", \"0.25\", \"stroke\", \"#89919A\", \"fill\", \"transparent\", 3, \"id\"], [\"stop-color\", \"white\"], [\"attributeName\", \"offset\", \"repeatCount\", \"1\", \"dur\", \"1s\", \"begin\", \"0s\"], [\"stop-color\", \"transparent\"], [\"stroke-width\", \"0\", \"stroke\", \"white\", 3, \"id\"], [\"fill\", \"white\", 3, \"id\"]],\n    template: function StatusIndicatorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, StatusIndicatorComponent_span_0_Template, 2, 13, \"span\", 0);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\", 1);\n        i0.ɵɵelementContainer(2, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, StatusIndicatorComponent_span_3_Template, 2, 13, \"span\", 3);\n        i0.ɵɵtemplate(4, StatusIndicatorComponent_ng_template_4_Template, 1, 1, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.labelPosition === \"left\" || ctx.labelPosition === \"top\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx.id)(\"viewBox\", ctx.viewBox);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.labelPosition === \"right\" || ctx.labelPosition === \"bottom\");\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-status-indicator{stroke:var(--sapNeutralElementColor);stroke-width:.25;fill:transparent;-webkit-box-align:center;-ms-flex-align:center;-webkit-box-sizing:border-box;align-items:center;border:0;box-sizing:border-box;color:var(--sapContent_LabelColor);color:var(--sapTextColor);display:inline-flex;flex-direction:column;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-status-indicator.is-focus,.fd-status-indicator:focus{outline:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);outline-offset:var(--sapContent_FocusWidth);z-index:5}.fd-status-indicator:after,.fd-status-indicator:before{box-sizing:inherit;font-size:inherit}.fd-status-indicator--horizontal-label{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);flex-direction:row;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-status-indicator--horizontal-label:after,.fd-status-indicator--horizontal-label:before{box-sizing:inherit;font-size:inherit}.fd-status-indicator--link{cursor:pointer}.fd-status-indicator__label,.fd-status-indicator__label--sm{font-size:var(--sapFontSmallSize, .75rem)}.fd-status-indicator__label--sm.fd-status-indicator__label--top{margin-bottom:.375rem}.fd-status-indicator__label--sm.fd-status-indicator__label--right{margin-left:.375rem}.fd-status-indicator__label--sm.fd-status-indicator__label--right[dir=rtl],[dir=rtl] .fd-status-indicator__label--sm.fd-status-indicator__label--right{-webkit-transform:matrix(1,0,0,1,22,1);margin-left:0;margin-right:.375rem;transform:matrix(1,0,0,1,22,1)}.fd-status-indicator__label--sm.fd-status-indicator__label--left{margin-right:.375rem}.fd-status-indicator__label--sm.fd-status-indicator__label--left[dir=rtl],[dir=rtl] .fd-status-indicator__label--sm.fd-status-indicator__label--left{-webkit-transform:matrix(1,0,0,1,-22,1);margin-left:.375rem;margin-right:0;transform:matrix(1,0,0,1,-22,1)}.fd-status-indicator__label--sm.fd-status-indicator__label--bottom{margin-top:.375rem}.fd-status-indicator__label--md{font-size:var(--sapFontSize, .875rem)}.fd-status-indicator__label--md.fd-status-indicator__label--top{margin-bottom:.5rem}.fd-status-indicator__label--md.fd-status-indicator__label--right{margin-left:.5rem}.fd-status-indicator__label--md.fd-status-indicator__label--right[dir=rtl],[dir=rtl] .fd-status-indicator__label--md.fd-status-indicator__label--right{-webkit-transform:matrix(1,0,0,1,22,1);margin-left:0;margin-right:.5rem;transform:matrix(1,0,0,1,22,1)}.fd-status-indicator__label--md.fd-status-indicator__label--left{margin-right:.5rem}.fd-status-indicator__label--md.fd-status-indicator__label--left[dir=rtl],[dir=rtl] .fd-status-indicator__label--md.fd-status-indicator__label--left{-webkit-transform:matrix(1,0,0,1,-22,1);margin-left:.5rem;margin-right:0;transform:matrix(1,0,0,1,-22,1)}.fd-status-indicator__label--md.fd-status-indicator__label--bottom{margin-top:.5rem}.fd-status-indicator__label--lg{font-size:1.125rem}.fd-status-indicator__label--lg.fd-status-indicator__label--top{margin-bottom:.75rem}.fd-status-indicator__label--lg.fd-status-indicator__label--right{margin-left:.75rem}.fd-status-indicator__label--lg.fd-status-indicator__label--right[dir=rtl],[dir=rtl] .fd-status-indicator__label--lg.fd-status-indicator__label--right{-webkit-transform:matrix(1,0,0,1,22,1);margin-left:0;margin-right:.75rem;transform:matrix(1,0,0,1,22,1)}.fd-status-indicator__label--lg.fd-status-indicator__label--left{margin-right:.75rem}.fd-status-indicator__label--lg.fd-status-indicator__label--left[dir=rtl],[dir=rtl] .fd-status-indicator__label--lg.fd-status-indicator__label--left{-webkit-transform:matrix(1,0,0,1,-22,1);margin-left:.75rem;margin-right:0;transform:matrix(1,0,0,1,-22,1)}.fd-status-indicator__label--lg.fd-status-indicator__label--bottom{margin-top:.75rem}.fd-status-indicator__label--xl{font-size:1.875rem}.fd-status-indicator__label--xl.fd-status-indicator__label--top{margin-bottom:1rem}.fd-status-indicator__label--xl.fd-status-indicator__label--right{margin-left:1rem}.fd-status-indicator__label--xl.fd-status-indicator__label--right[dir=rtl],[dir=rtl] .fd-status-indicator__label--xl.fd-status-indicator__label--right{-webkit-transform:matrix(1,0,0,1,22,1);margin-left:0;margin-right:1rem;transform:matrix(1,0,0,1,22,1)}.fd-status-indicator__label--xl.fd-status-indicator__label--left{margin-right:1rem}.fd-status-indicator__label--xl.fd-status-indicator__label--left[dir=rtl],[dir=rtl] .fd-status-indicator__label--xl.fd-status-indicator__label--left{-webkit-transform:matrix(1,0,0,1,-22,1);margin-left:1rem;margin-right:0;transform:matrix(1,0,0,1,-22,1)}.fd-status-indicator__label--xl.fd-status-indicator__label--bottom{margin-top:1rem}.fd-status-indicator--positive{fill:var(--sapPositiveElementColor);color:var(--sapPositiveElementColor)}.fd-status-indicator--critical{fill:var(--sapCriticalElementColor);color:var(--sapCriticalElementColor)}.fd-status-indicator--negative{fill:var(--sapNegativeElementColor);color:var(--sapNegativeElementColor)}.fd-status-indicator--sm .fd-status-indicator__svg{height:1.375rem;width:1.875rem}.fd-status-indicator--md .fd-status-indicator__svg{height:1.875rem;width:2.8125rem}.fd-status-indicator--lg .fd-status-indicator__svg{height:3.4375rem;width:5rem}.fd-status-indicator--xl .fd-status-indicator__svg{height:6.25rem;width:9.0625rem}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  __decorate([applyCssClass, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", Array)], StatusIndicatorComponent.prototype, \"buildComponentCssClass\", null);\n  return StatusIndicatorComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StatusIndicatorModule = /*#__PURE__*/(() => {\n  class StatusIndicatorModule {}\n  StatusIndicatorModule.ɵfac = function StatusIndicatorModule_Factory(t) {\n    return new (t || StatusIndicatorModule)();\n  };\n  StatusIndicatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StatusIndicatorModule\n  });\n  StatusIndicatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return StatusIndicatorModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Point, StatusIndicatorComponent, StatusIndicatorModule };\n//# sourceMappingURL=fundamental-ngx-core-status-indicator.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}