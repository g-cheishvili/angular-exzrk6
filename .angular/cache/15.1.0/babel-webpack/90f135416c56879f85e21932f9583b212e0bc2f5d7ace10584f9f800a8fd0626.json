{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\n\n/**\n * A directive designed to help navigation elements determine the element currently in view of the user.\n */\nlet ScrollSpyDirective = /*#__PURE__*/(() => {\n  class ScrollSpyDirective {\n    /** @hidden */\n    constructor(_elRef) {\n      this._elRef = _elRef;\n      /**\n       * An array of tags to track.\n       */\n      this.trackedTags = [];\n      /**\n       * Whether events are still fired if there is no tag present on the user's screen.\n       */\n      this.fireEmpty = false;\n      /**\n       * A number that represent at what location in the container the event is fired.\n       * 0.5 would fire the events in the middle of the container,\n       * 0 for the top and 1 for the bottom.\n       */\n      this.targetPercent = 0;\n      /**\n       * Number that represents the offset in pixels for fired target. `100` value means that the event will be fired for\n       * target that is 100 pixels below the spy container.\n       */\n      this.targetOffset = 0;\n      /**\n       * Whether to disable scroll spy\n       */\n      this.scrollSpyDisabled = false;\n      /**\n       * Event fired on the scroll element when a new item becomes activated by the scrollspy .\n       * The returned value is the HTMLElement itself.\n       */\n      this.spyChange = new EventEmitter();\n    }\n    /** @hidden */\n    onScroll(event) {\n      if (this.scrollSpyDisabled) {\n        return;\n      }\n      let spiedTag;\n      const target = event.target;\n      const children = this._elRef.nativeElement.children;\n      const [firstChild] = children;\n      const childrenLength = children.length;\n      const targetScrollTop = target.scrollTop;\n      const targetOffsetTop = target.offsetTop + this.targetOffset - (target.offsetTop - firstChild.offsetTop);\n      for (let i = 0; i < childrenLength; i++) {\n        const element = children[i];\n        if (this.trackedTags.some(tag => tag.toLocaleUpperCase() === element.tagName.toLocaleUpperCase())) {\n          if (element.offsetTop - targetOffsetTop <= targetScrollTop + target.offsetHeight * this.targetPercent) {\n            spiedTag = element;\n          }\n        }\n      }\n      if ((spiedTag || this.fireEmpty) && spiedTag !== this._currentActive) {\n        this._currentActive = spiedTag;\n        this.spyChange.emit(this._currentActive);\n      }\n    }\n  }\n  ScrollSpyDirective.ɵfac = function ScrollSpyDirective_Factory(t) {\n    return new (t || ScrollSpyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  ScrollSpyDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ScrollSpyDirective,\n    selectors: [[\"\", \"fdScrollSpy\", \"\"]],\n    hostBindings: function ScrollSpyDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"scroll\", function ScrollSpyDirective_scroll_HostBindingHandler($event) {\n          return ctx.onScroll($event);\n        });\n      }\n    },\n    inputs: {\n      trackedTags: \"trackedTags\",\n      fireEmpty: \"fireEmpty\",\n      targetPercent: \"targetPercent\",\n      targetOffset: \"targetOffset\",\n      scrollSpyDisabled: \"scrollSpyDisabled\"\n    },\n    outputs: {\n      spyChange: \"spyChange\"\n    }\n  });\n  return ScrollSpyDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ScrollSpyModule = /*#__PURE__*/(() => {\n  class ScrollSpyModule {}\n  ScrollSpyModule.ɵfac = function ScrollSpyModule_Factory(t) {\n    return new (t || ScrollSpyModule)();\n  };\n  ScrollSpyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ScrollSpyModule\n  });\n  ScrollSpyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return ScrollSpyModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ScrollSpyDirective, ScrollSpyModule };\n//# sourceMappingURL=fundamental-ngx-core-scroll-spy.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}