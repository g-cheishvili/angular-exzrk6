{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, ContentChild, Input, Output, NgModule } from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i3 from '@fundamental-ngx/core/content-density';\nimport { merge, cloneDeep } from 'lodash-es';\nconst _c0 = [\"startColumn\"];\nconst _c1 = [\"midColumn\"];\nconst _c2 = [\"endColumn\"];\nfunction FlexibleColumnLayoutComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction FlexibleColumnLayoutComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function FlexibleColumnLayoutComponent_div_3_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5._handleLeftColumnSeparatorClick());\n    });\n    i0.ɵɵelementStart(1, \"button\", 5);\n    i0.ɵɵelement(2, \"i\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.separatorAriaLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r1._leftColumnSeparator === \"left\" ? ctx_r1.expandTitle : ctx_r1.collapseTitle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1._leftColumnSeparator ? \"sap-icon--slim-arrow-\" + ctx_r1._leftColumnSeparator : \"\");\n  }\n}\nfunction FlexibleColumnLayoutComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction FlexibleColumnLayoutComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function FlexibleColumnLayoutComponent_div_6_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7._handleRightColumnSeparatorClick());\n    });\n    i0.ɵɵelementStart(1, \"button\", 5);\n    i0.ɵɵelement(2, \"i\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.separatorAriaLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r3._rightColumnSeparator === \"left\" ? ctx_r3.expandTitle : ctx_r3.collapseTitle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r3._rightColumnSeparator ? \"sap-icon--slim-arrow-\" + ctx_r3._rightColumnSeparator : \"\");\n  }\n}\nfunction FlexibleColumnLayoutComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst ONE_COLUMN_START_FULL_SCREEN = 'OneColumnStartFullScreen';\nconst ONE_COLUMN_MID_FULL_SCREEN = 'OneColumnMidFullScreen';\nconst ONE_COLUMN_END_FULL_SCREEN = 'OneColumnEndFullScreen';\nconst TWO_COLUMNS_START_EXPANDED = 'TwoColumnsStartExpanded';\nconst TWO_COLUMNS_MID_EXPANDED = 'TwoColumnsMidExpanded';\nconst TWO_COLUMNS_END_EXPANDED = 'TwoColumnsEndExpanded';\nconst THREE_COLUMNS_MID_EXPANDED = 'ThreeColumnsMidExpanded';\nconst THREE_COLUMNS_END_EXPANDED = 'ThreeColumnsEndExpanded';\nconst THREE_COLUMNS_START_MINIMIZED = 'ThreeColumnsStartMinimized';\nconst THREE_COLUMNS_END_MINIMIZED = 'ThreeColumnsEndMinimized';\nconst SM_SCREEN_SIZE = 'sm';\nconst MD_SCREEN_SIZE = 'md';\nconst LG_SCREEN_SIZE = 'lg';\nconst DEFAULT_FLEXIBLE_LAYOUT_CONFIG = {\n  layouts: {\n    OneColumnStartFullScreen: {\n      start: 100,\n      mid: 0,\n      end: 0\n    },\n    OneColumnMidFullScreen: {\n      start: 0,\n      mid: 100,\n      end: 0\n    },\n    OneColumnEndFullScreen: {\n      start: 0,\n      mid: 0,\n      end: 100\n    },\n    TwoColumnsStartExpanded: {\n      start: 67,\n      mid: 33,\n      end: 0\n    },\n    TwoColumnsMidExpanded: {\n      start: 33,\n      mid: 67,\n      end: 0\n    },\n    TwoColumnsEndExpanded: {\n      start: 0,\n      mid: 33,\n      end: 67\n    },\n    ThreeColumnsMidExpanded: {\n      start: 25,\n      mid: 50,\n      end: 25\n    },\n    ThreeColumnsEndExpanded: {\n      start: 25,\n      mid: 25,\n      end: 50\n    },\n    ThreeColumnsStartMinimized: {\n      start: 0,\n      mid: 67,\n      end: 33\n    },\n    ThreeColumnsEndMinimized: {\n      start: 33,\n      mid: 67,\n      end: 0\n    }\n  }\n};\nconst FD_FLEXIBLE_LAYOUT_CONFIG = new InjectionToken('FdFlexibleLayoutConfig');\nconst FD_FLEXIBLE_COLUMN_LAYOUT_COMPONENT = new InjectionToken('FdFlexibleColumnLayoutComponent');\nlet FlexibleColumnLayoutComponent = /*#__PURE__*/(() => {\n  class FlexibleColumnLayoutComponent {\n    /** @hidden */\n    constructor(_config) {\n      this._config = _config;\n      /**\n       * The background design of the component\n       * Options include: 'solid' | 'translucent' | 'transparent'\n       * The default is set to 'solid'\n       */\n      this.backgroundDesign = 'solid';\n      /**\n       * The layout of the component\n       * Options include: 'OneColumnStartFullScreen' | 'OneColumnMidFullScreen' |\n       * 'OneColumnEndFullScreen' | 'TwoColumnsStartExpanded' | 'TwoColumnsMidExpanded' |\n       * 'TwoColumnsEndExpanded' | 'ThreeColumnsMidExpanded' | 'ThreeColumnsEndExpanded' |\n       * 'ThreeColumnsStartMinimized' | 'ThreeColumnsEndMinimized'\n       */\n      this.layout = ONE_COLUMN_START_FULL_SCREEN;\n      /**\n       * Mapping of the layout name and the column layout in %\n       */\n      this.layoutDefinitions = this._config.layouts;\n      /**\n       * The event emitted on layout value change.\n       */\n      this.layoutChange = new EventEmitter();\n      /**\n       * User defined break point for SM screens\n       * Default (Fiori 3) value is 960\n       */\n      this.smBreakPoint = 960;\n      /**\n       * User-defined break point for LG screens\n       * the default (Fiori 3) value is 1280\n       */\n      this.lgBreakPoint = 1280;\n      /**\n       * @hidden\n       * left column separator value (between start and middle columns)\n       * that specifies the direction of the arrow and\n       * if the separator is visible\n       * Options include: 'left', 'right' and null\n       */\n      this._leftColumnSeparator = null;\n      /**\n       * @hidden\n       * right column separator value (between middle and end columns)\n       * that specifies the direction of the arrow and\n       * if the separator is visible\n       * Options include: 'left', 'right' and null\n       */\n      this._rightColumnSeparator = null;\n      /**\n       * @hidden\n       * allows to keep track of the previos layout\n       * so we can go back to it on window resize\n       */\n      this._previousLayout = this.layout;\n      /** @hidden */\n      this._screenSize = LG_SCREEN_SIZE;\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /**\n       * @hidden\n       * the column layout representing the distribution of the width\n       * between the first (start), the middle and the last(end) column\n       */\n      this._columnLayout = this.layoutDefinitions[this.layout];\n      /**\n       * @hidden\n       * set to 'true' if the layout is changed to fullscreen on window resize\n       * this will allow the layout to switch to previous mode on SM->MD transition\n       * if a layout is set by the user to fullscreen, it should persist on window resize\n       */\n      this._responsiveFullscreenLayout = false;\n    }\n    /**\n     * @hidden\n     * function that handles the click events on the left separator\n     * and updates the layout\n     */\n    _handleLeftColumnSeparatorClick() {\n      switch (this.layout) {\n        case TWO_COLUMNS_START_EXPANDED:\n          this._updateCurrentLayout(TWO_COLUMNS_MID_EXPANDED);\n          break;\n        case TWO_COLUMNS_MID_EXPANDED:\n          this._updateCurrentLayout(TWO_COLUMNS_START_EXPANDED);\n          break;\n        case THREE_COLUMNS_MID_EXPANDED:\n          this._updateCurrentLayout(THREE_COLUMNS_END_MINIMIZED);\n          break;\n        case THREE_COLUMNS_END_MINIMIZED:\n          this._updateCurrentLayout(TWO_COLUMNS_START_EXPANDED);\n          break;\n        case THREE_COLUMNS_START_MINIMIZED:\n          this._updateCurrentLayout(THREE_COLUMNS_END_MINIMIZED);\n          break;\n      }\n    }\n    /**\n     * @hidden\n     * function that handles the click events on the right separator\n     * and updates the layout\n     */\n    _handleRightColumnSeparatorClick() {\n      switch (this.layout) {\n        case TWO_COLUMNS_END_EXPANDED:\n          this._updateCurrentLayout(THREE_COLUMNS_START_MINIMIZED);\n          break;\n        case THREE_COLUMNS_MID_EXPANDED:\n          this._updateCurrentLayout(THREE_COLUMNS_END_EXPANDED);\n          break;\n        case THREE_COLUMNS_END_EXPANDED:\n          this._updateCurrentLayout(THREE_COLUMNS_MID_EXPANDED);\n          break;\n        case THREE_COLUMNS_END_MINIMIZED:\n          this._updateCurrentLayout(THREE_COLUMNS_MID_EXPANDED);\n          break;\n        case THREE_COLUMNS_START_MINIMIZED:\n          this._updateCurrentLayout(TWO_COLUMNS_END_EXPANDED);\n          break;\n      }\n    }\n    /**\n     * @hidden\n     * function to determine the screen size in 'sm' | 'md' | 'lg' | 'xl'\n     * format depending on the window size in px\n     */\n    _getScreenSize(size) {\n      if (size > this.lgBreakPoint) {\n        return LG_SCREEN_SIZE;\n      } else if (size > this.smBreakPoint && size <= this.lgBreakPoint) {\n        return MD_SCREEN_SIZE;\n      } else {\n        return SM_SCREEN_SIZE;\n      }\n    }\n    /**\n     * @hidden\n     * handles the change of the layouts on reaching a break point\n     */\n    _responsiveLayoutChangeHandler() {\n      this._screenSize = this._getScreenSize(window.innerWidth);\n      switch (this.layout) {\n        case ONE_COLUMN_MID_FULL_SCREEN:\n        case ONE_COLUMN_END_FULL_SCREEN:\n          {\n            if (this._screenSize !== SM_SCREEN_SIZE && this.layout !== this._previousLayout && this._responsiveFullscreenLayout) {\n              this._responsiveFullscreenLayout = false;\n              this._updateCurrentLayout(this._previousLayout);\n            }\n            break;\n          }\n        case TWO_COLUMNS_START_EXPANDED:\n        case TWO_COLUMNS_MID_EXPANDED:\n          {\n            if (this._screenSize === SM_SCREEN_SIZE) {\n              this._responsiveFullscreenLayout = true;\n              this._updateCurrentLayout(ONE_COLUMN_MID_FULL_SCREEN);\n            }\n            break;\n          }\n        case TWO_COLUMNS_END_EXPANDED:\n          {\n            if (this._screenSize === SM_SCREEN_SIZE) {\n              this._responsiveFullscreenLayout = true;\n              this._updateCurrentLayout(ONE_COLUMN_END_FULL_SCREEN);\n            }\n            if (this._screenSize === LG_SCREEN_SIZE) {\n              this._updateCurrentLayout(THREE_COLUMNS_END_EXPANDED);\n            }\n            break;\n          }\n        case THREE_COLUMNS_START_MINIMIZED:\n          {\n            if (this._screenSize === SM_SCREEN_SIZE) {\n              this._responsiveFullscreenLayout = true;\n              this._updateCurrentLayout(ONE_COLUMN_END_FULL_SCREEN);\n            }\n            if (this._screenSize === LG_SCREEN_SIZE) {\n              this._updateCurrentLayout(THREE_COLUMNS_MID_EXPANDED);\n            }\n            break;\n          }\n        case THREE_COLUMNS_END_MINIMIZED:\n          {\n            if (this._screenSize === SM_SCREEN_SIZE) {\n              this._responsiveFullscreenLayout = true;\n              this._updateCurrentLayout(ONE_COLUMN_END_FULL_SCREEN);\n            }\n            if (this._screenSize === LG_SCREEN_SIZE) {\n              this._updateCurrentLayout(THREE_COLUMNS_END_MINIMIZED);\n            }\n            break;\n          }\n        case THREE_COLUMNS_MID_EXPANDED:\n          {\n            if (this._screenSize === SM_SCREEN_SIZE) {\n              this._responsiveFullscreenLayout = true;\n              this._updateCurrentLayout(ONE_COLUMN_END_FULL_SCREEN);\n            }\n            if (this._screenSize === MD_SCREEN_SIZE) {\n              this._updateCurrentLayout(THREE_COLUMNS_START_MINIMIZED);\n            }\n            break;\n          }\n        case THREE_COLUMNS_END_EXPANDED:\n          {\n            if (this._screenSize === SM_SCREEN_SIZE) {\n              this._responsiveFullscreenLayout = true;\n              this._updateCurrentLayout(ONE_COLUMN_END_FULL_SCREEN);\n            }\n            if (this._screenSize === MD_SCREEN_SIZE) {\n              this._updateCurrentLayout(TWO_COLUMNS_END_EXPANDED);\n            }\n            break;\n          }\n      }\n    }\n    /**\n     * @hidden\n     * Listen on window resize and update the layout\n     * call user defined custom function if provided\n     */\n    _listenOnWindowResize() {\n      if (this.customOnResizeFunction) {\n        this.customOnResizeFunction();\n      } else {\n        this._subscriptions.add(fromEvent(window, 'resize').pipe(debounceTime(100)).subscribe(() => this._responsiveLayoutChangeHandler()));\n      }\n    }\n    /**\n     * @hidden\n     * determines if the left separator should be visible\n     * and the value that will specify the direction of the arrow\n     */\n    _getLeftColumnSeparatorValue() {\n      switch (this.layout) {\n        case TWO_COLUMNS_START_EXPANDED:\n          return 'left';\n        case TWO_COLUMNS_MID_EXPANDED:\n        case THREE_COLUMNS_MID_EXPANDED:\n        case THREE_COLUMNS_END_MINIMIZED:\n        case THREE_COLUMNS_START_MINIMIZED:\n          return 'right';\n        default:\n          return null;\n      }\n    }\n    /**\n     * @hidden\n     * determines if the right separator should be visible\n     * and the value that will specify the direction of the arrow\n     */\n    _getRightColumnSeparatorValue() {\n      switch (this.layout) {\n        case TWO_COLUMNS_END_EXPANDED:\n        case THREE_COLUMNS_END_EXPANDED:\n          return 'right';\n        case THREE_COLUMNS_MID_EXPANDED:\n        case THREE_COLUMNS_END_MINIMIZED:\n        case THREE_COLUMNS_START_MINIMIZED:\n          return 'left';\n        default:\n          return null;\n      }\n    }\n    /**\n     * @hidden\n     * updates the column layout based on the layout name\n     * makes a call to determine the new value of the left separator\n     * makes a call to determine the new value of the right separator\n     */\n    _updateColumnLayoutParameters() {\n      this._columnLayout = this.layoutDefinitions[this.layout];\n      this._leftColumnSeparator = this._getLeftColumnSeparatorValue();\n      this._rightColumnSeparator = this._getRightColumnSeparatorValue();\n    }\n    /**\n     * @hidden\n     * updates the layout\n     * emits an event\n     * makes a call to the helper function that will update the column layout and the separators\n     */\n    _updateCurrentLayout(newLayout) {\n      this.layout = newLayout;\n      this._updateColumnLayoutParameters();\n      // setTimeout fixes \"ExpressionChangedAfterItHasBeenCheckedError\"\n      setTimeout(() => {\n        this.layoutChange.emit(this.layout);\n      });\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._updateColumnLayoutParameters();\n      this._previousLayout = this.layout;\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._screenSize = this._getScreenSize(window.innerWidth);\n      this._listenOnWindowResize();\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      this._updateColumnLayoutParameters();\n      if (changes && changes.layout.previousValue) {\n        this._previousLayout = changes.layout.previousValue;\n      }\n      if (changes && changes.layout) {\n        this._responsiveLayoutChangeHandler();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n  }\n  FlexibleColumnLayoutComponent.ɵfac = function FlexibleColumnLayoutComponent_Factory(t) {\n    return new (t || FlexibleColumnLayoutComponent)(i0.ɵɵdirectiveInject(FD_FLEXIBLE_LAYOUT_CONFIG));\n  };\n  FlexibleColumnLayoutComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FlexibleColumnLayoutComponent,\n    selectors: [[\"fd-flexible-column-layout\"]],\n    contentQueries: function FlexibleColumnLayoutComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c1, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startColumn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.midColumn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endColumn = _t.first);\n      }\n    },\n    inputs: {\n      backgroundDesign: \"backgroundDesign\",\n      layout: \"layout\",\n      layoutDefinitions: \"layoutDefinitions\",\n      smBreakPoint: \"smBreakPoint\",\n      lgBreakPoint: \"lgBreakPoint\",\n      customOnResizeFunction: \"customOnResizeFunction\",\n      separatorAriaLabel: \"separatorAriaLabel\",\n      expandTitle: \"expandTitle\",\n      collapseTitle: \"collapseTitle\"\n    },\n    outputs: {\n      layoutChange: \"layoutChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: FD_FLEXIBLE_COLUMN_LAYOUT_COMPONENT,\n      useExisting: FlexibleColumnLayoutComponent\n    }]), i0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 30,\n    consts: [[1, \"fd-flexible-column-layout\"], [1, \"fd-flexible-column-layout__column\"], [4, \"ngTemplateOutlet\"], [\"class\", \"fd-flexible-column-layout__separator\", 3, \"click\", 4, \"ngIf\"], [1, \"fd-flexible-column-layout__separator\", 3, \"click\"], [\"fd-button\", \"\", \"fdCompact\", \"\", \"fdType\", \"transparent\", 1, \"fd-flexible-column-layout__button\", 3, \"title\"], [\"role\", \"presentation\"]],\n    template: function FlexibleColumnLayoutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, FlexibleColumnLayoutComponent_ng_container_2_Template, 1, 0, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, FlexibleColumnLayoutComponent_div_3_Template, 3, 4, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵtemplate(5, FlexibleColumnLayoutComponent_ng_container_5_Template, 1, 0, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, FlexibleColumnLayoutComponent_div_6_Template, 3, 4, \"div\", 3);\n        i0.ɵɵelementStart(7, \"div\", 1);\n        i0.ɵɵtemplate(8, FlexibleColumnLayoutComponent_ng_container_8_Template, 1, 0, \"ng-container\", 2);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-flexible-column-layout--translucent\", ctx.backgroundDesign === \"translucent\")(\"fd-flexible-column-layout--transparent\", ctx.backgroundDesign === \"transparent\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"width\", ctx._columnLayout.start, \"%\")(\"visibility\", ctx._columnLayout.start === 0 ? \"hidden\" : \"visible\")(\"height\", ctx._columnLayout.start === 0 ? \"0\" : \"auto\");\n        i0.ɵɵattribute(\"aria-hidden\", ctx._columnLayout.start === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.startColumn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._leftColumnSeparator);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"width\", ctx._columnLayout.mid, \"%\")(\"visibility\", ctx._columnLayout.mid === 0 ? \"hidden\" : \"visible\")(\"height\", ctx._columnLayout.mid === 0 ? \"0\" : \"auto\");\n        i0.ɵɵattribute(\"aria-hidden\", ctx._columnLayout.mid === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.midColumn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._rightColumnSeparator);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"width\", ctx._columnLayout.end, \"%\")(\"visibility\", ctx._columnLayout.end === 0 ? \"hidden\" : \"visible\")(\"height\", ctx._columnLayout.end === 0 ? \"0\" : \"auto\");\n        i0.ɵɵattribute(\"aria-hidden\", ctx._columnLayout.end === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.endColumn);\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgTemplateOutlet, i2.ButtonComponent, i3.ContentDensityDirective],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-flexible-column-layout{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:row;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-flexible-column-layout:after,.fd-flexible-column-layout:before{box-sizing:inherit;font-size:inherit}.fd-flexible-column-layout__separator{-webkit-box-sizing:border-box;-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;background-color:var(--fdFlexibleColumnLayout_Background_Solid);border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;min-width:1rem;padding:0;position:relative;width:1rem}.fd-flexible-column-layout__separator:after,.fd-flexible-column-layout__separator:before{-webkit-box-sizing:inherit;-webkit-transition:all .1s ease-in;-webkit-transform:translateX(-50%);box-sizing:inherit;content:\\\"\\\";display:block;font-size:inherit;height:4rem;left:50%;position:absolute;transform:translate(-50%);transition:all .1s ease-in;width:.0625rem}.fd-flexible-column-layout__separator:before{background-image:linear-gradient(to top,var(--fdFlexibleColumnLayout_Toggle_Image_Color),transparent);bottom:calc(50% + 1rem)}.fd-flexible-column-layout__separator:after{background-image:linear-gradient(to bottom,var(--fdFlexibleColumnLayout_Toggle_Image_Color),transparent);top:calc(50% + 1rem)}.fd-flexible-column-layout__separator.is-hover:after,.fd-flexible-column-layout__separator.is-hover:before,.fd-flexible-column-layout__separator:hover:after,.fd-flexible-column-layout__separator:hover:before{height:7rem}.fd-flexible-column-layout .fd-flexible-column-layout__button{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-transform:translate(-50%,-50%);height:2rem;justify-content:center;left:50%;min-width:1.5rem;padding:0;position:absolute;top:50%;transform:translate(-50%,-50%);width:1.5rem;z-index:2}.fd-flexible-column-layout__column{-webkit-box-sizing:border-box;-webkit-transition:width .56s cubic-bezier(.1,0,.05,1),visibility .56s ease-in;border:0;border-left:var(--fdFlexibleColumnLayout_Border);border-right:var(--fdFlexibleColumnLayout_Border);box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;min-width:20rem;padding:0;transition:width .56s cubic-bezier(.1,0,.05,1),visibility .56s ease-in}.fd-flexible-column-layout__column:after,.fd-flexible-column-layout__column:before{box-sizing:inherit;font-size:inherit}.fd-flexible-column-layout__column.is-first-child,.fd-flexible-column-layout__column:first-child{border-left:none}.fd-flexible-column-layout__column.is-last-child,.fd-flexible-column-layout__column:last-child{border-right:none}.fd-flexible-column-layout__column--hidden{border:none;min-width:0}.fd-flexible-column-layout--translucent .fd-flexible-column-layout__separator{background-color:var(--fdFlexibleColumnLayout_Background_Translucent)}.fd-flexible-column-layout--transparent .fd-flexible-column-layout__separator{background-color:var(--fdFlexibleColumnLayout_Background_Transparent)}.fd-button.fd-flexible-column-layout__button{z-index:1}.fd-flexible-column-layout__column{transition:width .56s cubic-bezier(.1,0,.05,1),visibility .1s ease-in;overflow:hidden}.fd-flexible-column-layout__column{min-width:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FlexibleColumnLayoutComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Adds Flexible Column Layout functionality to your application.\n *\n * Can be imported in two ways:\n * * Plain `FlexibleColumnLayoutModule` with default configuration\n * * With `withConfig()` method which allows passing custom default configuration.\n */\nlet FlexibleColumnLayoutModule = /*#__PURE__*/(() => {\n  class FlexibleColumnLayoutModule {\n    /**\n     * Allows configuring module on a global level with custom configuration.\n     * @param config User's custom configuration.\n     */\n    static withConfig(config) {\n      config = merge(cloneDeep(DEFAULT_FLEXIBLE_LAYOUT_CONFIG), cloneDeep(config));\n      return {\n        ngModule: FlexibleColumnLayoutModule,\n        providers: [{\n          provide: FD_FLEXIBLE_LAYOUT_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }\n  FlexibleColumnLayoutModule.ɵfac = function FlexibleColumnLayoutModule_Factory(t) {\n    return new (t || FlexibleColumnLayoutModule)();\n  };\n  FlexibleColumnLayoutModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FlexibleColumnLayoutModule\n  });\n  FlexibleColumnLayoutModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: FD_FLEXIBLE_LAYOUT_CONFIG,\n      useValue: DEFAULT_FLEXIBLE_LAYOUT_CONFIG\n    }],\n    imports: [CommonModule, ButtonModule]\n  });\n  return FlexibleColumnLayoutModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_FLEXIBLE_LAYOUT_CONFIG, FD_FLEXIBLE_COLUMN_LAYOUT_COMPONENT, FD_FLEXIBLE_LAYOUT_CONFIG, FlexibleColumnLayoutComponent, FlexibleColumnLayoutModule, LG_SCREEN_SIZE, MD_SCREEN_SIZE, ONE_COLUMN_END_FULL_SCREEN, ONE_COLUMN_MID_FULL_SCREEN, ONE_COLUMN_START_FULL_SCREEN, SM_SCREEN_SIZE, THREE_COLUMNS_END_EXPANDED, THREE_COLUMNS_END_MINIMIZED, THREE_COLUMNS_MID_EXPANDED, THREE_COLUMNS_START_MINIMIZED, TWO_COLUMNS_END_EXPANDED, TWO_COLUMNS_MID_EXPANDED, TWO_COLUMNS_START_EXPANDED };\n//# sourceMappingURL=fundamental-ngx-core-flexible-column-layout.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}