{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Type, TemplateRef, ViewContainerRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, ViewChild, Input, Output, HostBinding, HostListener, Injectable, Inject, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i1 from '@fundamental-ngx/cdk/utils';\nimport { DynamicComponentService } from '@fundamental-ngx/cdk/utils';\nconst _c0 = [\"container\"];\nconst MESSAGE_TOAST_CONFIG = new InjectionToken('MessageToastConfig');\n\n/**\n * Configuration for opening a message toast with the MessageToastService.\n */\nclass MessageToastConfig {\n  constructor() {\n    /** Duration of time *in milliseconds* that the message toast will be visible. Set to -1 for indefinite. */\n    this.duration = 3000;\n    /** Whether the message toast should stay visible if the cursor is over it. */\n    this.mousePersist = false;\n    /** The container that the message toast is appended to. By default, it is appended to the body. */\n    this.container = 'body';\n  }\n}\n\n/**\n * Reference to a message toast component generated via the MessageToastService.\n * It can be injected into the content component in the same way a service would be injected.\n * For a template, add let-messageToast to your ng-template tag. Now using *messageToast* in the template refers to this class.\n */\nclass MessageToastRef {\n  constructor() {\n    /** @hidden */\n    this._afterTimeout = new Subject();\n    /** Observable that is triggered when the message toast has timed out. */\n    this.afterTimeout = this._afterTimeout.asObservable();\n  }\n  /**\n   * Hides the message toast.\n   */\n  timeout() {\n    this._afterTimeout.next();\n  }\n}\nlet messageToastUniqueId = 0;\n/**\n * The component that represents a message toast.\n */\nlet MessageToastComponent = /*#__PURE__*/(() => {\n  class MessageToastComponent {\n    /** @hidden */\n    constructor(_elRef, cdRef, componentFactoryResolver, ngZone, messageToastConfig, messageToastRef) {\n      this._elRef = _elRef;\n      this.cdRef = cdRef;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.ngZone = ngZone;\n      this.messageToastConfig = messageToastConfig;\n      this.messageToastRef = messageToastRef;\n      /** Id of the message toast. If omitted, a unique one is generated. */\n      this.id = 'fd-message-toast-' + messageToastUniqueId++;\n      /**\n       * Duration of time *in milliseconds* that the message toast will be visible.\n       * The standard value is 3000 ms.\n       * The duration can be set to more than 3000 ms,\n       * but it's not recommended to set it to less than 3000 ms.\n       * Set to -1 for indefinite.\n       */\n      this.duration = 3000;\n      /** Whether the message toast should stay open if the cursor is over it. */\n      this.mousePersist = false;\n      /** Event fired when the message toast is timeout. */\n      // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n      this.onHide = new EventEmitter();\n      /** @hidden */\n      this.mouseOverMessageToast = false;\n      /** @hidden */\n      this.childContent = undefined;\n      /** @hidden */\n      this.messageToastClass = true;\n      this._setMessageToastConfig(messageToastConfig);\n    }\n    /** @hidden */\n    ngOnInit() {\n      if (this.messageToastRef) {\n        this.open();\n      }\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      if (this.childContent) {\n        if (this.childContent instanceof Type) {\n          this._loadFromComponent(this.childContent);\n        } else if (this.childContent instanceof TemplateRef) {\n          this._loadFromTemplate(this.childContent);\n        } else {\n          this._loadFromString(this.childContent);\n        }\n        this.cdRef.detectChanges();\n      }\n    }\n    /**\n     * Closes the message toast\n     */\n    close() {\n      if (this.messageToastRef) {\n        this.messageToastRef.timeout();\n      } else {\n        this._elRef.nativeElement.classList.add('fd-has-display-none');\n        this._elRef.nativeElement.classList.remove('fd-has-display-block');\n      }\n      this.onHide.emit();\n    }\n    /**\n     * Opens the message toast.\n     */\n    open() {\n      if (!this.messageToastRef) {\n        if (this._elRef.nativeElement.style.display === 'block') {\n          return;\n        }\n        this._elRef.nativeElement.classList.remove('fd-has-display-none');\n        this._elRef.nativeElement.classList.add('fd-has-display-block');\n      }\n      if (this.duration >= 0) {\n        this.ngZone.runOutsideAngular(() => {\n          setTimeout(() => {\n            if (!this.mousePersist) {\n              this.ngZone.run(() => this.close());\n              return;\n            }\n            const wait = () => {\n              if (this.mouseOverMessageToast === true) {\n                setTimeout(wait, 500);\n              } else {\n                this.ngZone.run(() => this.close());\n              }\n            };\n            wait();\n          }, this.duration);\n        });\n      }\n    }\n    /** @hidden */\n    handleMessageToastMouseEnterEvent() {\n      this.mouseOverMessageToast = true;\n    }\n    /** @hidden */\n    handleMessageToastMouseLeaveEvent() {\n      this.mouseOverMessageToast = false;\n    }\n    /** @hidden */\n    _loadFromTemplate(template) {\n      const context = {\n        $implicit: this.messageToastRef\n      };\n      this.componentRef = this.containerRef.createEmbeddedView(template, context);\n    }\n    /** @hidden */\n    _loadFromComponent(componentType) {\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n      this.containerRef.clear();\n      this.componentRef = this.containerRef.createComponent(componentFactory);\n    }\n    /** @hidden */\n    _loadFromString(contentString) {\n      this.containerRef.clear();\n      this.message = contentString;\n    }\n    /** @hidden */\n    _setMessageToastConfig(messageToastConfig) {\n      Object.keys(messageToastConfig || {}).filter(key => key !== 'data' && key !== 'container').forEach(key => this[key] = messageToastConfig[key]);\n    }\n  }\n  MessageToastComponent.ɵfac = function MessageToastComponent_Factory(t) {\n    return new (t || MessageToastComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MessageToastConfig, 8), i0.ɵɵdirectiveInject(MessageToastRef, 8));\n  };\n  MessageToastComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MessageToastComponent,\n    selectors: [[\"fd-message-toast\"]],\n    viewQuery: function MessageToastComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n      }\n    },\n    hostVars: 11,\n    hostBindings: function MessageToastComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseenter\", function MessageToastComponent_mouseenter_HostBindingHandler() {\n          return ctx.handleMessageToastMouseEnterEvent();\n        })(\"mouseleave\", function MessageToastComponent_mouseleave_HostBindingHandler() {\n          return ctx.handleMessageToastMouseLeaveEvent();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-live\", \"polite\")(\"id\", ctx.id);\n        i0.ɵɵstyleProp(\"width\", ctx.width)(\"min-width\", ctx.minWidth)(\"max-width\", ctx.maxWidth);\n        i0.ɵɵclassProp(\"fd-message-toast\", ctx.messageToastClass);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      duration: \"duration\",\n      mousePersist: \"mousePersist\",\n      ariaLabel: \"ariaLabel\",\n      message: \"message\",\n      width: \"width\",\n      minWidth: \"minWidth\",\n      maxWidth: \"maxWidth\"\n    },\n    outputs: {\n      onHide: \"onHide\"\n    },\n    decls: 3,\n    vars: 1,\n    consts: [[\"container\", \"\"]],\n    template: function MessageToastComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, null, 0);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementContainerEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-message-toast{-webkit-box-sizing:border-box;-webkit-box-shadow:var(--sapContent_Shadow2);background-color:var(--sapList_Background);border:0;border-radius:var(--sapElement_BorderCornerRadius);box-shadow:var(--sapContent_Shadow2);box-sizing:border-box;color:var(--sapTextColor);color:var(--sapList_TextColor);display:inline-flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;max-width:15rem;padding:1rem;text-align:center;width:auto}.fd-message-toast:after,.fd-message-toast:before{box-sizing:inherit;font-size:inherit}.cdk-visually-hidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;white-space:nowrap;outline:0;-webkit-appearance:none;-moz-appearance:none;left:0}[dir=rtl] .cdk-visually-hidden{left:auto;right:0}.fd-message-toast,.fd-has-display-block{display:block}.fd-has-display-none{display:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MessageToastComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MessageToastContainerComponent = /*#__PURE__*/(() => {\n  class MessageToastContainerComponent {\n    constructor() {\n      /** @hidden */\n      this.fdMessageToastContainerClass = true;\n      /** Role attribute */\n      this.role = 'alert';\n    }\n  }\n  MessageToastContainerComponent.ɵfac = function MessageToastContainerComponent_Factory(t) {\n    return new (t || MessageToastContainerComponent)();\n  };\n  MessageToastContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MessageToastContainerComponent,\n    selectors: [[\"fd-message-toast-container\"]],\n    hostVars: 3,\n    hostBindings: function MessageToastContainerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", ctx.role);\n        i0.ɵɵclassProp(\"fd-message-toast-container\", ctx.fdMessageToastContainerClass);\n      }\n    },\n    inputs: {\n      role: \"role\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MessageToastContainerComponent_Template(rf, ctx) {},\n    styles: [\".fd-message-toast-container{position:fixed;display:flex;flex-direction:column;z-index:5000;align-items:center;bottom:0;left:50%;transform:translate(-50%)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MessageToastContainerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Service for generating message toasts dynamically.\n */\nlet MessageToastService = /*#__PURE__*/(() => {\n  class MessageToastService {\n    /** @hidden */\n    constructor(_dynamicComponentService, _liveAnnouncer, _defaultConfig) {\n      this._dynamicComponentService = _dynamicComponentService;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._defaultConfig = _defaultConfig;\n      /** @hidden */\n      this._messageToasts = [];\n    }\n    /**\n     * Returns true if there are some message toasts currently open. False otherwise.\n     */\n    hasOpenMessageToasts() {\n      return this._messageToasts && this._messageToasts.length > 0;\n    }\n    /**\n     * Opens a message toast component with a content of type TemplateRef, Component Type or String.\n     * @param content Content of the message toast component.\n     * @param  messageToastConfig Configuration of the message toast component.\n     */\n    open(content, messageToastConfig = {}) {\n      // Get default values from message toast model\n      const mergedConfig = {\n        ...this._defaultConfig,\n        ...messageToastConfig\n      };\n      // We need MessageToastConfig instance for correct DI in the component.\n      messageToastConfig = Object.assign(new MessageToastConfig(), mergedConfig);\n      // Instantiate message toast ref service\n      const service = new MessageToastRef();\n      service.data = messageToastConfig.data;\n      // If empty or undefined message toast array, create container\n      if (!this._messageToasts || this._messageToasts.length === 0 || !this._messageToastContainerRef) {\n        this._messageToastContainerRef = this._dynamicComponentService.createDynamicComponent(content, MessageToastContainerComponent, messageToastConfig);\n      }\n      // Define Container to put backdrop and component to container\n      messageToastConfig.container = this._messageToastContainerRef.location.nativeElement;\n      const component = this._dynamicComponentService.createDynamicComponent(content, MessageToastComponent, messageToastConfig, {\n        services: [service, messageToastConfig]\n      });\n      component.location.nativeElement.style.marginBottom = '10px';\n      // Subscription to close message toast from ref\n      const refSub = service.afterTimeout.subscribe(() => {\n        this._destroyMessageToastComponent(component);\n        refSub.unsubscribe();\n      });\n      this._messageToasts.push(component);\n      return service;\n    }\n    /**\n     * Hides all message toasts opened by the service.\n     */\n    hideAll() {\n      this._messageToasts.forEach(ref => {\n        this._destroyMessageToastComponent(ref);\n      });\n    }\n    /** @hidden */\n    _destroyMessageToastComponent(messageToast) {\n      this._messageToasts = this._messageToasts.filter(item => item && item !== messageToast);\n      this._dynamicComponentService.destroyComponent(messageToast);\n      if (this._messageToastContainerRef && (!this._messageToasts || this._messageToasts.length === 0)) {\n        this._destroyMessageToastContainer();\n      }\n    }\n    /** @hidden */\n    _destroyMessageToastContainer() {\n      if (this._messageToastContainerRef) {\n        this._dynamicComponentService.destroyComponent(this._messageToastContainerRef);\n        this._messageToastContainerRef = undefined;\n      }\n    }\n  }\n  MessageToastService.ɵfac = function MessageToastService_Factory(t) {\n    return new (t || MessageToastService)(i0.ɵɵinject(i1.DynamicComponentService), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(MESSAGE_TOAST_CONFIG));\n  };\n  MessageToastService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MessageToastService,\n    factory: MessageToastService.ɵfac\n  });\n  return MessageToastService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Adds Message Toast functionality to your application.\n *\n * Can be imported in two ways:\n * * Plain MessageToastModule with default configuration\n * * With `withConfig()` method which allows passing custom default configuration.\n */\nlet MessageToastModule = /*#__PURE__*/(() => {\n  class MessageToastModule {\n    /**\n     * Allows configuring module on a global level with custom configuration.\n     * @param config User's custom configuration.\n     */\n    static withConfig(config) {\n      return {\n        ngModule: MessageToastModule,\n        providers: [{\n          provide: MESSAGE_TOAST_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }\n  MessageToastModule.ɵfac = function MessageToastModule_Factory(t) {\n    return new (t || MessageToastModule)();\n  };\n  MessageToastModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MessageToastModule\n  });\n  MessageToastModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MessageToastService, DynamicComponentService,\n    // Provide default configuration which user can later override.\n    {\n      provide: MESSAGE_TOAST_CONFIG,\n      useValue: new MessageToastConfig()\n    }],\n    imports: [CommonModule]\n  });\n  return MessageToastModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_TOAST_CONFIG, MessageToastComponent, MessageToastConfig, MessageToastContainerComponent, MessageToastModule, MessageToastRef, MessageToastService };\n//# sourceMappingURL=fundamental-ngx-core-message-toast.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}