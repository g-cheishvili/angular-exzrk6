{"ast":null,"code":"import _asyncToGenerator from \"/home/webpct/angular-exzrk6/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, ViewChild, NgModule, Pipe, EventEmitter, Injector, forwardRef, Input, Output, ContentChildren, Directive } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@fundamental-ngx/core/popover';\nimport { PopoverComponent, PopoverModule } from '@fundamental-ngx/core/popover';\nimport * as i6 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { MenuKeyboardService, MenuModule } from '@fundamental-ngx/core/menu';\nimport * as i2$1 from '@fundamental-ngx/cdk/utils';\nimport { KeyUtil, PipeModule, AutoCompleteModule } from '@fundamental-ngx/cdk/utils';\nimport * as i7 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i8 from '@fundamental-ngx/core/input-group';\nimport { InputGroupComponent, InputGroupModule } from '@fundamental-ngx/core/input-group';\nimport * as i9 from '@fundamental-ngx/core/list';\nimport { FD_LIST_MESSAGE_DIRECTIVE, ListComponent, ListModule } from '@fundamental-ngx/core/list';\nimport * as i10 from '@fundamental-ngx/core/icon';\nimport { IconModule } from '@fundamental-ngx/core/icon';\nimport { ESCAPE, ENTER, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW, CONTROL, TAB, SHIFT, BACKSPACE, SPACE } from '@angular/cdk/keycodes';\nimport { asyncScheduler, Subscription } from 'rxjs';\nimport { registerFormItemControl } from '@fundamental-ngx/core/form';\nimport * as i2 from '@fundamental-ngx/core/bar';\nimport { BarModule } from '@fundamental-ngx/core/bar';\nimport { takeUntil, observeOn } from 'rxjs/operators';\nimport * as i1 from '@fundamental-ngx/core/dialog';\nimport { DialogModule } from '@fundamental-ngx/core/dialog';\nimport { MobileModeBase, MobileModeControl, MOBILE_MODE_CONFIG } from '@fundamental-ngx/core/mobile-mode';\nimport * as i3 from '@fundamental-ngx/core/title';\nimport * as i3$1 from '@fundamental-ngx/core/content-density';\nimport { contentDensityObserverProviders, DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\nimport * as i1$1 from '@angular/cdk/overlay';\nconst _c0 = [\"dialogTemplate\"];\nfunction ComboboxMobileComponent_ng_template_0_h1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.mobileConfig.title);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ComboboxMobileComponent_ng_template_0_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.handleDismiss());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"mobile\", true);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_ng_template_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"fd-bar-element\", 11);\n    i0.ɵɵtemplate(2, ComboboxMobileComponent_ng_template_0_ng_template_4_ng_container_2_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"fullWidth\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r6.childContent == null ? null : ctx_r6.childContent.controlTemplate) || null);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_fd_button_bar_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-button-bar\", 12);\n    i0.ɵɵlistener(\"click\", function ComboboxMobileComponent_ng_template_0_fd_button_bar_8_Template_fd_button_bar_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.handleApprove());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"label\", ctx_r8.mobileConfig.approveButtonText);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_fd_button_bar_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-button-bar\", 13);\n    i0.ɵɵlistener(\"click\", function ComboboxMobileComponent_ng_template_0_fd_button_bar_9_Template_fd_button_bar_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.handleDismiss());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"label\", ctx_r9.mobileConfig.cancelButtonText);\n  }\n}\nfunction ComboboxMobileComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fd-dialog\", 1)(1, \"fd-dialog-header\");\n    i0.ɵɵtemplate(2, ComboboxMobileComponent_ng_template_0_h1_2_Template, 2, 1, \"h1\", 2);\n    i0.ɵɵtemplate(3, ComboboxMobileComponent_ng_template_0_button_3_Template, 1, 1, \"button\", 3);\n    i0.ɵɵtemplate(4, ComboboxMobileComponent_ng_template_0_ng_template_4_Template, 3, 2, \"ng-template\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"fd-dialog-body\");\n    i0.ɵɵtemplate(6, ComboboxMobileComponent_ng_template_0_ng_container_6_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"fd-dialog-footer\");\n    i0.ɵɵtemplate(8, ComboboxMobileComponent_ng_template_0_fd_button_bar_8_Template, 1, 1, \"fd-button-bar\", 6);\n    i0.ɵɵtemplate(9, ComboboxMobileComponent_ng_template_0_fd_button_bar_9_Template, 1, 1, \"fd-button-bar\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const dialog_r2 = ctx.$implicit;\n    const dialogConfig_r3 = ctx.dialogConfig;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"dialogConfig\", dialogConfig_r3)(\"dialogRef\", dialog_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.hasCloseButton);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r1.childContent == null ? null : ctx_r1.childContent.listTemplate) || null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.approveButtonText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.cancelButtonText);\n  }\n}\nconst _c1 = [\"searchInputElement\"];\nconst _c2 = [\"controlTemplate\"];\nconst _c3 = [\"listTemplate\"];\nfunction ComboboxComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ComboboxComponent_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ComboboxComponent_ng_template_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ComboboxComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-popover\", 6);\n    i0.ɵɵlistener(\"isOpenChange\", function ComboboxComponent_ng_template_1_Template_fd_popover_isOpenChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.isOpenChangeHandle($event));\n    });\n    i0.ɵɵelementStart(1, \"fd-popover-control\");\n    i0.ɵɵtemplate(2, ComboboxComponent_ng_template_1_ng_container_2_Template, 1, 0, \"ng-container\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"fd-popover-body\", 7);\n    i0.ɵɵtemplate(4, ComboboxComponent_ng_template_1_ng_container_4_Template, 1, 0, \"ng-container\", 0);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    const _r7 = i0.ɵɵreference(8);\n    const _r9 = i0.ɵɵreference(10);\n    i0.ɵɵclassProp(\"fd-combobox-full-width\", ctx_r2.isSearch);\n    i0.ɵɵproperty(\"isOpen\", ctx_r2.open && ctx_r2.displayedValues && ctx_r2.displayedValues.length > 0)(\"fillControlMode\", ctx_r2.fillControlMode)(\"scrollStrategy\", ctx_r2._repositionScrollStrategy)(\"focusTrapped\", true)(\"triggers\", ctx_r2.triggers)(\"disabled\", ctx_r2.disabled || ctx_r2.readOnly)(\"maxWidth\", 640)(\"closeOnOutsideClick\", ctx_r2.closeOnOutsideClick);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !ctx_r2.displayedValues.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r9);\n  }\n}\nfunction ComboboxComponent_ng_template_3_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 10);\n    i0.ɵɵpipe(1, \"highlight\");\n    i0.ɵɵpipe(2, \"displayFnPipe\");\n  }\n  if (rf & 2) {\n    const term_r15 = i0.ɵɵnextContext().term;\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind3(1, 1, i0.ɵɵpipeBind2(2, 5, term_r15, ctx_r16.displayFn), ctx_r16.inputText, ctx_r16.highlighting && ctx_r16.filterHighlight), i0.ɵɵsanitizeHtml);\n  }\n}\nconst _c4 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction ComboboxComponent_ng_template_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const term_r15 = i0.ɵɵnextContext().term;\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r17.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, term_r15));\n  }\n}\nfunction ComboboxComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ComboboxComponent_ng_template_3_span_0_Template, 3, 8, \"span\", 8);\n    i0.ɵɵtemplate(1, ComboboxComponent_ng_template_3_ng_container_1_Template, 2, 4, \"ng-container\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.itemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.itemTemplate);\n  }\n}\nfunction ComboboxComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 12);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r7 = i0.ɵɵreference(8);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r7);\n  }\n}\nfunction ComboboxComponent_ng_template_7_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 18)(1, \"button\", 19);\n    i0.ɵɵlistener(\"focus\", function ComboboxComponent_ng_template_7_span_3_Template_button_focus_1_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.clearInputBtnFocus());\n    })(\"blur\", function ComboboxComponent_ng_template_7_span_3_Template_button_blur_1_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r24.clearInputBtnBlur());\n    })(\"click\", function ComboboxComponent_ng_template_7_span_3_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r25._handleClearSearchTerm());\n    });\n    i0.ɵɵelement(2, \"fd-icon\", 20);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"fd-shellbar__input-group-addon\", ctx_r21.inShellbar);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"fd-shellbar__button\", ctx_r21.inShellbar);\n    i0.ɵɵproperty(\"fdType\", ctx_r21.inShellbar ? \"standard\" : \"transparent\");\n    i0.ɵɵattribute(\"tabindex\", ctx_r21.clearButtonFocusable ? 0 : -1);\n  }\n}\nfunction ComboboxComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-input-group\", 13);\n    i0.ɵɵlistener(\"addOnButtonClicked\", function ComboboxComponent_ng_template_7_Template_fd_input_group_addOnButtonClicked_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.onPrimaryButtonClick());\n    })(\"click\", function ComboboxComponent_ng_template_7_Template_fd_input_group_click_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.mobile && ctx_r28.isOpenChangeHandle(true));\n    });\n    i0.ɵɵelementStart(1, \"input\", 14, 15);\n    i0.ɵɵlistener(\"ngModelChange\", function ComboboxComponent_ng_template_7_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.inputText = $event);\n    })(\"onComplete\", function ComboboxComponent_ng_template_7_Template_input_onComplete_1_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.handleAutoComplete($event));\n    })(\"keydown\", function ComboboxComponent_ng_template_7_Template_input_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.onInputKeydownHandler($event));\n    })(\"ngModelChange\", function ComboboxComponent_ng_template_7_Template_input_ngModelChange_1_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r32.handleSearchTermChange());\n    })(\"blur\", function ComboboxComponent_ng_template_7_Template_input_blur_1_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r33.handleBlur());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ComboboxComponent_ng_template_7_span_3_Template, 3, 6, \"span\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 17);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"button\", ctx_r8.showDropdownButton)(\"glyph\", ctx_r8.showDropdownButton ? ctx_r8.glyphValue : null)(\"state\", ctx_r8.state)(\"buttonFocusable\", ctx_r8.buttonFocusable)(\"disabled\", ctx_r8.disabled)(\"readonly\", ctx_r8.readOnly)(\"isControl\", true)(\"isExpanded\", !ctx_r8.mobile && ctx_r8.open && ctx_r8.displayedValues.length > 0)(\"showFocus\", !ctx_r8.clearInputBtnFocused)(\"glyphAriaLabel\", ctx_r8.ariaLabel)(\"iconTitle\", ctx_r8.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"enable\", ctx_r8.autoComplete && !ctx_r8.mobile)(\"displayFn\", ctx_r8.displayFn)(\"options\", ctx_r8.dropdownValues)(\"inputText\", ctx_r8.inputText)(\"disabled\", ctx_r8.disabled)(\"readonly\", ctx_r8.readOnly)(\"placeholder\", ctx_r8.placeholder)(\"id\", ctx_r8.inputId)(\"ngModel\", ctx_r8.inputText);\n    i0.ɵɵattribute(\"aria-label\", ctx_r8.ariaLabel)(\"aria-labelledby\", ctx_r8.ariaLabelledBy)(\"aria-describedby\", ctx_r8.comboboxId + \"-list-results\")(\"aria-autocomplete\", ctx_r8.autoComplete && !ctx_r8.mobile ? \"list\" : null)(\"aria-owns\", ctx_r8.autoComplete && !ctx_r8.mobile ? ctx_r8.comboboxId + \"-result\" : null)(\"aria-haspopup\", ctx_r8.autoComplete && !ctx_r8.mobile)(\"aria-expanded\", !ctx_r8.mobile && ctx_r8.open && ctx_r8.displayedValues.length)(\"aria-required\", ctx_r8.required)(\"tabindex\", ctx_r8.readOnly || ctx_r8.disabled ? -1 : null)(\"aria-readonly\", ctx_r8.readOnly);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.isSearch && ctx_r8.showClearButton && ctx_r8.inputText && ctx_r8.inputText.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r8.comboboxId + \"-list-results\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.displayedValues.length || 0, \" result list items \");\n  }\n}\nconst _c5 = function (a0) {\n  return {\n    term: a0\n  };\n};\nfunction ComboboxComponent_ng_template_9_ng_container_2_ng_container_1_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 26);\n    i0.ɵɵlistener(\"keyDown\", function ComboboxComponent_ng_template_9_ng_container_2_ng_container_1_li_4_Template_li_keyDown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r41);\n      const term_r39 = restoredCtx.$implicit;\n      const ctx_r40 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r40.onItemKeyDownHandler($event, term_r39));\n    })(\"click\", function ComboboxComponent_ng_template_9_ng_container_2_ng_container_1_li_4_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r41);\n      const term_r39 = restoredCtx.$implicit;\n      const ctx_r42 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r42.onMenuClickHandler(term_r39));\n    });\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const term_r39 = ctx.$implicit;\n    const group_r37 = i0.ɵɵnextContext().$implicit;\n    const ctx_r38 = i0.ɵɵnextContext(3);\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"tabindex\", 0)(\"selected\", ctx_r38.isSelected(term_r39));\n    i0.ɵɵattribute(\"aria-placeholder\", group_r37.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c5, term_r39));\n  }\n}\nfunction ComboboxComponent_ng_template_9_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 23)(2, \"span\", 24);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, ComboboxComponent_ng_template_9_ng_container_2_ng_container_1_li_4_Template, 2, 7, \"li\", 25);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const group_r37 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tabindex\", 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(group_r37.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", group_r37.value);\n  }\n}\nfunction ComboboxComponent_ng_template_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ComboboxComponent_ng_template_9_ng_container_2_ng_container_1_Template, 5, 3, \"ng-container\", 22);\n    i0.ɵɵpipe(2, \"listGroupPipe\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(2, 1, ctx_r34.displayedValues, ctx_r34.groupFn));\n  }\n}\nfunction ComboboxComponent_ng_template_9_ng_container_3_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r47 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 28);\n    i0.ɵɵlistener(\"keyDown\", function ComboboxComponent_ng_template_9_ng_container_3_li_1_Template_li_keyDown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r47);\n      const term_r45 = restoredCtx.$implicit;\n      const ctx_r46 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r46.onItemKeyDownHandler($event, term_r45));\n    })(\"click\", function ComboboxComponent_ng_template_9_ng_container_3_li_1_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r47);\n      const term_r45 = restoredCtx.$implicit;\n      const ctx_r48 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r48.onMenuClickHandler(term_r45));\n    });\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const term_r45 = ctx.$implicit;\n    const ctx_r44 = i0.ɵɵnextContext(3);\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"tabindex\", 0)(\"selected\", ctx_r44.isSelected(term_r45));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c5, term_r45));\n  }\n}\nfunction ComboboxComponent_ng_template_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ComboboxComponent_ng_template_9_ng_container_3_li_1_Template, 2, 6, \"li\", 27);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r35 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r35.displayedValues);\n  }\n}\nfunction ComboboxComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r50 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 21);\n    i0.ɵɵlistener(\"focusEscapeList\", function ComboboxComponent_ng_template_9_Template_ul_focusEscapeList_0_listener($event) {\n      i0.ɵɵrestoreView(_r50);\n      const ctx_r49 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r49.handleListFocusEscape($event));\n    });\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵtemplate(2, ComboboxComponent_ng_template_9_ng_container_2_Template, 3, 4, \"ng-container\", 9);\n    i0.ɵɵtemplate(3, ComboboxComponent_ng_template_9_ng_container_3_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"max-height\", !ctx_r10.mobile && ctx_r10.maxHeight);\n    i0.ɵɵproperty(\"dropdownMode\", true)(\"id\", ctx_r10.comboboxId + \"-result\")(\"hasMessage\", ctx_r10.listMessages && ctx_r10.listMessages.length > 0)(\"byline\", ctx_r10.byline);\n    i0.ɵɵattribute(\"aria-labelledby\", ctx_r10.comboboxId + \"-search\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.groupFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r10.groupFn);\n  }\n}\nconst _c6 = [\"*\", \"*\"];\nconst COMBOBOX_COMPONENT = new InjectionToken('ComboboxInterface');\nlet ComboboxMobileComponent = /*#__PURE__*/(() => {\n  class ComboboxMobileComponent extends MobileModeBase {\n    /** @hidden */\n    constructor(elementRef, dialogService, comboboxComponent, mobileModes) {\n      super(elementRef, dialogService, comboboxComponent, MobileModeControl.COMBOBOX, mobileModes);\n      /** @hidden\n       * For internal usage\n       * Control element, which will be rendered inside dialog.\n       * List element, which will be rendered inside dialog.\n       */\n      this.childContent = null;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._listenOnMultiInputOpenChange();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      super.onDestroy();\n    }\n    /** @hidden */\n    handleDismiss() {\n      this.dialogRef.dismiss();\n      this._component.dialogDismiss(this._selectedBackup);\n    }\n    /** @hidden */\n    handleApprove() {\n      this.dialogRef.close();\n      this._component.dialogApprove();\n    }\n    /** @hidden */\n    _toggleDialog(open) {\n      if (open) {\n        this._selectedBackup = this._component.getValue();\n        if (!this._dialogService.hasOpenDialogs()) {\n          this._open();\n        }\n      }\n    }\n    /** @hidden */\n    _listenOnMultiInputOpenChange() {\n      this._component.openChange.pipe(takeUntil(this._onDestroy$)).subscribe(isOpen => this._toggleDialog(isOpen));\n    }\n    /** @hidden */\n    _open() {\n      this.dialogRef = this._dialogService.open(this.dialogTemplate, {\n        mobile: true,\n        ...this.dialogConfig,\n        backdropClickCloseable: false,\n        container: this._elementRef.nativeElement,\n        disablePaddings: true\n      });\n      this._focusInputElementOnceOpened();\n      const refSub = this.dialogRef.afterClosed.subscribe({\n        error: type => {\n          if (type === 'escape') {\n            this._component.dialogDismiss(this._selectedBackup);\n            refSub.unsubscribe();\n          }\n        }\n      });\n    }\n    /** @hidden */\n    _focusInputElementOnceOpened() {\n      this.dialogRef.afterLoaded.pipe(observeOn(asyncScheduler),\n      // making the listener async\n      takeUntil(this._onDestroy$)).subscribe(() => {\n        try {\n          const input = this._elementRef.nativeElement.querySelector('fd-input-group input[role=\"combobox\"]');\n          input.focus();\n        } catch (error) {\n          if (isDevMode()) {\n            console.error('Failed to focus combobox search input', error);\n          }\n        }\n      });\n    }\n  }\n  ComboboxMobileComponent.ɵfac = function ComboboxMobileComponent_Factory(t) {\n    return new (t || ComboboxMobileComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DialogService), i0.ɵɵdirectiveInject(COMBOBOX_COMPONENT), i0.ɵɵdirectiveInject(MOBILE_MODE_CONFIG, 8));\n  };\n  ComboboxMobileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ComboboxMobileComponent,\n    selectors: [[\"fd-combobox-mobile\"]],\n    viewQuery: function ComboboxMobileComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialogTemplate = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"dialogTemplate\", \"\"], [3, \"dialogConfig\", \"dialogRef\"], [\"fd-title\", \"\", 4, \"ngIf\"], [\"title\", \"Close\", \"fd-dialog-close-button\", \"\", 3, \"mobile\", \"click\", 4, \"ngIf\"], [\"fdkTemplate\", \"subheader\"], [4, \"ngTemplateOutlet\"], [\"fdType\", \"emphasized\", 3, \"label\", \"click\", 4, \"ngIf\"], [\"fd-initial-focus\", \"\", 3, \"label\", \"click\", 4, \"ngIf\"], [\"fd-title\", \"\"], [\"title\", \"Close\", \"fd-dialog-close-button\", \"\", 3, \"mobile\", \"click\"], [\"fd-bar-middle\", \"\"], [3, \"fullWidth\"], [\"fdType\", \"emphasized\", 3, \"label\", \"click\"], [\"fd-initial-focus\", \"\", 3, \"label\", \"click\"]],\n    template: function ComboboxMobileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ComboboxMobileComponent_ng_template_0_Template, 10, 7, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    dependencies: [i2.BarMiddleDirective, i2.BarElementDirective, i2.ButtonBarComponent, i1.DialogComponent, i1.DialogBodyComponent, i1.DialogFooterComponent, i1.DialogHeaderComponent, i1.DialogCloseButtonComponent, i3.TitleComponent, i2$1.TemplateDirective, i2$1.InitialFocusDirective, i2$1.DeprecatedInitialFocusDirective, i4.NgIf, i4.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ComboboxMobileComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ComboboxMobileModule = /*#__PURE__*/(() => {\n  class ComboboxMobileModule {}\n  ComboboxMobileModule.ɵfac = function ComboboxMobileModule_Factory(t) {\n    return new (t || ComboboxMobileModule)();\n  };\n  ComboboxMobileModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ComboboxMobileModule\n  });\n  ComboboxMobileModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [BarModule, DialogModule, ButtonModule, CommonModule]\n  });\n  return ComboboxMobileModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst FD_COMBOBOX_COMPONENT = new InjectionToken('FdComboboxComponent');\nlet ListGroupPipe = /*#__PURE__*/(() => {\n  class ListGroupPipe {\n    /** Group items */\n    transform(items, group) {\n      return Object.entries(group(items)).map(([key, value]) => ({\n        key,\n        value\n      }));\n    }\n  }\n  ListGroupPipe.ɵfac = function ListGroupPipe_Factory(t) {\n    return new (t || ListGroupPipe)();\n  };\n  ListGroupPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"listGroupPipe\",\n    type: ListGroupPipe,\n    pure: true\n  });\n  return ListGroupPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet comboboxUniqueId = 0;\n/**\n * Allows users to filter through results and select a value.\n *\n * Supports Angular Forms.\n * ```html\n * <fd-combobox\n *      [(ngModel)]=\"searchTerm\"\n *      [dropdownValues]=\"dropdownValues\"\n *      placeholder=\"Type some text...\">\n * </fd-combobox>\n * ```\n */\nlet ComboboxComponent = /*#__PURE__*/(() => {\n  class ComboboxComponent {\n    /** @hidden */\n    constructor(_overlay, _cdRef, _injector, _viewContainerRef, _dynamicComponentService, _contentDensityObserver) {\n      this._overlay = _overlay;\n      this._cdRef = _cdRef;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._dynamicComponentService = _dynamicComponentService;\n      this._contentDensityObserver = _contentDensityObserver;\n      /** Id for the Combobox. */\n      this.comboboxId = `fd-combobox-${comboboxUniqueId++}`;\n      /** Id attribute for input element inside Combobox component */\n      this.inputId = '';\n      /** If it is mandatory field */\n      this.required = false;\n      /** Values to be filtered in the search input. */\n      this.dropdownValues = [];\n      /** Filter function. Accepts an array of objects and a search term as arguments\n       * and returns a string. See search input examples for details. */\n      this.filterFn = this._defaultFilter;\n      /**\n       * Whether the Combobox is a Search Field\n       */\n      this.isSearch = false;\n      /** Icon to display in the right-side button. */\n      this.glyph = 'navigation-down-arrow';\n      /**\n       * Whether to show the clear search term button when the Combobox is a Search Field\n       */\n      this.showClearButton = true;\n      /**\n       *  The trigger events that will open/close the options popover.\n       *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).\n       */\n      this.triggers = [];\n      /** Whether the combobox should close, when a click is performed outside its boundaries. True by default */\n      this.closeOnOutsideClick = true;\n      /**\n       * Whether the combobox should open, when any key is pressed in input (except Escape, Space, Enter). True by default\n       */\n      this.openOnKeyboardEvent = true;\n      /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n      this.maxHeight = '50vh';\n      /** Whether the matching string should be highlighted during filtration. */\n      this.highlighting = true;\n      /** Whether the matching string should be highlighted after combobox value is selected. */\n      this.filterHighlight = true;\n      /** Whether the popover should close when a user selects a result. */\n      this.closeOnSelect = true;\n      /** Whether the input field should be populated with the result picked by the user. */\n      this.fillOnSelect = true;\n      /** Whether the autocomplete should be enabled; Enabled by default */\n      this.autoComplete = true;\n      /**\n       * Preset options for the Select body width, whatever is chosen, the body has a 600px limit.\n       * * `at-least` will apply a minimum width to the body equivalent to the width of the control. - Default\n       * * `equal` will apply a width to the body equivalent to the width of the control.\n       * * 'fit-content' will apply width needed to properly display items inside, independent of control.\n       */\n      this.fillControlMode = 'at-least';\n      /** Defines if combobox should behave same as dropdown. When it's enabled writing inside text input won't\n       * trigger onChange function, until it matches one of displayed dropdown values. Also communicating with combobox\n       * can be achieved only by objects with same type as dropdownValue */\n      this.communicateByObject = false;\n      /** Display function. Accepts an object of the same type as the\n       * items passed to dropdownValues as argument, and outputs a string.\n       * An arrow function can be used to access the *this* keyword in the calling component.\n       * See search input examples for details. */\n      this.displayFn = this._defaultDisplay;\n      /**\n       * Whether AddOn Button should be focusable\n       * @default false\n       */\n      this.buttonFocusable = false;\n      /**\n       * Whether clear button should be focusable.\n       * @default true\n       */\n      this.clearButtonFocusable = true;\n      /** Whether the combobox is readonly. */\n      this.readOnly = false;\n      /** Whether the combobox should be built on mobile mode */\n      this.mobile = false;\n      /** Whether to display the addon button. */\n      this.showDropdownButton = true;\n      /**\n       * Whether to return results where the input matches the entire string. By default, only results that start\n       * with the input search term will be returned.\n       */\n      this.includes = false;\n      /** Whether list item options should be rendered as byline. */\n      this.byline = false;\n      /** Event emitted when an item is clicked. Use *$event* to retrieve it. */\n      this.itemClicked = new EventEmitter();\n      /** Event emitted, when the combobox's popover body is opened or closed */\n      this.openChange = new EventEmitter();\n      /** Event emitted when the input text changes. */\n      this.inputTextChange = new EventEmitter();\n      /** Keys, that won't trigger the popover's open state, when dispatched on search input */\n      this.nonOpeningKeys = [ESCAPE, ENTER, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW, CONTROL, TAB, SHIFT];\n      /** Keys, that will close popover's body, when dispatched on search input */\n      this.closingKeys = [ESCAPE];\n      /** Whether the combobox is opened. */\n      this.open = false;\n      /**\n       * Whether or not the input coup is in the shellbar. Only for internal use by combobox component\n       * @hidden\n       */\n      this.inShellbar = false;\n      /** @hidden */\n      this.displayedValues = [];\n      /** @hidden */\n      this.inputTextValue = '';\n      /** @hidden */\n      this.clearInputBtnFocused = false;\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n      this._repositionScrollStrategy = this._overlay.scrollStrategies.reposition({\n        autoClose: true\n      });\n    }\n    /** @hidden */\n    ngOnInit() {\n      if (this.readOnly) {\n        this.showDropdownButton = false;\n      }\n      this._refreshDisplayedValues();\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n        this._refreshDisplayedValues();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._addShellbarClass();\n      if (this.mobile) {\n        this._setUpMobileMode();\n      }\n    }\n    /** @hidden */\n    onInputKeydownHandler(event) {\n      if (this.readOnly) {\n        return;\n      }\n      if (KeyUtil.isKeyCode(event, ENTER)) {\n        if (this.searchFn) {\n          this.searchFn();\n        }\n      } else if (KeyUtil.isKeyCode(event, DOWN_ARROW)) {\n        if (event.altKey) {\n          this._resetDisplayedValues();\n          this.isOpenChangeHandle(true);\n        }\n        if (this.open && this.listComponent) {\n          this.listComponent.setItemActive(0);\n        } else if (!this.open) {\n          this._chooseOtherItem(1);\n        }\n        event.preventDefault();\n      } else if (KeyUtil.isKeyCode(event, UP_ARROW)) {\n        this._chooseOtherItem(-1);\n        event.preventDefault();\n      } else if (KeyUtil.isKeyCode(event, this.closingKeys)) {\n        this.isOpenChangeHandle(false);\n        event.stopPropagation();\n      } else if (this.openOnKeyboardEvent && !event.ctrlKey && !event.altKey && !KeyUtil.isKeyCode(event, this.nonOpeningKeys)) {\n        this.isOpenChangeHandle(true);\n        if (this.isEmptyValue && KeyUtil.isKeyType(event, 'control') && !KeyUtil.isKeyCode(event, BACKSPACE)) {\n          this.listComponent.setItemActive(0);\n        }\n      }\n    }\n    /** @hidden */\n    onItemKeyDownHandler(event, value) {\n      if (KeyUtil.isKeyCode(event, ENTER) || KeyUtil.isKeyCode(event, SPACE)) {\n        event.preventDefault();\n        this.onMenuClickHandler(value);\n      }\n    }\n    /** @hidden */\n    onMenuClickHandler(value) {\n      if (value || value === 0) {\n        const index = this.dropdownValues.findIndex(_value => _value === value);\n        this._handleClickActions(value);\n        this.filterHighlight = false;\n        this.itemClicked.emit({\n          item: value,\n          index\n        });\n      }\n    }\n    /** Handle dialog dismissing, closes popover and sets backup data. */\n    dialogDismiss(term) {\n      this.inputText = this.displayFn(term);\n      this.setValue(term);\n      this.isOpenChangeHandle(false);\n    }\n    /** Handle dialog approval, closes popover and propagates data changes. */\n    dialogApprove() {\n      this._propagateChange();\n      this.isOpenChangeHandle(false);\n    }\n    /** If true value empty */\n    get isEmptyValue() {\n      return !this.inputText || this.inputText?.trim().length === 0;\n    }\n    /** Input text of the input. */\n    set inputText(value) {\n      this.inputTextValue = value;\n      this.inputTextChange.emit(value);\n      if (!this.mobile) {\n        this._propagateChange();\n      }\n    }\n    get inputText() {\n      return this.inputTextValue;\n    }\n    /** Get the glyph value based on whether the combobox is used as a search field or not. */\n    get glyphValue() {\n      return this.isSearch ? 'search' : this.glyph;\n    }\n    /** @hidden */\n    _handleClearSearchTerm() {\n      this.inputTextValue = '';\n      this.inputTextChange.emit('');\n      this.displayedValues = this.dropdownValues || [];\n      this.searchInputElement.nativeElement.focus();\n      if (!this.mobile) {\n        this._propagateChange();\n      }\n      this._cdRef.detectChanges();\n    }\n    /** @hidden */\n    writeValue(value) {\n      this.inputTextValue = this.displayFn(value);\n      this.setValue(value);\n      this._cdRef.markForCheck();\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** Method passed to list component */\n    handleListFocusEscape(direction) {\n      if (direction === 'up') {\n        this.searchInputElement.nativeElement.focus();\n      }\n    }\n    /** @hidden */\n    handleSearchTermChange() {\n      this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n      if (this.popoverComponent) {\n        this.popoverComponent.refreshPosition();\n      }\n    }\n    /** @hidden */\n    onPrimaryButtonClick() {\n      // Prevent primary button click behaviour on mobiles\n      if (this.mobile) {\n        return;\n      }\n      if (this.searchFn) {\n        this.searchFn();\n      }\n      this._resetDisplayedValues();\n      this.isOpenChangeHandle(!this.open);\n      this.searchInputElement.nativeElement.focus();\n      this.filterHighlight = false;\n      if (this.open) {\n        this.searchInputElement?.nativeElement.focus();\n      }\n    }\n    /** @hidden */\n    isOpenChangeHandle(isOpen) {\n      /** Reset displayed values on every mobile open */\n      if (this.mobile && !this.open) {\n        this._resetDisplayedValues();\n      }\n      if (this.open !== isOpen) {\n        this.open = isOpen;\n        this.openChange.emit(isOpen);\n      }\n      if (!this.open && !this.mobile) {\n        this.handleBlur();\n        this.searchInputElement.nativeElement.focus({\n          preventScroll: true\n        });\n      }\n      this._cdRef.detectChanges();\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._cdRef.detectChanges();\n    }\n    /** Method that handles complete event from auto complete directive, setting the new value, and closing popover */\n    handleAutoComplete(event) {\n      if (this.inputText !== event.term) {\n        this.inputText = event.term;\n        this.handleSearchTermChange();\n      }\n      if (event.forceClose && this.inputText) {\n        this.isOpenChangeHandle(false);\n      }\n    }\n    /** @hidden */\n    handleBlur() {\n      if (!this.open) {\n        this.onTouched();\n        this.handleAutoComplete({\n          term: this.searchInputElement.nativeElement.value,\n          forceClose: false\n        });\n      }\n    }\n    /** @hidden */\n    clearInputBtnFocus() {\n      this.clearInputBtnFocused = true;\n    }\n    /** @hidden */\n    clearInputBtnBlur() {\n      this.clearInputBtnFocused = false;\n    }\n    /** Current select value */\n    getValue() {\n      return this._value;\n    }\n    /** Method that picks other value moved from current one by offset, called only when combobox is closed */\n    _chooseOtherItem(offset) {\n      const activeValue = this._getOptionObjectByDisplayedValue(this.inputTextValue);\n      const index = this.dropdownValues.findIndex(value => value === activeValue);\n      if (this.dropdownValues[index + offset]) {\n        this.onMenuClickHandler(this.dropdownValues[index + offset]);\n      }\n    }\n    /** Method that reset filtering for displayed values. It overrides displayed values by all possible dropdown values */\n    _resetDisplayedValues() {\n      this.displayedValues = this.dropdownValues || [];\n    }\n    /** @hidden */\n    _addShellbarClass() {\n      if (this.inShellbar) {\n        this.searchInputElement.nativeElement.classList.add('fd-shellbar__input-group-input');\n        if (this.inputGroup) {\n          this.inputGroup.setInShellbar(true);\n        }\n      }\n    }\n    /** @hidden */\n    _defaultDisplay(str) {\n      return str;\n    }\n    /** @hidden */\n    _defaultFilter(contentArray, searchTerm) {\n      this.filterHighlight = true;\n      if (typeof searchTerm === 'string') {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n          if (item) {\n            const term = this.displayFn(item).toLocaleLowerCase();\n            return this.includes ? term.includes(searchLower) : term.startsWith(searchLower);\n          }\n        });\n      } else if (typeof searchTerm === 'object') {\n        return contentArray.filter(item => item === searchTerm);\n      }\n      return contentArray || [];\n    }\n    /** @hidden */\n    _handleClickActions(term) {\n      if (this.closeOnSelect) {\n        this.isOpenChangeHandle(false);\n      }\n      if (this.fillOnSelect) {\n        this.setValue(term);\n        this.inputText = this.displayFn(term);\n        this.searchInputElement.nativeElement.value = this.inputText;\n        this._cdRef.detectChanges();\n        if (this.mobile) {\n          this._propagateChange();\n        }\n      }\n      this.handleSearchTermChange();\n    }\n    /** @hidden */\n    _getOptionObjectByDisplayedValue(displayValue) {\n      return this.dropdownValues.find(value => this.displayFn(value) === displayValue);\n    }\n    /** @hidden */\n    _refreshDisplayedValues() {\n      if (this.inputText) {\n        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n      } else {\n        this.displayedValues = this.dropdownValues || [];\n      }\n    }\n    /** @hidden */\n    _propagateChange() {\n      if (this.communicateByObject) {\n        const value = this._getOptionObjectByDisplayedValue(this.inputText);\n        if (this.displayFn(value) !== this.displayFn(this.getValue())) {\n          this.setValue(value);\n        }\n        this.onChange(this.getValue());\n      } else {\n        this.onChange(this.inputText);\n      }\n    }\n    /** @hidden */\n    setValue(value) {\n      if (this.communicateByObject) {\n        this._value = value;\n      } else {\n        this._value = this.displayFn(value);\n      }\n    }\n    /** @hidden */\n    _setUpMobileMode() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const injector = Injector.create({\n          providers: [{\n            provide: COMBOBOX_COMPONENT,\n            useValue: _this\n          }],\n          parent: _this._injector\n        });\n        yield _this._dynamicComponentService.createDynamicModule({\n          listTemplate: _this.listTemplate,\n          controlTemplate: _this.controlTemplate\n        }, ComboboxMobileModule, ComboboxMobileComponent, _this._viewContainerRef, injector);\n      })();\n    }\n    /** @hidden */\n    isSelected(term) {\n      const termValue = this.communicateByObject ? term : this.displayFn(term);\n      return this.getValue() === termValue;\n    }\n  }\n  ComboboxComponent.ɵfac = function ComboboxComponent_Factory(t) {\n    return new (t || ComboboxComponent)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2$1.DynamicComponentService), i0.ɵɵdirectiveInject(i3$1.ContentDensityObserver));\n  };\n  ComboboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ComboboxComponent,\n    selectors: [[\"fd-combobox\"]],\n    contentQueries: function ComboboxComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, FD_LIST_MESSAGE_DIRECTIVE, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listMessages = _t);\n      }\n    },\n    viewQuery: function ComboboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ListComponent, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(PopoverComponent, 5);\n        i0.ɵɵviewQuery(InputGroupComponent, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchInputElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popoverComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputGroup = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listTemplate = _t.first);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function ComboboxComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-combobox-custom-class\", true)(\"fd-combobox-input\", true)(\"fd-combobox-custom-class--mobile\", ctx.mobile);\n      }\n    },\n    inputs: {\n      comboboxId: \"comboboxId\",\n      inputId: \"inputId\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      required: \"required\",\n      dropdownValues: \"dropdownValues\",\n      filterFn: \"filterFn\",\n      disabled: \"disabled\",\n      placeholder: \"placeholder\",\n      isSearch: \"isSearch\",\n      glyph: \"glyph\",\n      showClearButton: \"showClearButton\",\n      triggers: \"triggers\",\n      closeOnOutsideClick: \"closeOnOutsideClick\",\n      openOnKeyboardEvent: \"openOnKeyboardEvent\",\n      state: \"state\",\n      itemTemplate: \"itemTemplate\",\n      groupFn: \"groupFn\",\n      maxHeight: \"maxHeight\",\n      searchFn: \"searchFn\",\n      highlighting: \"highlighting\",\n      closeOnSelect: \"closeOnSelect\",\n      fillOnSelect: \"fillOnSelect\",\n      autoComplete: \"autoComplete\",\n      fillControlMode: \"fillControlMode\",\n      communicateByObject: \"communicateByObject\",\n      displayFn: \"displayFn\",\n      buttonFocusable: \"buttonFocusable\",\n      clearButtonFocusable: \"clearButtonFocusable\",\n      readOnly: \"readOnly\",\n      mobile: \"mobile\",\n      mobileConfig: \"mobileConfig\",\n      showDropdownButton: \"showDropdownButton\",\n      includes: \"includes\",\n      title: \"title\",\n      byline: \"byline\"\n    },\n    outputs: {\n      itemClicked: \"itemClicked\",\n      openChange: \"openChange\",\n      inputTextChange: \"inputTextChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ComboboxComponent),\n      multi: true\n    }, registerFormItemControl(ComboboxComponent), MenuKeyboardService, contentDensityObserverProviders(), {\n      provide: FD_COMBOBOX_COMPONENT,\n      useExisting: ComboboxComponent\n    }]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c6,\n    decls: 11,\n    vars: 1,\n    consts: [[4, \"ngTemplateOutlet\"], [\"desktopTemplate\", \"\"], [\"itemSource\", \"\"], [\"mobileTemplate\", \"\"], [\"controlTemplate\", \"\"], [\"listTemplate\", \"\"], [\"additionalBodyClass\", \"fd-popover-custom-list\", 3, \"isOpen\", \"fillControlMode\", \"scrollStrategy\", \"focusTrapped\", \"triggers\", \"disabled\", \"maxWidth\", \"closeOnOutsideClick\", \"isOpenChange\"], [3, \"hidden\"], [\"fd-list-title\", \"\", 3, \"innerHTML\", 4, \"ngIf\"], [4, \"ngIf\"], [\"fd-list-title\", \"\", 3, \"innerHTML\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngTemplateOutlet\"], [3, \"button\", \"glyph\", \"state\", \"buttonFocusable\", \"disabled\", \"readonly\", \"isControl\", \"isExpanded\", \"showFocus\", \"glyphAriaLabel\", \"iconTitle\", \"addOnButtonClicked\", \"click\"], [\"fdkAutoComplete\", \"\", \"fd-input-group-input\", \"\", \"type\", \"text\", \"role\", \"combobox\", \"autocomplete\", \"off\", 3, \"enable\", \"displayFn\", \"options\", \"inputText\", \"disabled\", \"readonly\", \"placeholder\", \"id\", \"ngModel\", \"ngModelChange\", \"onComplete\", \"keydown\", \"blur\"], [\"searchInputElement\", \"\"], [\"class\", \"fd-input-group__addon fd-input-group__addon--button\", 3, \"fd-shellbar__input-group-addon\", 4, \"ngIf\"], [1, \"fd-combobox-count-list-results\", 3, \"id\"], [1, \"fd-input-group__addon\", \"fd-input-group__addon--button\"], [\"fd-button\", \"\", \"type\", \"button\", \"title\", \"Clear input\", 1, \"fd-input-group__button\", 3, \"fdType\", \"focus\", \"blur\", \"click\"], [\"glyph\", \"decline\"], [\"fd-list\", \"\", \"role\", \"listbox\", 1, \"fd-combobox-custom-list\", 3, \"dropdownMode\", \"id\", \"hasMessage\", \"byline\", \"focusEscapeList\"], [4, \"ngFor\", \"ngForOf\"], [\"role\", \"group\", \"fd-list-group-header\", \"\", 3, \"tabindex\"], [\"fd-list-title\", \"\"], [\"role\", \"option\", \"fd-list-item\", \"\", \"class\", \"fd-combobox-list-item\", 3, \"tabindex\", \"selected\", \"keyDown\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"option\", \"fd-list-item\", \"\", 1, \"fd-combobox-list-item\", 3, \"tabindex\", \"selected\", \"keyDown\", \"click\"], [\"fd-list-item\", \"\", \"role\", \"option\", \"class\", \"fd-combobox-list-item\", 3, \"tabindex\", \"selected\", \"keyDown\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"fd-list-item\", \"\", \"role\", \"option\", 1, \"fd-combobox-list-item\", 3, \"tabindex\", \"selected\", \"keyDown\", \"click\"]],\n    template: function ComboboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c6);\n        i0.ɵɵtemplate(0, ComboboxComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, ComboboxComponent_ng_template_1_Template, 6, 13, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, ComboboxComponent_ng_template_3_Template, 2, 2, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(5, ComboboxComponent_ng_template_5_Template, 1, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(7, ComboboxComponent_ng_template_7_Template, 6, 33, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(9, ComboboxComponent_ng_template_9_Template, 4, 9, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n        const _r5 = i0.ɵɵreference(6);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.mobile ? _r5 : _r1);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i5.PopoverControlComponent, i5.PopoverBodyComponent, i5.PopoverComponent, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.ButtonComponent, i8.InputGroupComponent, i8.InputGroupInputDirective, i9.ListComponent, i9.ListItemComponent, i9.ListTitleDirective, i9.ListGroupHeaderDirective, i10.IconComponent, i2$1.AutoCompleteDirective, i2$1.DisplayFnPipe, i2$1.SearchHighlightPipe, ListGroupPipe],\n    styles: [\".fd-combobox-custom-class,.fd-combobox-custom-class .fd-combobox-shellbar-custom{display:inline-block}.fd-list__item.fd-combobox-list-item{cursor:pointer}.fd-combobox-full-width{width:100%}.fd-combobox-count-list-results{position:absolute;opacity:0;z-index:-1}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ComboboxComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedComboboxContentDensityDirective = /*#__PURE__*/(() => {\n  class DeprecatedComboboxContentDensityDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor(elRef) {\n      super('fd-combobox');\n      this.elRef = elRef;\n    }\n  }\n  DeprecatedComboboxContentDensityDirective.ɵfac = function DeprecatedComboboxContentDensityDirective_Factory(t) {\n    return new (t || DeprecatedComboboxContentDensityDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  DeprecatedComboboxContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedComboboxContentDensityDirective,\n    selectors: [[\"fd-combobox\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedComboboxContentDensityDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedComboboxContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ComboboxModule = /*#__PURE__*/(() => {\n  class ComboboxModule {}\n  ComboboxModule.ɵfac = function ComboboxModule_Factory(t) {\n    return new (t || ComboboxModule)();\n  };\n  ComboboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ComboboxModule\n  });\n  ComboboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, PopoverModule, FormsModule, MenuModule, PipeModule, ButtonModule, InputGroupModule, ListModule, IconModule, AutoCompleteModule, ContentDensityModule, ContentDensityModule]\n  });\n  return ComboboxModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COMBOBOX_COMPONENT, ComboboxComponent, ComboboxMobileComponent, ComboboxMobileModule, ComboboxModule, DeprecatedComboboxContentDensityDirective, FD_COMBOBOX_COMPONENT, ListGroupPipe };\n//# sourceMappingURL=fundamental-ngx-core-combobox.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}