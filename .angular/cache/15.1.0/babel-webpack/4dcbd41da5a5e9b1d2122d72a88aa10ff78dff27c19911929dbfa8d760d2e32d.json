{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, forwardRef, Directive, Input, Injectable, Inject, NgModule, InjectFlags, inject, Renderer2, ElementRef } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/router';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BehaviorSubject, of, Subscription, Subject, Observable, filter, distinctUntilChanged, skip, tap, switchMap, map as map$1, takeUntil } from 'rxjs';\nimport * as i1 from '@fundamental-ngx/cdk/utils';\nimport { ContentDensityService, DestroyedService, consumerProviderFactory } from '@fundamental-ngx/cdk/utils';\nimport { map } from 'rxjs/operators';\nconst ContentDensityGlobalKeyword = 'global';\nconst ContentDensityDefaultKeyword = 'default';\nconst CONTENT_DENSITY_DIRECTIVE = new InjectionToken('ContentDensityDirective');\nvar ContentDensityMode = /*#__PURE__*/(() => {\n  (function (ContentDensityMode) {\n    ContentDensityMode[\"COZY\"] = \"cozy\";\n    ContentDensityMode[\"CONDENSED\"] = \"condensed\";\n    ContentDensityMode[\"COMPACT\"] = \"compact\";\n  })(ContentDensityMode || (ContentDensityMode = {}));\n  return ContentDensityMode;\n})();\nconst isCompact = density => density === ContentDensityMode.COMPACT;\nconst isCondensed = density => density === ContentDensityMode.CONDENSED;\nconst isCozy = density => density === ContentDensityMode.COZY;\nconst isContentDensityMode = density => isCompact(density) || isCondensed(density) || isCozy(density) || density === ContentDensityGlobalKeyword;\n\n/**\n * Directive to control the content density of the elements.\n * This Directive is used in density controllers and consumers\n */\nlet ContentDensityDirective = /*#__PURE__*/(() => {\n  class ContentDensityDirective extends BehaviorSubject {\n    /**\n     * Update the content density of the element on the fly\n     */\n    set fdContentDensity(val) {\n      if (!isContentDensityMode(val)) {\n        if (isDevMode() && val !== '') {\n          console.log(`The value \"${val}\" is not a valid content density mode.\n                     Using \"${ContentDensityGlobalKeyword}\" instead.`);\n        }\n        val = ContentDensityGlobalKeyword;\n      }\n      this.next(val);\n    }\n    /**\n     * This input is basically syntax sugar, for not writing fdContentDensity=\"compact\",\n     * instead you can just write fdCompact=\"true\" or [fdCompact]\n     */\n    set fdCompact(val) {\n      if (coerceBooleanProperty(val)) {\n        this.next(ContentDensityMode.COMPACT);\n      } else {\n        this.next(ContentDensityGlobalKeyword);\n      }\n    }\n    /**\n     * This input is basically syntax sugar, for not writing fdContentDensity=\"condensed\",\n     * instead you can just write fdCondensed=\"true\" or [fdCondensed]\n     */\n    set fdCondensed(val) {\n      if (coerceBooleanProperty(val)) {\n        this.next(ContentDensityMode.CONDENSED);\n      } else {\n        this.next(ContentDensityGlobalKeyword);\n      }\n    }\n    /**\n     * This input is basically syntax sugar, for not writing fdContentDensity=\"cozy\",\n     * instead you can just write fdCozy=\"true\" or [fdCozy]\n     */\n    set fdCozy(val) {\n      if (coerceBooleanProperty(val)) {\n        this.next(ContentDensityMode.COZY);\n      } else {\n        this.next(ContentDensityGlobalKeyword);\n      }\n    }\n    /** @hidden */\n    constructor() {\n      super(ContentDensityGlobalKeyword);\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  ContentDensityDirective.ɵfac = function ContentDensityDirective_Factory(t) {\n    return new (t || ContentDensityDirective)();\n  };\n  ContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ContentDensityDirective,\n    selectors: [[\"\", \"fdContentDensity\", \"\", 3, \"fdCompact\", \"\", 3, \"fdCondensed\", \"\", 3, \"fdCozy\", \"\"], [\"\", \"fdCompact\", \"\", 3, \"fdContentDensity\", \"\", 3, \"fdCondensed\", \"\", 3, \"fdCozy\", \"\"], [\"\", \"fdCondensed\", \"\", 3, \"fdContentDensity\", \"\", 3, \"fdCompact\", \"\", 3, \"fdCozy\", \"\"], [\"\", \"fdCozy\", \"\", 3, \"fdContentDensity\", \"\", 3, \"fdCompact\", \"\", 3, \"fdCondensed\", \"\"]],\n    inputs: {\n      fdContentDensity: \"fdContentDensity\",\n      fdCompact: \"fdCompact\",\n      fdCondensed: \"fdCondensed\",\n      fdCozy: \"fdCozy\"\n    },\n    exportAs: [\"fdContentDensity\"],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => ContentDensityDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return ContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DEFAULT_CONTENT_DENSITY = new InjectionToken('Default global content density', {\n  factory: () => ContentDensityMode.COZY\n});\n\n/**\n * Abstract provider class for providing content density storage functionality\n * Default implementation is MemoryContentDensityStorage\n */\nclass ContentDensityStorage {}\nlet MemoryContentDensityStorage = /*#__PURE__*/(() => {\n  class MemoryContentDensityStorage {\n    /** @hidden */\n    constructor(defaultContentDensity) {\n      this._currentContentDensity$ = new BehaviorSubject(defaultContentDensity);\n    }\n    /** Content density observable */\n    getContentDensity() {\n      return this._currentContentDensity$.asObservable();\n    }\n    /** Change content density */\n    setContentDensity(density) {\n      this._currentContentDensity$.next(density);\n      return of(undefined);\n    }\n  }\n  MemoryContentDensityStorage.ɵfac = function MemoryContentDensityStorage_Factory(t) {\n    return new (t || MemoryContentDensityStorage)(i0.ɵɵinject(DEFAULT_CONTENT_DENSITY));\n  };\n  MemoryContentDensityStorage.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MemoryContentDensityStorage,\n    factory: MemoryContentDensityStorage.ɵfac\n  });\n  return MemoryContentDensityStorage;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Service for managing global content density state.\n */\nlet GlobalContentDensityService = /*#__PURE__*/(() => {\n  class GlobalContentDensityService {\n    /** @hidden */\n    constructor(_storage, _defaultContentDensity) {\n      this._storage = _storage;\n      this._defaultContentDensity = _defaultContentDensity;\n      /** @hidden */\n      this._subscription = new Subscription();\n      this._subscription.add(this.contentDensityListener().subscribe(density => {\n        this.currentContentDensity = density;\n      }));\n    }\n    /** Listen to current content density changes */\n    contentDensityListener() {\n      return this._storage.getContentDensity();\n    }\n    /** Update content density */\n    updateContentDensity(density) {\n      return this._storage.setContentDensity(density);\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n  }\n  GlobalContentDensityService.ɵfac = function GlobalContentDensityService_Factory(t) {\n    return new (t || GlobalContentDensityService)(i0.ɵɵinject(ContentDensityStorage), i0.ɵɵinject(DEFAULT_CONTENT_DENSITY));\n  };\n  GlobalContentDensityService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: GlobalContentDensityService,\n    factory: GlobalContentDensityService.ɵfac\n  });\n  return GlobalContentDensityService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst CONTENT_DENSITY_STORAGE_KEY = new InjectionToken('Content density storage key for local storage or for url param', {\n  factory: () => '__ContentDensity__'\n});\nlet LocalContentDensityStorage = /*#__PURE__*/(() => {\n  class LocalContentDensityStorage {\n    /** @hidden */\n    constructor(_defaultContentDensity, _storageKey, _storage) {\n      this._defaultContentDensity = _defaultContentDensity;\n      this._storageKey = _storageKey;\n      this._storage = _storage;\n      /** @hidden */\n      this._update$ = new Subject();\n      this._initialize();\n    }\n    /** Content density observable */\n    getContentDensity() {\n      return new Observable(subscriber => {\n        subscriber.next(this._storage.get(this._storageKey));\n        const subscription = this._update$.subscribe(() => {\n          subscriber.next(this._storage.get(this._storageKey));\n        });\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n    }\n    /** Change content density */\n    setContentDensity(density) {\n      this._storage.set(this._storageKey, density);\n      this._update$.next();\n      return of(undefined);\n    }\n    /** @hidden */\n    _initialize() {\n      if (!this._storage.get(this._storageKey)) {\n        this._storage.set(this._storageKey, this._defaultContentDensity);\n      }\n    }\n  }\n  LocalContentDensityStorage.ɵfac = function LocalContentDensityStorage_Factory(t) {\n    return new (t || LocalContentDensityStorage)(i0.ɵɵinject(DEFAULT_CONTENT_DENSITY), i0.ɵɵinject(CONTENT_DENSITY_STORAGE_KEY), i0.ɵɵinject(i1.LocalStorageService));\n  };\n  LocalContentDensityStorage.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LocalContentDensityStorage,\n    factory: LocalContentDensityStorage.ɵfac\n  });\n  return LocalContentDensityStorage;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UrlContentDensityStorage = /*#__PURE__*/(() => {\n  class UrlContentDensityStorage {\n    /** @hidden */\n    constructor(_router, _activatedRoute, _defaultContentDensity, _storageKey) {\n      this._router = _router;\n      this._activatedRoute = _activatedRoute;\n      this._defaultContentDensity = _defaultContentDensity;\n      this._storageKey = _storageKey;\n      this._initialize();\n    }\n    /** @hidden */\n    _initialize() {\n      this._current$ = new BehaviorSubject(this._defaultContentDensity);\n      this._activatedRoute.queryParams.pipe(filter(queryParams => !!queryParams[this._storageKey])).subscribe(queryParams => {\n        this._current$.next(queryParams[this._storageKey]);\n      });\n    }\n    /** @hidden */\n    _setUrlQueryParam(density) {\n      const url = new URL(`https://google.com${this._router.url}`);\n      url.searchParams.delete(this._storageKey);\n      url.searchParams.append(this._storageKey, density);\n      const queryParams = {};\n      url.searchParams.forEach((value, key) => queryParams[key] = value);\n      this._router.navigateByUrl(url.pathname + '?' + url.searchParams.toString());\n    }\n    /** Content density observable */\n    getContentDensity() {\n      return this._current$.asObservable().pipe(distinctUntilChanged());\n    }\n    /** Change content density */\n    setContentDensity(density) {\n      this._current$.next(density);\n      this._setUrlQueryParam(density);\n      return of(undefined);\n    }\n  }\n  UrlContentDensityStorage.ɵfac = function UrlContentDensityStorage_Factory(t) {\n    return new (t || UrlContentDensityStorage)(i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(i1$1.ActivatedRoute), i0.ɵɵinject(DEFAULT_CONTENT_DENSITY), i0.ɵɵinject(CONTENT_DENSITY_STORAGE_KEY));\n  };\n  UrlContentDensityStorage.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UrlContentDensityStorage,\n    factory: UrlContentDensityStorage.ɵfac\n  });\n  return UrlContentDensityStorage;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Temporary replacement for ContentDensityService\n */\nlet DeprecatedContentDensityService = /*#__PURE__*/(() => {\n  class DeprecatedContentDensityService {\n    /** @hidden */\n    constructor(_contentDensityController, _defaultContentDensity) {\n      this._contentDensityController = _contentDensityController;\n      this._defaultContentDensity = _defaultContentDensity;\n      /** Content Density BehaviourSubject */\n      this.contentDensity = new BehaviorSubject(this._defaultContentDensity);\n      this.contentDensity.pipe(skip(1), tap(d => this._contentDensityController.updateContentDensity(d))).subscribe();\n    }\n    /** @hidden */\n    get _contentDensityListener() {\n      return this._contentDensityController.contentDensityListener();\n    }\n    /** @hidden */\n    get _isCompactDensity() {\n      return this._contentDensityController.contentDensityListener().pipe(map(isCompact));\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.contentDensity.complete();\n    }\n  }\n  DeprecatedContentDensityService.ɵfac = function DeprecatedContentDensityService_Factory(t) {\n    return new (t || DeprecatedContentDensityService)(i0.ɵɵinject(GlobalContentDensityService), i0.ɵɵinject(DEFAULT_CONTENT_DENSITY));\n  };\n  DeprecatedContentDensityService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DeprecatedContentDensityService,\n    factory: DeprecatedContentDensityService.ɵfac\n  });\n  return DeprecatedContentDensityService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction generateContentDensityStorage(config) {\n  if (config.storage === 'localStorage') {\n    return {\n      provide: ContentDensityStorage,\n      useClass: LocalContentDensityStorage\n    };\n  }\n  if (config.storage === 'memory') {\n    return {\n      provide: ContentDensityStorage,\n      useClass: MemoryContentDensityStorage\n    };\n  }\n  if (config.storage === 'url') {\n    return {\n      provide: ContentDensityStorage,\n      useClass: UrlContentDensityStorage,\n      deps: [Router, ActivatedRoute, DEFAULT_CONTENT_DENSITY, CONTENT_DENSITY_STORAGE_KEY, DOCUMENT]\n    };\n  }\n  return [];\n}\nlet ContentDensityModule = /*#__PURE__*/(() => {\n  class ContentDensityModule {\n    /** Module with providers */\n    static forRoot(config) {\n      let storage;\n      const conf = config || {\n        storage: 'memory'\n      };\n      if (typeof conf.storage === 'string') {\n        storage = generateContentDensityStorage(conf);\n      } else if (typeof conf.storage === 'object') {\n        storage = conf.storage;\n      } else {\n        storage = {\n          provide: ContentDensityStorage,\n          useClass: MemoryContentDensityStorage\n        };\n      }\n      return {\n        ngModule: ContentDensityModule,\n        providers: [{\n          provide: DEFAULT_CONTENT_DENSITY,\n          useValue: conf.defaultGlobalContentDensity || ContentDensityMode.COZY\n        }, {\n          provide: CONTENT_DENSITY_STORAGE_KEY,\n          useValue: conf.storageKey || '__ContentDensity__'\n        }, {\n          provide: ContentDensityService,\n          useClass: DeprecatedContentDensityService\n        }, GlobalContentDensityService, storage]\n      };\n    }\n  }\n  ContentDensityModule.ɵfac = function ContentDensityModule_Factory(t) {\n    return new (t || ContentDensityModule)();\n  };\n  ContentDensityModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ContentDensityModule\n  });\n  ContentDensityModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ContentDensityModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass ContentDensityObserverSettings {}\nconst getChangesSource$ = params => {\n  const serviceValue$ = params.contentDensityService ? params.contentDensityService.contentDensityListener() : of(params.defaultContentDensity);\n  const changesSource$ = params.parentContentDensityService ? params.parentContentDensityService : params.contentDensityDirective ? params.contentDensityDirective : serviceValue$;\n  return changesSource$.pipe(switchMap(mode => {\n    if (mode === ContentDensityDefaultKeyword) {\n      return of(params.defaultContentDensity);\n    }\n    if (mode === ContentDensityGlobalKeyword) {\n      return serviceValue$;\n    }\n    return of(mode);\n  }));\n};\nconst defaultContentDensityObserverConfigs = {\n  modifiers: {\n    [ContentDensityMode.COMPACT]: 'is-compact',\n    [ContentDensityMode.COZY]: 'is-cozy',\n    [ContentDensityMode.CONDENSED]: 'is-condensed'\n  },\n  supportedContentDensity: [ContentDensityMode.COMPACT, ContentDensityMode.COZY],\n  defaultContentDensity: ContentDensityMode.COZY,\n  debug: false,\n  alwaysAddModifiers: false,\n  restrictChildContentDensity: false\n};\nconst isFactoryProvider = obj => !!(obj && obj.useFactory);\nconst getDeps = (injector, defaultContentDensity) => (defaultContentDensity.deps || []).map(dep => {\n  if (Array.isArray(dep)) {\n    let type;\n    let flags = InjectFlags.Default;\n    for (let index = 0; index < dep.length; index++) {\n      const flag = dep[index]['__NG_DI_FLAG__'];\n      if (typeof flag === 'number') {\n        // eslint-disable-next-line no-bitwise\n        flags |= flag;\n      } else {\n        type = dep[index];\n      }\n    }\n    return injector.get(type, undefined, flags);\n  }\n  return injector.get(dep, undefined, InjectFlags.Default);\n});\nconst getDefaultContentDensity = (injector, configuration) => {\n  if (typeof configuration.defaultContentDensity === 'string') {\n    return configuration.defaultContentDensity;\n  }\n  if (isFactoryProvider(configuration.defaultContentDensity)) {\n    const deps = getDeps(injector, configuration.defaultContentDensity);\n    return configuration.defaultContentDensity.useFactory(...deps);\n  }\n  return injector.get(configuration.defaultContentDensity, undefined, undefined);\n};\nconst initialContentDensity = (injector, configuration) => {\n  const serviceValue = injector.get(GlobalContentDensityService, null, InjectFlags.Optional)?.currentContentDensity;\n  if (serviceValue) {\n    return serviceValue;\n  }\n  return getDefaultContentDensity(injector, {\n    ...defaultContentDensityObserverConfigs,\n    ...(configuration || {})\n  });\n};\nlet ContentDensityObserver = /*#__PURE__*/(() => {\n  class ContentDensityObserver extends BehaviorSubject {\n    /** @hidden */\n    get isCompact() {\n      return this._isCompact$.value;\n    }\n    /** @hidden */\n    get isCozy() {\n      return this._isCozy$.value;\n    }\n    /** @hidden */\n    get isCondensed() {\n      return this._isCondensed$.value;\n    }\n    /** @hidden */\n    constructor(_injector, _providedConfig) {\n      super(initialContentDensity(_injector, _providedConfig));\n      this._injector = _injector;\n      this._providedConfig = _providedConfig;\n      /** @hidden */\n      this._isCompact$ = new BehaviorSubject(false);\n      /** @hidden */\n      this._isCozy$ = new BehaviorSubject(false);\n      /** @hidden */\n      this._isCondensed$ = new BehaviorSubject(false);\n      /** @hidden */\n      this.isCompact$ = this._isCompact$.asObservable();\n      /** @hidden */\n      this.isCozy$ = this._isCozy$.asObservable();\n      /** @hidden */\n      this.isCondensed$ = this._isCondensed$.asObservable();\n      /** @hidden */\n      this._globalContentDensityService = inject(GlobalContentDensityService, {\n        optional: true\n      });\n      /** @hidden */\n      this._contentDensityDirective = inject(CONTENT_DENSITY_DIRECTIVE, {\n        optional: true\n      });\n      /** @hidden */\n      this._parentContentDensityObserver = inject(ContentDensityObserver, {\n        optional: true,\n        skipSelf: true\n      });\n      /** @hidden */\n      this._renderer = inject(Renderer2);\n      /** @hidden */\n      this._destroy$ = inject(DestroyedService);\n      /** @hidden */\n      this._elementRef = inject(ElementRef);\n      /** @hidden */\n      this._elements = [this._elementRef];\n      /** @hidden */\n      this._alternativeTo = {\n        [ContentDensityMode.COMPACT]: () => this._isSupported(ContentDensityMode.CONDENSED) ? ContentDensityMode.CONDENSED : ContentDensityMode.COZY,\n        [ContentDensityMode.CONDENSED]: () => this._isSupported(ContentDensityMode.COMPACT) ? ContentDensityMode.COMPACT : ContentDensityMode.COZY,\n        [ContentDensityMode.COZY]: () => ContentDensityMode.COZY // No alternative here, everyone should support it\n      };\n\n      const destroySub = this._destroy$.subscribe({\n        complete: () => {\n          destroySub.unsubscribe();\n          this.complete();\n          if (this.config.debug) {\n            console.log('ContentDensityObserver: destroyed');\n          }\n        }\n      });\n      this.config = {\n        ...defaultContentDensityObserverConfigs,\n        ...(this._parentContentDensityObserver?.config ?? {}),\n        ...(_providedConfig || {})\n      };\n      getChangesSource$({\n        defaultContentDensity: this.value,\n        contentDensityDirective: this._contentDensityDirective ?? undefined,\n        contentDensityService: this._globalContentDensityService ?? undefined,\n        parentContentDensityService: this.config.restrictChildContentDensity ? this._parentContentDensityObserver?.asObservable() ?? undefined : undefined\n      }).pipe(map$1(density => {\n        if (this.config.debug) {\n          console.log(`ContentDensityObserver: density changed to ${density}`);\n        }\n        if (!this._isSupported(density)) {\n          try {\n            if (this.config.debug) {\n              console.log(`ContentDensityObserver: ${density} is not supported. Failing back to alternative one.`);\n            }\n            return this._alternativeTo[density]();\n          } catch (e) {\n            throw new Error(`ContentDensityObserver: density ${density} is not supported`);\n          }\n        }\n        return density;\n      }), distinctUntilChanged(), takeUntil(this._destroy$)).subscribe(density => {\n        this.next(density);\n        this._applyClass();\n        this._isCompact$.next(density === ContentDensityMode.COMPACT);\n        this._isCozy$.next(density === ContentDensityMode.COZY);\n        this._isCondensed$.next(density === ContentDensityMode.CONDENSED);\n      });\n    }\n    /** @hidden */\n    consume(...consumers) {\n      this._elements.concat(...consumers.map(c => c.elementRef()));\n    }\n    /**\n     * Completes the stream and closes all internal subscriptions.\n     */\n    complete() {\n      super.complete();\n      this._isCondensed$.complete();\n      this._isCozy$.complete();\n      this._isCompact$.complete();\n      this._parentContentDensityObserver = null;\n      this._contentDensityDirective = null;\n      this._globalContentDensityService = null;\n      this._elementRef = null;\n      this._renderer = null;\n      this._elements = [];\n    }\n    /** @hidden */\n    removeConsumer(consumer) {\n      this._elements.splice(this._elements.indexOf(consumer.elementRef()), 1);\n    }\n    /** @hidden */\n    _applyClass() {\n      if (!this.config?.modifiers) {\n        return;\n      }\n      const modifiers = this.config.modifiers;\n      const parentContentDensityEqual = this._parentContentDensityObserver?.value === this.value;\n      this._elements.forEach(element => {\n        Object.values(modifiers).forEach(className => {\n          this._renderer?.removeClass(element?.nativeElement, className);\n        });\n        // Simply remove all modifiers from current element. Content density state is covered by parent element.\n        if (parentContentDensityEqual && !this.config.alwaysAddModifiers) {\n          return;\n        }\n        this._renderer?.addClass(element?.nativeElement, modifiers[this.value]);\n      });\n    }\n    /** Check if the given density is supported */\n    _isSupported(density) {\n      return this.config.supportedContentDensity?.includes(density) ?? false;\n    }\n  }\n  ContentDensityObserver.ɵfac = function ContentDensityObserver_Factory(t) {\n    return new (t || ContentDensityObserver)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(ContentDensityObserverSettings));\n  };\n  ContentDensityObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContentDensityObserver,\n    factory: ContentDensityObserver.ɵfac\n  });\n  return ContentDensityObserver;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Creates provider for ContentDensityObserver and adds DestroyedService provider\n */\nfunction contentDensityObserverProviders(params) {\n  return [DestroyedService, consumerProviderFactory(ContentDensityObserver, params)];\n}\n\n/**\n * Directive decorator is only for allowing @Input\n */\nlet DeprecatedCompactDirective = /*#__PURE__*/(() => {\n  class DeprecatedCompactDirective extends BehaviorSubject {\n    /** @deprecated use fdCompact directive instead */\n    set compact(value) {\n      if (isDevMode()) {\n        console.warn(`${this.message}. Use [fdCompact] directive instead.`);\n      }\n      this.next(coerceBooleanProperty(value) ? ContentDensityMode.COMPACT : ContentDensityMode.COZY);\n    }\n    /** @hidden */\n    constructor(selectorBase) {\n      super(ContentDensityMode.COZY);\n      /** @hidden */\n      this.alternative = {\n        name: 'Use [fdCompact] directive instead',\n        link: ['/core', 'content-density']\n      };\n      this.message = `Usage of ${selectorBase}[compact] is deprecated`;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  DeprecatedCompactDirective.ɵfac = function DeprecatedCompactDirective_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  DeprecatedCompactDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedCompactDirective,\n    inputs: {\n      compact: \"compact\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedCompactDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive decorator is only for allowing @Input\n */\nlet DeprecatedCozyDirective = /*#__PURE__*/(() => {\n  class DeprecatedCozyDirective extends BehaviorSubject {\n    /** @deprecated use fdCozy directive instead */\n    set cozy(value) {\n      if (isDevMode()) {\n        console.warn(`${this.message}. Use [fdCozy] directive instead.`);\n      }\n      this.next(coerceBooleanProperty(value) ? ContentDensityMode.COZY : ContentDensityMode.COMPACT);\n    }\n    /** @hidden */\n    constructor(selectorBase) {\n      super(ContentDensityMode.COMPACT);\n      /** @hidden */\n      this.alternative = {\n        name: 'Use [fdCozy] directive instead',\n        link: ['/core', 'content-density']\n      };\n      this.message = `Usage of ${selectorBase}[cozy] is deprecated`;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  DeprecatedCozyDirective.ɵfac = function DeprecatedCozyDirective_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  DeprecatedCozyDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedCozyDirective,\n    inputs: {\n      cozy: \"cozy\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedCozyDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive decorator is only for allowing @Input\n */\nlet DeprecatedCondensedDirective = /*#__PURE__*/(() => {\n  class DeprecatedCondensedDirective extends BehaviorSubject {\n    /** @deprecated use fdCondensed directive instead */\n    set condensed(value) {\n      if (isDevMode()) {\n        console.warn(`${this.message}. Use [fdCondensed] directive instead.`);\n      }\n      this.next(coerceBooleanProperty(value) ? ContentDensityMode.CONDENSED : ContentDensityMode.COZY);\n    }\n    /** @hidden */\n    constructor(selectorBase) {\n      super(ContentDensityMode.COZY);\n      /** @hidden */\n      this.alternative = {\n        name: 'Use [fdCondensed] directive instead',\n        link: ['/core', 'content-density']\n      };\n      this.message = `Usage of ${selectorBase}[condensed] is deprecated`;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  DeprecatedCondensedDirective.ɵfac = function DeprecatedCondensedDirective_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  DeprecatedCondensedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedCondensedDirective,\n    inputs: {\n      condensed: \"condensed\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedCondensedDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** @hidden */\nfunction mockedLocalContentDensityDirective(defaultValue = ContentDensityGlobalKeyword) {\n  const behaviorSubject = new BehaviorSubject(defaultValue);\n  return {\n    contentDensityDirectiveProvider: {\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useValue: behaviorSubject.asObservable()\n    },\n    setContentDensity: cd => behaviorSubject.next(cd)\n  };\n}\nconst warnedSelectorBases = new Set();\n/**\n * Directive decorator is only for allowing @Input\n */\nlet DeprecatedContentDensityDirective = /*#__PURE__*/(() => {\n  class DeprecatedContentDensityDirective extends BehaviorSubject {\n    /** @deprecated use fdCompact directive instead */\n    set contentDensity(value) {\n      if (isDevMode() && !warnedSelectorBases.has(this.selectorBase)) {\n        console.warn(`${this.message}. Use [fd${capitalize(value)}] or [fdContentDensity] directives instead.`);\n        warnedSelectorBases.add(this.selectorBase);\n      }\n      this._manuallySet = true;\n      this.next(value);\n    }\n    /** Deprecation message */\n    get message() {\n      return `Usage of ${this.selectorBase}[contentDensity] is deprecated`;\n    }\n    /** Alternative usage description with a link to the docs */\n    get alternative() {\n      return {\n        name: `Use [${this._manuallySet ? `fd${capitalize(this.value)}` : 'fdContentDensity'}] directive instead`,\n        link: ['/core', 'content-density']\n      };\n    }\n    /** @hidden */\n    constructor() {\n      super(ContentDensityMode.COZY);\n      /** @hidden */\n      this._manuallySet = false;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  DeprecatedContentDensityDirective.ɵfac = function DeprecatedContentDensityDirective_Factory(t) {\n    return new (t || DeprecatedContentDensityDirective)();\n  };\n  DeprecatedContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedContentDensityDirective,\n    inputs: {\n      contentDensity: \"contentDensity\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst capitalize = str => str?.charAt(0).toUpperCase() + str?.slice(1);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CONTENT_DENSITY_DIRECTIVE, ContentDensityDefaultKeyword, ContentDensityDirective, ContentDensityGlobalKeyword, ContentDensityMode, ContentDensityModule, ContentDensityObserver, ContentDensityObserverSettings, ContentDensityStorage, DeprecatedCompactDirective, DeprecatedCondensedDirective, DeprecatedContentDensityDirective, DeprecatedCozyDirective, GlobalContentDensityService, contentDensityObserverProviders, defaultContentDensityObserverConfigs, isCompact, isCondensed, isContentDensityMode, isCozy, mockedLocalContentDensityDirective };\n//# sourceMappingURL=fundamental-ngx-core-content-density.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}