{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '@fundamental-ngx/core/icon';\nimport * as i4 from '@fundamental-ngx/core/popover';\nimport { PopoverService, PopoverModule } from '@fundamental-ngx/core/popover';\nimport * as i5 from '@fundamental-ngx/core/calendar';\nimport { CalendarComponent, CalendarModule } from '@fundamental-ngx/core/calendar';\nimport * as i6 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport * as i1 from '@fundamental-ngx/core/datetime';\nimport { DATE_TIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport * as i2 from '@fundamental-ngx/core/form';\nimport { registerFormItemControl, PopoverFormMessageService, FormMessageModule } from '@fundamental-ngx/core/form';\nimport * as i8 from '@fundamental-ngx/core/input-group';\nimport { InputGroupInputDirective, InputGroupModule } from '@fundamental-ngx/core/input-group';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i7 from '@fundamental-ngx/core/time';\nimport { TimeModule } from '@fundamental-ngx/core/time';\nimport * as i9 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i10 from '@fundamental-ngx/core/bar';\nimport { BarModule } from '@fundamental-ngx/core/bar';\nimport * as i11 from '@fundamental-ngx/core/segmented-button';\nimport { SegmentedButtonModule } from '@fundamental-ngx/core/segmented-button';\nimport * as i12 from '@fundamental-ngx/i18n';\nimport { I18nModule } from '@fundamental-ngx/i18n';\nimport { DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\n\n/** Creates an error to be thrown when attempting to use an invalid date implementation. */\nconst _c0 = [\"inputGroupComponent\"];\nfunction DatetimePickerComponent_fd_form_message_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fd-form-message\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"embedded\", true)(\"type\", ctx_r1.state);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1._message, \" \");\n  }\n}\nfunction DatetimePickerComponent_fd_time_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-time\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function DatetimePickerComponent_fd_time_22_Template_fd_time_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.handleTimeChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"fd-datetime__active-display-type\", ctx_r2._displayType === \"time\");\n    i0.ɵɵproperty(\"disabled\", ctx_r2.disabled)(\"elementsAtOnce\", 5)(\"keepTwoDigits\", ctx_r2.keepTwoDigitsTime)(\"ngModel\", ctx_r2._tempTime)(\"spinnerButtons\", ctx_r2.spinnerButtons)(\"meridian\", ctx_r2._meridian)(\"displaySeconds\", ctx_r2._displaySeconds)(\"displayMinutes\", ctx_r2._displayMinutes)(\"displayHours\", ctx_r2._displayHours);\n  }\n}\nfunction DatetimePickerComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"div\", 21)(3, \"fd-bar-element\")(4, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function DatetimePickerComponent_div_23_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.submit());\n    });\n    i0.ɵɵpipe(5, \"fdTranslate\");\n    i0.ɵɵpipe(6, \"fdTranslate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"fd-bar-element\")(8, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function DatetimePickerComponent_div_23_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.cancel());\n    });\n    i0.ɵɵpipe(9, \"fdTranslate\");\n    i0.ɵɵpipe(10, \"fdTranslate\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"label\", ctx_r3.okLabel || i0.ɵɵpipeBind1(5, 4, \"coreDatetimePicker.datetimeOkLabel\"))(\"ariaLabel\", ctx_r3.okLabel || i0.ɵɵpipeBind1(6, 6, \"coreDatetimePicker.datetimeOkLabel\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"label\", ctx_r3.cancelLabel || i0.ɵɵpipeBind1(9, 8, \"coreDatetimePicker.datetimeCancelLabel\"))(\"ariaLabel\", ctx_r3.cancelLabel || i0.ɵɵpipeBind1(10, 10, \"coreDatetimePicker.datetimeCancelLabel\"));\n  }\n}\nconst _c1 = function () {\n  return [];\n};\nconst _c2 = [\"*\"];\nfunction createMissingDateImplementationError(provider) {\n  return Error(`FdDatetimePicker: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: FdDatetimeModule, or provide a ` + `custom implementation.`);\n}\n\n/**\n * The datetime picker component is an opinionated composition of the fd-popover,\n * fd-calendar and fd-time components to accomplish the UI pattern for picking a date and time.\n * Supports Angular Forms.\n * ```html\n * <fd-date-time-picker [(ngModel)]=\"dateTime\"></fd-date-time-picker>\n * ```\n */\nlet DatetimePickerComponent = /*#__PURE__*/(() => {\n  class DatetimePickerComponent {\n    /** Text displayed in message */\n    set message(message) {\n      this._message = message;\n      this._popoverFormMessage.message = message;\n    }\n    /** The trigger events that will open/close the message box.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    set messageTriggers(triggers) {\n      this._messageTriggers = triggers;\n      this._popoverFormMessage.triggers = triggers;\n    }\n    /**\n     *  The state of the form control - applies css classes.\n     *  Also this is applied to message.\n     *  Can be `success`, `error`, `warning`, `information` or blank for default.\n     */\n    set state(state) {\n      this._state = state;\n      this._popoverFormMessage.messageType = state;\n    }\n    get state() {\n      if (this.useValidation && this.isInvalidDateInput) {\n        return 'error';\n      }\n      return this._state;\n    }\n    /**\n     * Whether to recalculate value from the input as user types or on blur.\n     * By default, updates the value as user types.\n     * @default false\n     */\n    set processInputOnBlur(v) {\n      this._processInputOnBlur = coerceBooleanProperty(v);\n    }\n    get processInputOnBlur() {\n      return this._processInputOnBlur;\n    }\n    /** Indicates when datetime input is in invalid state. */\n    get isInvalidDateInput() {\n      return this._isInvalidDateInput && this._touched;\n    }\n    /** @hidden */\n    constructor(_elRef, _changeDetRef,\n    // Use @Optional to avoid angular injection error message and throw our own which is more precise one\n    _dateTimeAdapter, _dateTimeFormats, _popoverFormMessage) {\n      this._elRef = _elRef;\n      this._changeDetRef = _changeDetRef;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._popoverFormMessage = _popoverFormMessage;\n      /** Placeholder for the inner input element. */\n      this.placeholder = '';\n      /**\n       *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n       *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n       */\n      this.placement = 'bottom-start';\n      /** If it is mandatory field */\n      this.required = false;\n      /** @hidden */\n      this._message = null;\n      /** @hidden */\n      this._messageTriggers = ['focusin', 'focusout'];\n      /** Whether to perform visual validation on the picker input. */\n      this.useValidation = true;\n      /** Whether the popover is open. Two-way binding is supported. */\n      this.isOpen = false;\n      /** The disableFunction for the calendar. */\n      this.startingDayOfWeek = 1;\n      /** Actually shown active view one of 'day' | 'month' | 'year' in calendar component*/\n      this.activeView = 'day';\n      /** Whether a null input is considered valid. */\n      this.allowNull = true;\n      /**\n       * @Input when set to true time component will use 2 digits for each number.\n       * For example 9 will become 09\n       * but 12 will be kept as 12.\n       * Only uses by time component and does not change input format\n       */\n      this.keepTwoDigitsTime = false;\n      /** @hidden */\n      this._state = 'default';\n      /**\n       * Whether AddOn Button should be focusable\n       * @default true\n       */\n      this.buttonFocusable = true;\n      /**\n       * Special days mark, it can be used by passing array of object with\n       * Special day number, list 1-20 [class:`fd-calendar__special-day--{{number}}`] is available there:\n       * https://sap.github.io/fundamental-styles/components/calendar.html calendar special days section\n       * Rule accepts method with FdDate object as a parameter. ex:\n       * `rule: (fdDate: FdDate) => fdDate.getDay() === 1`, which will mark all sundays as special day.\n       */\n      this.specialDaysRules = [];\n      /**\n       * Object to customize year grid,\n       * Row, Columns and method to display year can be modified\n       */\n      this.yearGrid = {\n        rows: 4,\n        cols: 5\n      };\n      /**\n       * Object to customize aggregated year grid,\n       * Row, Columns and method to display year can be modified\n       */\n      this.aggregatedYearGrid = {\n        rows: 4,\n        cols: 3\n      };\n      /**\n       * Whether user wants to mark sunday/saturday with `fd-calendar__item--weekend` class\n       */\n      this.markWeekends = true;\n      /** @Input Whether to show spinner buttons */\n      this.spinnerButtons = true;\n      /**\n       * Whether user wants to show week numbers next to days\n       */\n      this.showWeekNumbers = true;\n      /** Whether or not to show the datetime picker footer with OK/cancel buttons. */\n      this.showFooter = true;\n      /**\n       * Whether to prevent page scrolling when focusing date picker input field after calendar has been closed.\n       */\n      this.preventScrollOnFocus = false;\n      /** @hidden */\n      this._processInputOnBlur = false;\n      /** Event emitted when the state of the isOpen property changes. */\n      this.isOpenChange = new EventEmitter();\n      /** Event thrown every time calendar active view is changed */\n      this.activeViewChange = new EventEmitter();\n      /** Event emitted when the date changes. This can be a time or day change. */\n      this.dateChange = new EventEmitter();\n      /** Event emitted when the day changes from the calendar. */\n      this.calendarChange = new EventEmitter();\n      /** Event emitted when the time changes from the time component. */\n      this.timeChange = new EventEmitter();\n      /** Event emitted when popover closes. */\n      this.onClose = new EventEmitter();\n      /** Event emitted when datepicker changes it's \"touched\" state. */\n      this.touched = new EventEmitter();\n      /**\n       * @hidden\n       * Date of the input field. Internal use.\n       * For programmatic selection, use two-way binding on the date input.\n       */\n      this._inputFieldDate = null;\n      /** @hidden */\n      this._isInvalidDateInput = false;\n      /** @hidden whether to display date or time in mobile mode */\n      this._displayType = 'date';\n      /** @hidden */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this._touched = false;\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n      /**\n       * Function used to disable certain dates in the calendar.\n       * @param fdDate FdDate\n       */\n      this.disableFunction = () => false;\n      if (!this._dateTimeAdapter) {\n        throw createMissingDateImplementationError('DateTimeAdapter');\n      }\n      if (!this._dateTimeFormats) {\n        throw createMissingDateImplementationError('DATE_TIME_FORMATS');\n      }\n      // default model value\n      this.date = _dateTimeAdapter.now();\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (changes.date) {\n        this._setTempDateTime();\n      }\n      if (['displayHours', 'displayMinutes', 'displaySeconds', 'meridian'].some(input => input in changes)) {\n        this._calculateTimeOptions();\n      }\n    }\n    /** @hidden */\n    ngOnInit() {\n      if (this.date) {\n        this._setTempDateTime();\n      }\n      this._calculateTimeOptions();\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$), filter(() => this._inputFieldDate !== '')).subscribe(() => {\n        this._setInput(this.date);\n        this._calculateTimeOptions();\n        this._changeDetRef.detectChanges();\n      });\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._InitialiseVariablesInMessageService();\n      // update bindings after rendering\n      // is needed to preperly reflect error state\n      setTimeout(() => {\n        this._changeDetRef.markForCheck();\n      });\n    }\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate() {\n      return this.isCurrentModelValid() && !this._isInvalidDateInput ? null : {\n        dateValidation: {\n          valid: false\n        }\n      };\n    }\n    /** Toggles the popover. */\n    togglePopover() {\n      if (this.isOpen) {\n        this.closePopover();\n      } else {\n        this.openPopover();\n      }\n    }\n    /**\n     * Method that handles calendar active view change and throws event.\n     */\n    handleCalendarActiveViewChange(activeView) {\n      this.activeViewChange.emit(activeView);\n    }\n    /** Method that handles blur events on datetime picker input */\n    handleOnTouched(event) {\n      this._touched = true;\n      this.onTouched();\n      this.touched.next();\n      if (event) {\n        this.handleInputChange(event.target.value, false);\n      }\n    }\n    /** Opens the popover. */\n    openPopover() {\n      if (!this.isOpen && !this.disabled) {\n        this.isOpen = true;\n        this._onOpenStateChanged(this.isOpen);\n      }\n    }\n    /** Closes the popover and refresh model */\n    closePopover() {\n      if (this.isOpen) {\n        this.onClose.emit();\n        this.isOpen = false;\n        this._onOpenStateChanged(this.isOpen);\n        this.handleOnTouched();\n      }\n    }\n    /** @hidden */\n    setInvalidDateInputHandler(isInvalid) {\n      this._isInvalidDateInput = isInvalid;\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetRef.detectChanges();\n    }\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms\n     */\n    writeValue(selected) {\n      this.date = this._parseDate(selected);\n      this._isInvalidDateInput = !this._isModelValid(this.date);\n      if (this.isCurrentModelValid()) {\n        this._setTempDateTime();\n        this._refreshCurrentlyDisplayedCalendarDate(this.date);\n      }\n      this._setInput(this.date);\n    }\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected date changed.\n     * If invalid time model is detected, it takes time model data from TimeComponent.\n     */\n    handleDateChange(date) {\n      this._tempDate = date;\n      if (!this.showFooter) {\n        this.submit();\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered by events from time component, when there is selected time changed\n     */\n    handleTimeChange(time) {\n      this._tempTime = time;\n      if (!this.showFooter) {\n        this.submit();\n      }\n    }\n    /**\n     * @hidden\n     * Method that is triggered when 'OK' button is pressed.\n     */\n    submit() {\n      // marking date & time as not null, errors will be caught below\n      const currentDate = this._tempDate;\n      const currentTime = this._tempTime;\n      try {\n        this.date = this._dateTimeAdapter.setTime(currentDate, this._dateTimeAdapter.getHours(currentTime), this._dateTimeAdapter.getMinutes(currentTime), this._dateTimeAdapter.getSeconds(currentTime));\n      } catch {\n        this.date = null;\n      }\n      this._isInvalidDateInput = !this.isCurrentModelValid();\n      this._setInput(this.date);\n      this.onChange(this.date);\n      if (this.showFooter) {\n        this.closePopover();\n        this._changeDetRef.detectChanges();\n      }\n    }\n    /**\n     * @hidden\n     * Function that is called when 'Cancel' button is pressed.\n     */\n    cancel() {\n      this._tempDate = this.date;\n      this._tempTime = this.date;\n      this.closePopover();\n    }\n    /**\n     * @hidden\n     * Looks like no one uses it. Should be removed?\n     */\n    focusArrowLeft() {\n      if (this._elRef.nativeElement.querySelector('#' + this._calendarComponent.id + '-left-arrow')) {\n        this._elRef.nativeElement.querySelector('#' + this._calendarComponent.id + '-left-arrow').focus();\n      }\n    }\n    /**\n     * @hidden\n     * Method, which is responsible for transforming string to datetime, depending on type or\n     * validation the results are different. It also changes to state of _isInvalidDateInput.\n     */\n    handleInputChange(inputStr, isTypeEvent) {\n      if (isTypeEvent && this.processInputOnBlur || !isTypeEvent && !this.processInputOnBlur) {\n        // if processInputOnBlur === true, ignore type event\n        // if processInputOnBlur === false, ignore blur/enter event\n        return;\n      }\n      this._inputFieldDate = inputStr ?? '';\n      if (!inputStr) {\n        this._isInvalidDateInput = !this.allowNull;\n        this.date = null;\n        this.onChange(null);\n        return;\n      }\n      this.date = this._parseDate(inputStr);\n      this._isInvalidDateInput = !this._isModelValid(this.date);\n      if (!this._isInvalidDateInput) {\n        this._setTempDateTime();\n        this._refreshCurrentlyDisplayedCalendarDate(this.date);\n      }\n      this.onChange(this.date);\n    }\n    /** @hidden */\n    _changeMessageVisibility() {\n      if (this.isOpen) {\n        this._popoverFormMessage.hide();\n      } else {\n        this._popoverFormMessage.show();\n      }\n    }\n    /** @hidden */\n    _onOpenStateChanged(isOpen) {\n      this.isOpenChange.emit(isOpen);\n      this._changeMessageVisibility();\n      // focus input control every time popup is closed\n      if (!isOpen && this._inputElement) {\n        this._inputElement.nativeElement.focus({\n          preventScroll: this.preventScrollOnFocus\n        });\n      }\n      // focus calendar cell on opening\n      if (isOpen && this._calendarComponent) {\n        this._calendarComponent.initialFocus();\n      }\n    }\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    isCurrentModelValid() {\n      return this._isModelValid(this.date);\n    }\n    /** Method that provides information if FdDateTime passed as arg has properly types and is valid */\n    _isModelValid(date) {\n      return date === null && this.allowNull || this._dateTimeAdapter.isValid(date);\n    }\n    /** @hidden */\n    _setInput(dateTime) {\n      this._inputFieldDate = dateTime ? this._formatDateTime(dateTime) : '';\n      this._changeDetRef.detectChanges();\n    }\n    /** @hidden */\n    _refreshCurrentlyDisplayedCalendarDate(date) {\n      if (this._calendarComponent) {\n        this._calendarComponent.setCurrentlyDisplayed(date);\n      }\n    }\n    /**\n     * @hidden\n     * Format date time entity.\n     */\n    _formatDateTime(dateTime) {\n      const formattedDate = this._dateTimeAdapter.format(dateTime, this._dateTimeFormats.display.dateTimeInput);\n      return formattedDate || '';\n    }\n    /** @hidden */\n    _InitialiseVariablesInMessageService() {\n      this._popoverFormMessage.init(this._inputGroupElement);\n      this._popoverFormMessage.message = this._message ?? '';\n      this._popoverFormMessage.triggers = this._messageTriggers;\n      this._popoverFormMessage.messageType = this._state;\n    }\n    /** @hidden */\n    _parseDate(date) {\n      return this._dateTimeAdapter.parse(date, this._dateTimeFormats.parse.dateInput);\n    }\n    /** @hidden */\n    _setTempDateTime() {\n      this._tempDate = this.date;\n      this._tempTime = this.date;\n    }\n    /** @hidden */\n    _calculateTimeOptions() {\n      const format = this._dateTimeFormats.display.dateTimeInput;\n      // default meridian option based on format option\n      this._meridian = this.meridian != null ? this.meridian : this._dateTimeAdapter.isTimeFormatIncludesDayPeriod(format);\n      // default seconds option based on format option\n      this._displaySeconds = this.displaySeconds != null ? this.displaySeconds : this._dateTimeAdapter.isTimeFormatIncludesSeconds(format);\n      // default minutes option based on format option\n      this._displayMinutes = this.displayMinutes != null ? this.displayMinutes : this._dateTimeAdapter.isTimeFormatIncludesMinutes(format);\n      // default hours option based on format option\n      this._displayHours = this.displayHours != null ? this.displayHours : this._dateTimeAdapter.isTimeFormatIncludesHours(format);\n    }\n  }\n  DatetimePickerComponent.ɵfac = function DatetimePickerComponent_Factory(t) {\n    return new (t || DatetimePickerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DatetimeAdapter, 8), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS, 8), i0.ɵɵdirectiveInject(i2.PopoverFormMessageService));\n  };\n  DatetimePickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DatetimePickerComponent,\n    selectors: [[\"fd-datetime-picker\"]],\n    viewQuery: function DatetimePickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CalendarComponent, 5);\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n        i0.ɵɵviewQuery(InputGroupInputDirective, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._calendarComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputGroupElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      placement: \"placement\",\n      appendTo: \"appendTo\",\n      disabled: \"disabled\",\n      inputId: \"inputId\",\n      required: \"required\",\n      meridian: \"meridian\",\n      displaySeconds: \"displaySeconds\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      message: \"message\",\n      messageTriggers: \"messageTriggers\",\n      displayMinutes: \"displayMinutes\",\n      displayHours: \"displayHours\",\n      useValidation: \"useValidation\",\n      date: \"date\",\n      isOpen: \"isOpen\",\n      startingDayOfWeek: \"startingDayOfWeek\",\n      activeView: \"activeView\",\n      datetimeInputLabel: \"datetimeInputLabel\",\n      displayDatetimeToggleLabel: \"displayDatetimeToggleLabel\",\n      displayTypeDateLabel: \"displayTypeDateLabel\",\n      displayTypeTimeLabel: \"displayTypeTimeLabel\",\n      allowNull: \"allowNull\",\n      keepTwoDigitsTime: \"keepTwoDigitsTime\",\n      state: \"state\",\n      buttonFocusable: \"buttonFocusable\",\n      specialDaysRules: \"specialDaysRules\",\n      yearGrid: \"yearGrid\",\n      aggregatedYearGrid: \"aggregatedYearGrid\",\n      markWeekends: \"markWeekends\",\n      spinnerButtons: \"spinnerButtons\",\n      showWeekNumbers: \"showWeekNumbers\",\n      showFooter: \"showFooter\",\n      processInputOnBlur: \"processInputOnBlur\",\n      preventScrollOnFocus: \"preventScrollOnFocus\",\n      okLabel: \"okLabel\",\n      cancelLabel: \"cancelLabel\",\n      disableFunction: \"disableFunction\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\",\n      activeViewChange: \"activeViewChange\",\n      dateChange: \"dateChange\",\n      calendarChange: \"calendarChange\",\n      timeChange: \"timeChange\",\n      onClose: \"onClose\",\n      touched: \"touched\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DatetimePickerComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DatetimePickerComponent),\n      multi: true\n    }, registerFormItemControl(DatetimePickerComponent), PopoverFormMessageService, PopoverService]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 24,\n    vars: 55,\n    consts: [[1, \"fd-datetime\"], [3, \"isOpen\", \"focusTrapped\", \"focusAutoCapture\", \"triggers\", \"disabled\", \"placement\", \"appendTo\", \"isOpenChange\"], [\"glyph\", \"date-time\", 3, \"state\", \"disabled\", \"isControl\", \"button\", \"buttonFocusable\", \"isExpanded\", \"glyphAriaLabel\", \"iconTitle\", \"addOnButtonClicked\"], [\"inputGroupComponent\", \"\"], [\"type\", \"text\", \"fd-input-group-input\", \"\", 1, \"fd-input\", 3, \"placeholder\", \"disabled\", \"ngModel\", \"keyup.enter\", \"ngModelChange\", \"blur\"], [\"aria-labelledby\", \"fd-form-message\"], [1, \"fd-datetime__wrapper\"], [\"id\", \"fd-form-message\", 3, \"embedded\", \"type\", 4, \"ngIf\"], [1, \"fd-datetime__display-type-switcher\"], [3, \"ngModel\", \"ngModelChange\"], [\"fd-button\", \"\", \"value\", \"date\", 3, \"label\"], [\"fd-button\", \"\", \"value\", \"time\", 3, \"label\"], [1, \"fd-datetime__container\"], [\"calType\", \"single\", 3, \"activeView\", \"disableFunction\", \"selectedDate\", \"escapeFocusFunction\", \"markWeekends\", \"specialDaysRules\", \"showWeekNumbers\", \"aggregatedYearGrid\", \"yearGrid\", \"startingDayOfWeek\", \"activeViewChange\", \"selectedDateChange\", \"isValidDateChange\"], [1, \"fd-datetime__separator\"], [3, \"fd-datetime__active-display-type\", \"disabled\", \"elementsAtOnce\", \"keepTwoDigits\", \"ngModel\", \"spinnerButtons\", \"meridian\", \"displaySeconds\", \"displayMinutes\", \"displayHours\", \"ngModelChange\", 4, \"ngIf\"], [\"fd-popover-body-footer\", \"\", 4, \"ngIf\"], [\"id\", \"fd-form-message\", 3, \"embedded\", \"type\"], [3, \"disabled\", \"elementsAtOnce\", \"keepTwoDigits\", \"ngModel\", \"spinnerButtons\", \"meridian\", \"displaySeconds\", \"displayMinutes\", \"displayHours\", \"ngModelChange\"], [\"fd-popover-body-footer\", \"\"], [\"fd-bar\", \"\", \"barDesign\", \"footer\"], [\"fd-bar-right\", \"\"], [\"fd-button\", \"\", \"fdType\", \"emphasized\", 3, \"label\", \"ariaLabel\", \"click\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", 3, \"label\", \"ariaLabel\", \"click\"]],\n    template: function DatetimePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"fd-popover\", 1);\n        i0.ɵɵlistener(\"isOpenChange\", function DatetimePickerComponent_Template_fd_popover_isOpenChange_1_listener($event) {\n          return ctx.isOpen = $event;\n        })(\"isOpenChange\", function DatetimePickerComponent_Template_fd_popover_isOpenChange_1_listener($event) {\n          return ctx._onOpenStateChanged($event);\n        });\n        i0.ɵɵelementStart(2, \"fd-popover-control\")(3, \"fd-input-group\", 2, 3);\n        i0.ɵɵlistener(\"addOnButtonClicked\", function DatetimePickerComponent_Template_fd_input_group_addOnButtonClicked_3_listener() {\n          return ctx.togglePopover();\n        });\n        i0.ɵɵpipe(5, \"fdTranslate\");\n        i0.ɵɵpipe(6, \"fdTranslate\");\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"keyup.enter\", function DatetimePickerComponent_Template_input_keyup_enter_7_listener($event) {\n          return ctx.handleInputChange($event.target.value, false);\n        })(\"ngModelChange\", function DatetimePickerComponent_Template_input_ngModelChange_7_listener($event) {\n          return ctx.handleInputChange($event, true);\n        })(\"blur\", function DatetimePickerComponent_Template_input_blur_7_listener($event) {\n          return ctx.handleOnTouched($event);\n        });\n        i0.ɵɵpipe(8, \"fdTranslate\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"fd-popover-body\", 5)(10, \"div\", 6);\n        i0.ɵɵtemplate(11, DatetimePickerComponent_fd_form_message_11_Template, 2, 3, \"fd-form-message\", 7);\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"fd-segmented-button\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function DatetimePickerComponent_Template_fd_segmented_button_ngModelChange_13_listener($event) {\n          return ctx._displayType = $event;\n        });\n        i0.ɵɵelement(14, \"button\", 10);\n        i0.ɵɵpipe(15, \"fdTranslate\");\n        i0.ɵɵelement(16, \"button\", 11);\n        i0.ɵɵpipe(17, \"fdTranslate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵprojection(18);\n        i0.ɵɵelementStart(19, \"div\", 12)(20, \"fd-calendar\", 13);\n        i0.ɵɵlistener(\"activeViewChange\", function DatetimePickerComponent_Template_fd_calendar_activeViewChange_20_listener($event) {\n          return ctx.handleCalendarActiveViewChange($event);\n        })(\"selectedDateChange\", function DatetimePickerComponent_Template_fd_calendar_selectedDateChange_20_listener($event) {\n          return ctx.handleDateChange($event);\n        })(\"isValidDateChange\", function DatetimePickerComponent_Template_fd_calendar_isValidDateChange_20_listener($event) {\n          return ctx.setInvalidDateInputHandler($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"div\", 14);\n        i0.ɵɵtemplate(22, DatetimePickerComponent_fd_time_22_Template, 1, 11, \"fd-time\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, DatetimePickerComponent_div_23_Template, 11, 12, \"div\", 16);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"isOpen\", ctx.isOpen)(\"focusTrapped\", true)(\"focusAutoCapture\", false)(\"triggers\", i0.ɵɵpureFunction0(54, _c1))(\"disabled\", ctx.disabled)(\"placement\", ctx.placement)(\"appendTo\", ctx.appendTo);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"state\", ctx.state)(\"disabled\", ctx.disabled)(\"isControl\", true)(\"button\", true)(\"buttonFocusable\", ctx.buttonFocusable)(\"isExpanded\", ctx.isOpen)(\"glyphAriaLabel\", ctx.displayDatetimeToggleLabel || i0.ɵɵpipeBind1(5, 44, \"coreDatetimePicker.displayDatetimeToggleLabel\"))(\"iconTitle\", ctx.displayDatetimeToggleLabel || i0.ɵɵpipeBind1(6, 46, \"coreDatetimePicker.displayDatetimeToggleLabel\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"placeholder\", ctx.placeholder)(\"disabled\", ctx.disabled)(\"ngModel\", ctx._inputFieldDate);\n        i0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-label\", ctx.datetimeInputLabel || i0.ɵɵpipeBind1(8, 48, \"coreDatetimePicker.datetimeInputLabel\"))(\"id\", ctx.inputId)(\"aria-required\", ctx.required);\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"display\", \"block\");\n        i0.ɵɵattribute(\"aria-expanded\", ctx.isOpen)(\"aria-hidden\", !ctx.isOpen);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx._message);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx._displayType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"label\", ctx.displayTypeDateLabel || i0.ɵɵpipeBind1(15, 50, \"coreDatetimePicker.displayTypeDateLabel\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"label\", ctx.displayTypeTimeLabel || i0.ɵɵpipeBind1(17, 52, \"coreDatetimePicker.displayTypeTimeLabel\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"fd-datetime__active-display-type\", ctx._displayType === \"date\");\n        i0.ɵɵproperty(\"activeView\", ctx.activeView)(\"disableFunction\", ctx.disableFunction || null)(\"selectedDate\", ctx._tempDate)(\"escapeFocusFunction\", null)(\"markWeekends\", ctx.markWeekends)(\"specialDaysRules\", ctx.specialDaysRules)(\"showWeekNumbers\", ctx.showWeekNumbers)(\"aggregatedYearGrid\", ctx.aggregatedYearGrid)(\"yearGrid\", ctx.yearGrid)(\"startingDayOfWeek\", ctx.startingDayOfWeek);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showFooter);\n      }\n    },\n    dependencies: [i3.NgIf, i4.PopoverControlComponent, i4.PopoverBodyComponent, i4.PopoverBodyFooterDirective, i4.PopoverComponent, i5.CalendarComponent, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.TimeComponent, i8.InputGroupComponent, i8.InputGroupInputDirective, i9.ButtonComponent, i10.BarComponent, i10.BarRightDirective, i10.BarElementDirective, i11.SegmentedButtonComponent, i2.FormMessageComponent, i12.FdTranslatePipe],\n    styles: [\".fd-datetime{display:block}.fd-datetime__wrapper{max-height:80vh;max-width:80vw}.fd-datetime__container{display:flex;align-items:center;justify-content:center;margin:0 16px}.fd-datetime__separator{background-color:#d3d3d3;width:1px;margin:42px 28px;align-self:stretch}.fd-datetime fd-time{width:auto}.fd-datetime__display-type-switcher{margin-top:1rem;display:none;width:100%;justify-content:center}@media (max-width: 960px){.fd-datetime__display-type-switcher{display:flex}.fd-datetime__wrapper{min-width:min(20rem,90vw)}.fd-datetime__container>*:not(.fd-datetime__active-display-type){display:none}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return DatetimePickerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedDateTimePickerContentDensityDirective = /*#__PURE__*/(() => {\n  class DeprecatedDateTimePickerContentDensityDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-datetime-picker');\n    }\n  }\n  DeprecatedDateTimePickerContentDensityDirective.ɵfac = function DeprecatedDateTimePickerContentDensityDirective_Factory(t) {\n    return new (t || DeprecatedDateTimePickerContentDensityDirective)();\n  };\n  DeprecatedDateTimePickerContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedDateTimePickerContentDensityDirective,\n    selectors: [[\"fd-datetime-picker\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedDateTimePickerContentDensityDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedDateTimePickerContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DatetimePickerModule = /*#__PURE__*/(() => {\n  class DatetimePickerModule {}\n  DatetimePickerModule.ɵfac = function DatetimePickerModule_Factory(t) {\n    return new (t || DatetimePickerModule)();\n  };\n  DatetimePickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DatetimePickerModule\n  });\n  DatetimePickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule, PopoverModule, CalendarModule, FormsModule, TimeModule, InputGroupModule, ButtonModule, I18nModule, BarModule, SegmentedButtonModule, FormMessageModule, ContentDensityModule, ContentDensityModule]\n  });\n  return DatetimePickerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DatetimePickerComponent, DatetimePickerModule, DeprecatedDateTimePickerContentDensityDirective };\n//# sourceMappingURL=fundamental-ngx-core-datetime-picker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}