{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { isDevMode, Injectable, EventEmitter, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, HostBinding, Output, ViewChild, ViewChildren, HostListener, forwardRef, Optional, Directive, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Subject, Subscription, combineLatest } from 'rxjs';\nimport { filter, tap, debounceTime, buffer, map, takeUntil } from 'rxjs/operators';\nimport { DOWN_ARROW, UP_ARROW, SPACE, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport * as i1$1 from '@fundamental-ngx/core/datetime';\nimport * as i3$1 from '@fundamental-ngx/cdk/utils';\nimport { resizeObservable, KeyUtil, PipeModule } from '@fundamental-ngx/cdk/utils';\nimport * as i3 from '@fundamental-ngx/core/carousel';\nimport { CarouselDirective, CarouselItemDirective, CarouselModule } from '@fundamental-ngx/core/carousel';\nimport * as i2 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i4 from '@fundamental-ngx/i18n';\nimport { I18nModule } from '@fundamental-ngx/i18n';\nimport * as i2$1 from '@fundamental-ngx/core/content-density';\nimport { contentDensityObserverProviders, DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\nimport { FormModule } from '@fundamental-ngx/core/form';\n\n/** Creates an error to be thrown when attempting to use an invalid date implementation. */\nconst _c0 = [\"indicator\"];\nfunction TimeColumnComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"keyup\", function TimeColumnComponent_button_3_Template_button_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.spinnerButtonKeyupHandle($event, true));\n    })(\"click\", function TimeColumnComponent_button_3_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.scrollUp($event));\n    });\n    i0.ɵɵpipe(1, \"fdTranslate\");\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"title\", (ctx_r0.timeConfig == null ? null : ctx_r0.timeConfig.decreaseLabel) || ctx_r0.internalTranslationConfig && i0.ɵɵpipeBind1(1, 2, ctx_r0.internalTranslationConfig.decreaseLabel))(\"ariaLabel\", (ctx_r0.timeConfig == null ? null : ctx_r0.timeConfig.decreaseLabel) || ctx_r0.internalTranslationConfig && i0.ɵɵpipeBind1(2, 4, ctx_r0.internalTranslationConfig.decreaseLabel));\n  }\n}\nfunction TimeColumnComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 11, 12)(2, \"span\", 13);\n    i0.ɵɵlistener(\"click\", function TimeColumnComponent_li_6_Template_span_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r9 = restoredCtx.index;\n      const _r10 = i0.ɵɵreference(1);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.pick(_r10, index_r9));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const row_r8 = ctx.$implicit;\n    const index_r9 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r1._createColumnItemIdByIndex(index_r9))(\"value\", row_r8);\n    i0.ɵɵattribute(\"data-displayed-value\", row_r8.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", row_r8.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", row_r8.label, \" \");\n  }\n}\nfunction TimeColumnComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.activeValue == null ? null : ctx_r3.activeValue.label, \" \");\n  }\n}\nfunction TimeColumnComponent_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"keyup\", function TimeColumnComponent_button_14_Template_button_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.spinnerButtonKeyupHandle($event));\n    })(\"click\", function TimeColumnComponent_button_14_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.scrollDown());\n    });\n    i0.ɵɵpipe(1, \"fdTranslate\");\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"title\", (ctx_r4.timeConfig == null ? null : ctx_r4.timeConfig.increaseLabel) || ctx_r4.internalTranslationConfig && i0.ɵɵpipeBind1(1, 2, ctx_r4.internalTranslationConfig.increaseLabel))(\"ariaLabel\", (ctx_r4.timeConfig == null ? null : ctx_r4.timeConfig.increaseLabel) || ctx_r4.internalTranslationConfig && i0.ɵɵpipeBind1(2, 4, ctx_r4.internalTranslationConfig.increaseLabel));\n  }\n}\nfunction TimeComponent_fd_time_column_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-time-column\", 5);\n    i0.ɵɵlistener(\"activeValueChange\", function TimeComponent_fd_time_column_4_Template_fd_time_column_activeValueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.handleMinuteChange($event.value.value));\n    })(\"activeStateChange\", function TimeComponent_fd_time_column_4_Template_fd_time_column_activeStateChange_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.changeActive(\"minute\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"active\", ctx_r0.isActive(\"minute\"))(\"rows\", ctx_r0.minuteViewItems)(\"offset\", ctx_r0.offset)(\"elementsAtOnce\", ctx_r0.elementsAtOnce)(\"activeValue\", ctx_r0.activeMinuteViewItem)(\"timeConfig\", ctx_r0.getMinutesConfig())(\"spinners\", ctx_r0.spinnerButtons);\n  }\n}\nfunction TimeComponent_fd_time_column_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-time-column\", 6);\n    i0.ɵɵlistener(\"activeValueChange\", function TimeComponent_fd_time_column_5_Template_fd_time_column_activeValueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.handleSecondChange($event.value.value));\n    })(\"activeStateChange\", function TimeComponent_fd_time_column_5_Template_fd_time_column_activeStateChange_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.changeActive(\"second\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"active\", ctx_r1.isActive(\"second\"))(\"rows\", ctx_r1.secondViewItems)(\"offset\", ctx_r1.offset)(\"elementsAtOnce\", ctx_r1.elementsAtOnce)(\"activeValue\", ctx_r1.activeSecondViewItem)(\"timeConfig\", ctx_r1.getSecondsConfig())(\"spinners\", ctx_r1.spinnerButtons);\n  }\n}\nfunction TimeComponent_fd_time_column_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-time-column\", 7);\n    i0.ɵɵlistener(\"activeValueChange\", function TimeComponent_fd_time_column_6_Template_fd_time_column_activeValueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.handleMeridianChange($event.value.value));\n    })(\"activeStateChange\", function TimeComponent_fd_time_column_6_Template_fd_time_column_activeStateChange_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.changeActive(\"meridian\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"active\", ctx_r2.isActive(\"meridian\"))(\"rows\", ctx_r2.meridianViewItems)(\"activeValue\", ctx_r2.activeMeridianViewItem)(\"offset\", 0)(\"elementsAtOnce\", ctx_r2.elementsAtOnce)(\"timeConfig\", ctx_r2.getPeriodConfig())(\"meridian\", true)(\"spinners\", ctx_r2.spinnerButtons);\n  }\n}\nfunction createMissingDateImplementationError(provider) {\n  return Error(`FdTime: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: FdDatetimeModule, or provide a ` + `custom implementation.`);\n}\n\n/**\n * @deprecated use i18n capabilities instead\n * Provides i18n support for labels and meridian naming inside the time component.\n */\nlet TimeI18n = /*#__PURE__*/(() => {\n  class TimeI18n {\n    /** @hidden */\n    constructor() {\n      /** Aria label for entire component */\n      this.componentAriaName = 'Time picker';\n      /** Aria label for the 'increase hours' button */\n      this.increaseHoursLabel = 'Increase hours';\n      /** label for the 'hours' column */\n      this.hoursLabel = 'Hrs';\n      /** Aria label for the 'decrease hours' button */\n      this.decreaseHoursLabel = 'Decrease hours';\n      /** Aria label for the 'increase minutes' button */\n      this.increaseMinutesLabel = 'Increase minutes';\n      /** label for the 'minutes' column */\n      this.minutesLabel = 'Min';\n      /** Aria label for the 'decrease minutes' button */\n      this.decreaseMinutesLabel = 'Decrease minutes';\n      /** Aria label for the 'increase seconds' button */\n      this.increaseSecondsLabel = 'Increase seconds';\n      /** label for the 'seconds' column */\n      this.secondsLabel = 'Sec';\n      /** Aria label for the 'decrease seconds' button */\n      this.decreaseSecondsLabel = 'Decrease seconds';\n      /** Aria label for the 'increase period' button */\n      this.increasePeriodLabel = 'Increase period';\n      /** label for the 'period' column */\n      this.periodLabel = 'Period';\n      /** Aria label for the 'decrease period' button */\n      this.decreasePeriodLabel = 'Decrease period';\n      /**\n       * Instruction how to navigate between options\n       * in the time column list and to switch between time columns\n       */\n      this.navigationInstruction = 'To move between items in this list, press top arrow or bottom arrow. To switch between lists press left arrow or right arrow.';\n      if (isDevMode()) {\n        console.warn('TimeI18n is deprecated and will furtherly be removed. Use i18n capabilities instead.');\n      }\n    }\n  }\n  TimeI18n.ɵfac = function TimeI18n_Factory(t) {\n    return new (t || TimeI18n)();\n  };\n  TimeI18n.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TimeI18n,\n    factory: TimeI18n.ɵfac\n  });\n  return TimeI18n;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet timeColumnUniqueId = 0;\nlet TimeColumnComponent = /*#__PURE__*/(() => {\n  class TimeColumnComponent {\n    /** Currently chosen, centered time column item */\n    set activeValue(activeItem) {\n      if (!activeItem) {\n        // omitting \"null\" and \"undefined\"\n        return;\n      }\n      if (this._viewInit$.value && this._activeValue !== activeItem) {\n        this._pickTime(this._getItem(activeItem), false);\n      }\n      this._activeValue = activeItem;\n    }\n    get activeValue() {\n      return this._activeValue;\n    }\n    /** Defines if column is active, it has impact on behavior and visual  */\n    set active(value) {\n      this._active = value;\n      if (value && this._viewInit$.value) {\n        this._changeDetRef.detectChanges();\n        this._pickTime(this._getItem(this.activeValue), false);\n        this._focusIndicator();\n      }\n    }\n    get active() {\n      return this._active;\n    }\n    /**\n     * Offset for carousel directive, active item is always the first one.\n     * In case of having more items in carousel than 1, middle element should be active\n     */\n    set offset(value) {\n      this._offset$.next(value);\n    }\n    get offset() {\n      return this._offset$.value;\n    }\n    /**\n     * Quantity of the elements to be shown at the same time in column\n     */\n    set elementsAtOnce(value) {\n      this._elementsAtOnce$.next(value);\n    }\n    /** @hidden */\n    get currentIndicatorId() {\n      return this.id + '-current-indicator';\n    }\n    /** @hidden */\n    get currentIndicatorValueId() {\n      return this.currentIndicatorId + '-value';\n    }\n    /** @hidden */\n    constructor(_changeDetRef, _elmRef) {\n      this._changeDetRef = _changeDetRef;\n      this._elmRef = _elmRef;\n      /** items in row */\n      this.rows = [];\n      /**\n       * @Input When set to false, hides the buttons that increment\n       * and decrement the corresponding columns.\n       */\n      this.spinners = true;\n      /** Whether time column is meridian */\n      this.meridian = false;\n      /** Id of column, initiated with some default value */\n      this.id = 'fd-time-column-' + timeColumnUniqueId++;\n      /** Event emitted, when active item is changed, by carousel */\n      this.activeValueChange = new EventEmitter();\n      /** Event emitted, when certain column is activated */\n      this.activeStateChange = new EventEmitter();\n      /**\n       * Time to wait in milliseconds after the last keydown before\n       * focusing or selecting option based on numeric/alpha keys.\n       * @hidden\n       */\n      this.typeaheadDebounceInterval = 750;\n      /** @hidden */\n      this.internalTranslationConfig = null;\n      /** @hidden */\n      this._elementsAtOnce$ = new BehaviorSubject(7);\n      /** @hidden */\n      this._offset$ = new BehaviorSubject(3);\n      /** @hidden */\n      this._active = false;\n      /** @hidden */\n      this._queryKeyDownEvent = new Subject();\n      /** @hidden */\n      this._isDragging = false;\n      /** @hidden */\n      this._viewInit$ = new BehaviorSubject(false);\n      /** @hidden */\n      this._resize$ = new BehaviorSubject(false);\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden\n       * logs numeric key inputs to set time using keyboard input.\n       */\n      this._keyLog = [];\n      this._subscriptions.add(combineLatest([this._viewInit$, this._elementsAtOnce$, this._offset$, this._resize$]).pipe(filter(([viewInit]) => viewInit), tap(([, elementsAtOnce, offset]) => {\n        const averageHeight = this.items.toArray().reduce((acc, next) => acc + next.getHeight(), 0) / this.items.length;\n        this.wrapperHeight = averageHeight * elementsAtOnce;\n        const visibleButNotSelectedElements = Math.floor(elementsAtOnce / 2);\n        if (offset === 0) {\n          this.items.first.element.style.marginTop = `${visibleButNotSelectedElements * averageHeight}px`;\n          this.items.last.element.style.marginBottom = `${visibleButNotSelectedElements * averageHeight}px`;\n        }\n        if (this.activeValue) {\n          this._pickTime(this._getItem(this.activeValue), false);\n        }\n        this._changeDetRef.detectChanges();\n      })).subscribe());\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._subscriptions.add(this._elementsAtOnce$.pipe(tap(() => this._setUpCarouselConfiguration())).subscribe());\n      this._setUpQuerySubscription();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._subscriptions.add(resizeObservable(this._elmRef.nativeElement).subscribe(() => {\n        this._resize$.next(true);\n      }));\n      this._viewInit$.next(true);\n    }\n    /** @hidde */\n    ngOnChanges(changes) {\n      if (changes.columnTranslationsPreset) {\n        this._updateInternalTranslationConfig();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n    /** @hidden */\n    onItemClick() {\n      this.activeStateChange.emit();\n    }\n    /** @hidden */\n    keyDownHandler(event) {\n      if (KeyUtil.isKeyCode(event, DOWN_ARROW)) {\n        this.scrollDown();\n        event.preventDefault();\n      } else if (KeyUtil.isKeyCode(event, UP_ARROW)) {\n        this.scrollUp();\n        event.preventDefault();\n      } else if (KeyUtil.isKeyType(event, 'numeric')) {\n        this._numericKeyInputHandler(event);\n      } else if (KeyUtil.isKeyType(event, 'alphabetical')) {\n        this._alphaKeyInputHandler(event);\n      }\n    }\n    /** @hidden */\n    mouseScrollHandler(event) {\n      event.preventDefault();\n      if (this._active) {\n        event.deltaY > 0 ? this.scrollDown() : this.scrollUp();\n      }\n    }\n    /** @hidden */\n    spinnerButtonKeyupHandle(event, upButton) {\n      if (KeyUtil.isKeyCode(event, SPACE)) {\n        if (upButton) {\n          this.scrollUp();\n        } else {\n          this.scrollDown();\n        }\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n    /** @hidden */\n    setValueOfActive() {\n      if (this._active) {\n        this._setUpInitialValue();\n      }\n    }\n    /** It prevents from accidentally change the item by click event */\n    handleDrag(isDragging) {\n      this._isDragging = isDragging;\n    }\n    /** Method that handles active item change */\n    activeChangedHandle(output) {\n      const array = this.items.toArray();\n      let index = array.findIndex(__item => __item === output.item) + this.offset;\n      if (index >= array.length) {\n        index = index - array.length;\n      }\n      const _item = array[index];\n      this._activeValue = _item.value;\n      this.activeValueChange.emit({\n        value: this._activeValue,\n        after: output.after\n      });\n      this._activeCarouselItem = _item;\n    }\n    /** Method that changes active item and triggers carousel scroll */\n    pick(item, index) {\n      const currentIndex = this.items.toArray().findIndex(_item => _item === this._activeCarouselItem);\n      /** To prevent from switching time, when it's being dragged */\n      if (!this._isDragging) {\n        this._pickTime(item, true, true, currentIndex < index);\n      }\n    }\n    /** Method triggered by keyboard, or increment button */\n    scrollUp(event) {\n      /** Keyboard events in reactive forms, shouldn't trigger this method */\n      if (event && !event.clientX) {\n        return;\n      }\n      let index = this.items.toArray().findIndex(_item => _item === this._activeCarouselItem);\n      if (index > 0) {\n        index--;\n      } else {\n        index = this.rows.length - 1;\n      }\n      this._pickTime(this.items.toArray()[index], true, true, false);\n    }\n    /** Method triggered by keyboard, or decrement button */\n    scrollDown() {\n      let index = this.items.toArray().findIndex(_item => _item === this._activeCarouselItem);\n      if (index < this.rows.length - 1) {\n        index++;\n      } else {\n        index = 0;\n      }\n      this._pickTime(this.items.toArray()[index], true, true, true);\n    }\n    /** Focus on column */\n    focus() {\n      this.indicator?.nativeElement.focus();\n    }\n    /**\n     * Create id for column item\n     * @param index column item index\n     * @returns column item id\n     * @hidden\n     */\n    _createColumnItemIdByIndex(index) {\n      return this.id + index;\n    }\n    /**\n     * On focus callback\n     * @hidden\n     */\n    _onFocusIndicator() {\n      this.activeStateChange.emit();\n    }\n    /** @hidden\n     * handles alphabetical key inputs to set period.\n     */\n    _alphaKeyInputHandler(event) {\n      if (event.key.toLowerCase() === 'a') {\n        this._pickTimeOnValue('AM');\n      } else if (event.key.toLowerCase() === 'p') {\n        this._pickTimeOnValue('PM');\n      }\n    }\n    /** @hidden\n     * handles numeric key inputs to set time.\n     */\n    _numericKeyInputHandler(event) {\n      const lastItemValue = this.items.last.value.value; // value of last item in column\n      this._numericInputTimeout && clearTimeout(this._numericInputTimeout);\n      this._keyLog.push(event.key);\n      const inputValue = parseInt(this._keyLog.join(''), 10); // converts keyLog elements to a number\n      if (inputValue * 10 > lastItemValue || this._keyLog.length === lastItemValue.toString().length) {\n        this._pickTimeOnValue(inputValue);\n      } else {\n        this._numericInputTimeout = setTimeout(() => {\n          this._pickTimeOnValue(inputValue);\n        }, 500);\n      }\n    }\n    /** @hidden\n     * set the time for given item value. used by _numericKeyInputHandler.\n     */\n    _pickTimeOnValue(value) {\n      this._pickTime(this.items.find(item => item.value.value === value), false, true, false);\n      this._keyLog = []; // clear key log\n    }\n    /**\n     * Method triggered by keyboard, or decrement button\n     * Args:\n     * item => picked carousel item, that should be centered\n     * smooth => defines if transition time should be included in transform\n     * emitEvent => defines if EventEmitter should be triggered by this change, set to false, when changed from outside\n     * after => Defines if value was incremented/decremented, needed for hours to trigger AM/PM change\n     * @hidden\n     */\n    _pickTime(item, smooth, emitEvent, after) {\n      if (!item) {\n        return;\n      }\n      if (this.active) {\n        this._triggerCarousel(item, smooth);\n      }\n      this._activeCarouselItem = item;\n      this._activeValue = item.value;\n      if (emitEvent) {\n        this.activeValueChange.emit({\n          value: item.value,\n          after\n        });\n      }\n    }\n    /**\n     * Returns item with passed value\n     * @hidden\n     */\n    _getItem(_item) {\n      return this.items.find(item => item.value === _item);\n    }\n    /** @hidden */\n    _triggerCarousel(item, smooth) {\n      const array = this.items.toArray();\n      let index = array.findIndex(_item => _item === item) - this.offset;\n      if (index < 0) {\n        index = array.length + index;\n      }\n      this.carousel.goToItem(array[index], smooth);\n    }\n    /**\n     * Focus current indicator, which allows to handle keydown events inside column\n     * @hidden\n     */\n    _focusIndicator() {\n      document.getElementById(this.currentIndicatorId)?.focus();\n    }\n    /** @hidden */\n    _getValue(value) {\n      if (!isNaN(Number(value))) {\n        return Number(value);\n      } else {\n        return value;\n      }\n    }\n    /** @hidden */\n    _setUpQuerySubscription() {\n      const trigger = this._queryKeyDownEvent.pipe(debounceTime(this.typeaheadDebounceInterval));\n      this._subscriptions.add(this._queryKeyDownEvent.pipe(buffer(trigger), map(keys => keys.join('')), map(value => this._getValue(value)), map(value => this._getItem(value))).subscribe(item => this._pickTime(item, false, true)));\n    }\n    /** @hidden */\n    _setUpCarouselConfiguration() {\n      const config = {\n        gestureSupport: true,\n        vertical: true,\n        elementsAtOnce: this._elementsAtOnce$.value,\n        transition: '150ms'\n      };\n      if (!this.meridian) {\n        config.infinite = true;\n      }\n      this.config = config;\n    }\n    /** @hidden */\n    _setUpInitialValue() {\n      if (!this._activeValue) {\n        this._activeValue = this.items.first.value;\n      }\n      this._pickTime(this._getItem(this._activeValue), false);\n    }\n    /** @hidden */\n    _updateInternalTranslationConfig() {\n      switch (this.columnTranslationsPreset) {\n        case 'hours':\n          this.internalTranslationConfig = {\n            increaseLabel: 'coreTime.increaseHoursLabel',\n            label: 'coreTime.hoursLabel',\n            decreaseLabel: 'coreTime.decreaseHoursLabel',\n            navigationInstruction: 'coreTime.navigationInstruction'\n          };\n          break;\n        case 'minutes':\n          this.internalTranslationConfig = {\n            increaseLabel: 'coreTime.increaseMinutesLabel',\n            label: 'coreTime.minutesLabel',\n            decreaseLabel: 'coreTime.decreaseMinutesLabel',\n            navigationInstruction: 'coreTime.navigationInstruction'\n          };\n          break;\n        case 'seconds':\n          this.internalTranslationConfig = {\n            increaseLabel: 'coreTime.increaseSecondsLabel',\n            label: 'coreTime.secondsLabel',\n            decreaseLabel: 'coreTime.decreaseSecondsLabel',\n            navigationInstruction: 'coreTime.navigationInstruction'\n          };\n          break;\n        case 'period':\n          this.internalTranslationConfig = {\n            increaseLabel: 'coreTime.increasePeriodLabel',\n            label: 'coreTime.periodLabel',\n            decreaseLabel: 'coreTime.decreasePeriodLabel',\n            navigationInstruction: 'coreTime.navigationInstruction'\n          };\n          break;\n        default:\n          this.internalTranslationConfig = null;\n          break;\n      }\n      this._changeDetRef.markForCheck();\n    }\n  }\n  TimeColumnComponent.ɵfac = function TimeColumnComponent_Factory(t) {\n    return new (t || TimeColumnComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  TimeColumnComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TimeColumnComponent,\n    selectors: [[\"fd-time-column\"]],\n    viewQuery: function TimeColumnComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CarouselDirective, 5);\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n        i0.ɵɵviewQuery(CarouselItemDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.carousel = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.indicator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostAttrs: [1, \"fd-time__col\"],\n    hostVars: 2,\n    hostBindings: function TimeColumnComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TimeColumnComponent_click_HostBindingHandler() {\n          return ctx.onItemClick();\n        })(\"keydown\", function TimeColumnComponent_keydown_HostBindingHandler($event) {\n          return ctx.keyDownHandler($event);\n        })(\"wheel\", function TimeColumnComponent_wheel_HostBindingHandler($event) {\n          return ctx.mouseScrollHandler($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-time__col--period\", ctx.meridian);\n      }\n    },\n    inputs: {\n      rows: \"rows\",\n      spinners: \"spinners\",\n      activeValue: \"activeValue\",\n      active: \"active\",\n      meridian: \"meridian\",\n      id: \"id\",\n      timeConfig: \"timeConfig\",\n      columnTranslationsPreset: \"columnTranslationsPreset\",\n      offset: \"offset\",\n      elementsAtOnce: \"elementsAtOnce\"\n    },\n    outputs: {\n      activeValueChange: \"activeValueChange\",\n      activeStateChange: \"activeStateChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 15,\n    vars: 31,\n    consts: [[1, \"fd-time__slider-label\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"glyph\", \"navigation-up-arrow\", \"tabindex\", \"-1\", 3, \"title\", \"ariaLabel\", \"keyup\", \"click\", 4, \"ngIf\"], [1, \"fd-time__wrapper\"], [\"fdCarousel\", \"\", 1, \"fd-time__list\", 3, \"config\", \"click\", \"activeChange\", \"dragStateChange\"], [\"class\", \"fd-time__item\", \"fdCarouselItem\", \"\", 3, \"id\", \"value\", 4, \"ngFor\", \"ngForOf\"], [\"tabindex\", \"0\", \"role\", \"listbox\", 1, \"fd-time__current-indicator\", 3, \"focus\"], [\"indicator\", \"\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 1, \"fd-time-column-custom-hidden\"], [\"class\", \"fd-time__item fd-time__item--collapsed\", 4, \"ngIf\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"glyph\", \"navigation-down-arrow\", \"tabindex\", \"-1\", 3, \"title\", \"ariaLabel\", \"keyup\", \"click\", 4, \"ngIf\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"glyph\", \"navigation-up-arrow\", \"tabindex\", \"-1\", 3, \"title\", \"ariaLabel\", \"keyup\", \"click\"], [\"fdCarouselItem\", \"\", 1, \"fd-time__item\", 3, \"id\", \"value\"], [\"item\", \"fdCarouselItem\"], [\"role\", \"button\", 1, \"fd-time__unit\", 3, \"click\"], [1, \"fd-time__item\", \"fd-time__item--collapsed\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"glyph\", \"navigation-down-arrow\", \"tabindex\", \"-1\", 3, \"title\", \"ariaLabel\", \"keyup\", \"click\"]],\n    template: function TimeColumnComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r16 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"label\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"fdTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TimeColumnComponent_button_3_Template, 3, 6, \"button\", 1);\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"ul\", 3);\n        i0.ɵɵlistener(\"click\", function TimeColumnComponent_Template_ul_click_5_listener() {\n          i0.ɵɵrestoreView(_r16);\n          const _r2 = i0.ɵɵreference(8);\n          return i0.ɵɵresetView(_r2.focus());\n        })(\"activeChange\", function TimeColumnComponent_Template_ul_activeChange_5_listener($event) {\n          return ctx.activeChangedHandle($event);\n        })(\"dragStateChange\", function TimeColumnComponent_Template_ul_dragStateChange_5_listener($event) {\n          return ctx.handleDrag($event);\n        });\n        i0.ɵɵtemplate(6, TimeColumnComponent_li_6_Template, 4, 5, \"li\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5, 6);\n        i0.ɵɵlistener(\"focus\", function TimeColumnComponent_Template_div_focus_7_listener() {\n          return ctx._onFocusIndicator();\n        });\n        i0.ɵɵpipe(9, \"fdTranslate\");\n        i0.ɵɵelementStart(10, \"span\", 7);\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"fdTranslate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(13, TimeColumnComponent_span_13_Template, 2, 1, \"span\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, TimeColumnComponent_button_14_Template, 3, 6, \"button\", 9);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate((ctx.timeConfig == null ? null : ctx.timeConfig.label) || ctx.internalTranslationConfig && i0.ɵɵpipeBind1(2, 25, ctx.internalTranslationConfig.label));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.active && ctx.spinners);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"height\", ctx.active ? ctx.wrapperHeight : \"\", \"px\");\n        i0.ɵɵclassProp(\"fd-time__wrapper--active\", ctx.active)(\"fd-time__wrapper--meridian\", ctx.meridian);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"fd-time-column-custom-hidden\", !ctx.active);\n        i0.ɵɵproperty(\"config\", ctx.config);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.rows);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"fd-time-column-custom-hidden\", !ctx.active);\n        i0.ɵɵattribute(\"id\", ctx.currentIndicatorId)(\"aria-labelledby\", ctx.currentIndicatorValueId)(\"aria-description\", (ctx.timeConfig == null ? null : ctx.timeConfig.navigationInstruction) || ctx.internalTranslationConfig && i0.ɵɵpipeBind1(9, 27, ctx.internalTranslationConfig.navigationInstruction));\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"fd-time-column-custom-hidden\", ctx.active);\n        i0.ɵɵattribute(\"aria-hidden\", !ctx.active)(\"id\", ctx.currentIndicatorValueId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate2(\" \", ctx.activeValue == null ? null : ctx.activeValue.label, \" \", (ctx.timeConfig == null ? null : ctx.timeConfig.label) || ctx.internalTranslationConfig && i0.ɵɵpipeBind1(12, 29, ctx.internalTranslationConfig.label), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.active);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.active && ctx.spinners);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.ButtonComponent, i3.CarouselItemDirective, i3.CarouselDirective, i4.FdTranslatePipe],\n    styles: [\".fd-time__col .fd-carousel{transition:all .2s ease-in}.fd-time__list{overflow:visible}.fd-time-column-custom-hidden{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}.fd-time__current-indicator{pointer-events:none}.fd-time__current-indicator:focus{outline:none}.fd-time--compact .fd-time__wrapper--meridian .fd-time__item:last-child.fd-time__item--collapsed,.fd-time .fd-time__wrapper--meridian .fd-time__item:last-child.fd-time__item--collapsed{margin-bottom:0;margin-top:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TimeColumnComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TimeComponent = /*#__PURE__*/(() => {\n  class TimeComponent {\n    /** Offset */\n    get offset() {\n      return Math.floor(this.elementsAtOnce / 2);\n    }\n    /** Component aria-label */\n    get _componentAriaLabel() {\n      return this._timeI18nLabels?.componentAriaName;\n    }\n    /** @hidden */\n    constructor(_changeDetectorRef, _elementRef,\n    // Use @Optional to avoid angular injection error message and throw our own which is more precise one\n    _dateTimeAdapter, _contentDensityObserver, _rtlService, _timeI18nLabels) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._contentDensityObserver = _contentDensityObserver;\n      this._rtlService = _rtlService;\n      this._timeI18nLabels = _timeI18nLabels;\n      /**\n       * @Input When set to false, uses the 24 hour clock (hours ranging from 0 to 23)\n       * and does not display a period control.\n       */\n      this.meridian = false;\n      /**\n       *  @Input When set to false, does not set the input field to invalid state on invalid entry.\n       */\n      this.validate = true;\n      /**\n       * @Input when set to true, time inputs won't allow to have 1 digit\n       * for example 9 will become 09\n       * but 12 will be kept as 12.\n       */\n      this.keepTwoDigits = false;\n      /**\n       * @Input When set to false, hides the input for seconds.\n       */\n      this.displaySeconds = true;\n      /** @Input When set to false, hides the input for minutes. */\n      this.displayMinutes = true;\n      /**\n       * When set to false, hides the input for hours\n       */\n      this.displayHours = true;\n      /** @Input Defines if time component should be used in tablet mode */\n      this.tablet = false;\n      /** @Input Defines quantity of the elements, that are visible at the same time. Should be odd number */\n      this.elementsAtOnce = 7;\n      /** @Input Whether to show spinner buttons */\n      this.spinnerButtons = true;\n      /** Active column view to iterate with */\n      this.activeView = 'hour';\n      /**\n       * @hidden\n       * container for [0 - 23] hours\n       */\n      this.hourViewItems = [];\n      /**\n       * @hidden\n       * container for [0 - 59] minutes\n       */\n      this.minuteViewItems = [];\n      /**\n       * @hidden\n       * container for [0 - 59] seconds\n       */\n      this.secondViewItems = [];\n      /**\n       * @hidden\n       * container for [am, pm] meridian values\n       */\n      this.meridianViewItems = [];\n      /** @hidden */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n      if (!_dateTimeAdapter) {\n        throw createMissingDateImplementationError('DateTimeAdapter');\n      }\n      this.time = this._getDefaultValue();\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._setUpViewGrid();\n        this._changeDetectorRef.detectChanges();\n      });\n      this._setUpViewGrid();\n    }\n    /** @hidden\n     * Reacts only when there is meridian or time input change\n     */\n    ngOnChanges(changes) {\n      if (changes.meridian || changes.time) {\n        this._setUpViewGrid();\n      }\n      if (changes.elementsAtOnce && changes.elementsAtOnce.currentValue % 2 === 0) {\n        throw new Error('[elementsAtOnce] should be odd number');\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this.refreshColumns();\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetectorRef.detectChanges();\n    }\n    /** @hidden */\n    refreshColumns() {\n      this.columns.forEach(column => column.setValueOfActive());\n    }\n    /**\n     * @hidden\n     * Handles meridian change.\n     * This implicitly changes hours by +/- 12\n     */\n    handleMeridianChange(meridian) {\n      let hourOffset = meridian === \"AM\" /* Meridian.AM */ ? -12 : 12;\n      let currentHour = this._getModelHour();\n      if (currentHour > 12 && meridian === \"PM\" /* Meridian.PM */) {\n        currentHour -= 12;\n      } else if (currentHour === 12) {\n        currentHour = 0;\n      } else if (currentHour < 12 && meridian === \"AM\" /* Meridian.AM */) {\n        hourOffset = 0;\n      }\n      const newHour = Math.max(0, Math.min(23, currentHour + hourOffset));\n      this.handleHourChange(newHour);\n    }\n    /** @hidden */\n    handleSecondChange(second) {\n      this.time = this._dateTimeAdapter.setSeconds(this.time, second);\n      this._calculateActiveSecondViewItem();\n      this.onChange(this.time);\n    }\n    /** @hidden */\n    handleMinuteChange(minute) {\n      this.time = this._dateTimeAdapter.setMinutes(this.time, minute);\n      this._calculateActiveMinuteViewItem();\n      this.onChange(this.time);\n    }\n    /**\n     * @hidden\n     * Handles changes of displayed hour value from template.\n     */\n    handleHourChange(hour) {\n      this.time = this._dateTimeAdapter.setHours(this.time, hour);\n      this._calculateActiveHourViewItem();\n      if (this.meridian) {\n        this._calculateActiveMeridianViewItem();\n      }\n      this.onChange(this.time);\n    }\n    /** @hidden */\n    handleNextColumnFocus(column) {\n      const columns = this._getVisibleColumnsWithRtl();\n      let nextIndex = columns.indexOf(column) + 1;\n      if (nextIndex >= columns.length) {\n        nextIndex = 0;\n      }\n      this.changeActive(columns[nextIndex]);\n    }\n    /** @hidden */\n    handlePreviousColumnFocus(column) {\n      const columns = this._getVisibleColumnsWithRtl();\n      let nextIndex = columns.indexOf(column) - 1;\n      if (nextIndex < 0) {\n        nextIndex = columns.length - 1;\n      }\n      this.changeActive(columns[nextIndex]);\n    }\n    /** @hidden */\n    handleKeyDownEvent(event) {\n      if (KeyUtil.isKeyCode(event, LEFT_ARROW)) {\n        this.handlePreviousColumnFocus(this.activeView);\n        event.preventDefault();\n        this.focusActiveColumn();\n      } else if (KeyUtil.isKeyCode(event, RIGHT_ARROW)) {\n        this.handleNextColumnFocus(this.activeView);\n        event.preventDefault();\n        this.focusActiveColumn();\n      }\n    }\n    /** @hidden */\n    writeValue(time) {\n      if (!time || !this._dateTimeAdapter.isValid(time)) {\n        time = this._getDefaultValue();\n      }\n      this.time = time;\n      this._setUpActiveViewItems();\n      this._changeDetectorRef.detectChanges();\n    }\n    /** @hidden */\n    changeActive(view) {\n      this.activeView = view;\n      this._changeDetectorRef.detectChanges();\n    }\n    /** @hidden */\n    isActive(view) {\n      return this.activeView === view;\n    }\n    /** Configuration for hours column */\n    getHoursConfig() {\n      if (!this._timeI18nLabels) {\n        return;\n      }\n      return {\n        decreaseLabel: this._timeI18nLabels.decreaseHoursLabel,\n        increaseLabel: this._timeI18nLabels.increaseHoursLabel,\n        label: this._timeI18nLabels.hoursLabel,\n        navigationInstruction: this._timeI18nLabels.navigationInstruction\n      };\n    }\n    /** Configuration for minutes column */\n    getMinutesConfig() {\n      if (!this._timeI18nLabels) {\n        return;\n      }\n      return {\n        decreaseLabel: this._timeI18nLabels.decreaseMinutesLabel,\n        increaseLabel: this._timeI18nLabels.increaseMinutesLabel,\n        label: this._timeI18nLabels.minutesLabel,\n        navigationInstruction: this._timeI18nLabels.navigationInstruction\n      };\n    }\n    /** Configuration for seconds column */\n    getSecondsConfig() {\n      if (!this._timeI18nLabels) {\n        return;\n      }\n      return {\n        decreaseLabel: this._timeI18nLabels.decreaseSecondsLabel,\n        increaseLabel: this._timeI18nLabels.increaseSecondsLabel,\n        label: this._timeI18nLabels.secondsLabel,\n        navigationInstruction: this._timeI18nLabels.navigationInstruction\n      };\n    }\n    /** Configuration for period column */\n    getPeriodConfig() {\n      if (!this._timeI18nLabels) {\n        return;\n      }\n      return {\n        decreaseLabel: this._timeI18nLabels.decreasePeriodLabel,\n        increaseLabel: this._timeI18nLabels.increasePeriodLabel,\n        label: this._timeI18nLabels.periodLabel,\n        navigationInstruction: this._timeI18nLabels.navigationInstruction\n      };\n    }\n    /** @hidden */\n    focusActiveColumn() {\n      const column = this.columns.find(({\n        active\n      }) => active);\n      column?.focus();\n    }\n    /** @hidden */\n    _focusOut(event) {\n      if (!this._elementRef.nativeElement.contains(event.relatedTarget)) {\n        this.onTouched();\n      }\n    }\n    /**\n     * Get visible time columns\n     * @returns visible columns list @see {FdTimeActiveView[]}\n     */\n    _getVisibleColumns() {\n      const allOptions = [[this.displayHours, 'hour'], [this.displayMinutes, 'minute'], [this.displaySeconds, 'second'], [this.meridian, 'meridian']];\n      return allOptions.filter(([enabled]) => enabled).map(([, view]) => view);\n    }\n    /**\n     * Get visible columns taking into account RTL\n     * @returns visible columns list @see {FdTimeActiveView[]}\n     */\n    _getVisibleColumnsWithRtl() {\n      const columns = this._getVisibleColumns();\n      return this._rtlService?.rtl.value ? columns.reverse() : columns;\n    }\n    /** @hidden */\n    _setUpViewGrid() {\n      this._constructHourViewItems();\n      this._constructMinuteViewItems();\n      this._constructSecondViewItems();\n      this._constructMeridianViewItems();\n      // update reference to active view items\n      this._setUpActiveViewItems();\n    }\n    /** @hidden */\n    _setUpActiveViewItems() {\n      this._calculateActiveHourViewItem();\n      this._calculateActiveMinuteViewItem();\n      this._calculateActiveSecondViewItem();\n      this._calculateActiveMeridianViewItem();\n    }\n    /** @hidden */\n    _constructHourViewItems() {\n      this.hourViewItems = this._dateTimeAdapter.getHourNames({\n        meridian: this.meridian,\n        twoDigit: this.keepTwoDigits\n      }).map((name, hour) => ({\n        value: hour,\n        label: name\n      }));\n    }\n    /** @hidden */\n    _constructMinuteViewItems() {\n      this.minuteViewItems = this._dateTimeAdapter.getMinuteNames({\n        twoDigit: this.keepTwoDigits\n      }).map((name, minute) => ({\n        value: minute,\n        label: name\n      }));\n    }\n    /** @hidden */\n    _constructSecondViewItems() {\n      this.secondViewItems = this._dateTimeAdapter.getSecondNames({\n        twoDigit: this.keepTwoDigits\n      }).map((name, second) => ({\n        value: second,\n        label: name\n      }));\n    }\n    /** @hidden */\n    _constructMeridianViewItems() {\n      const [amLabel, pmLabel] = this._dateTimeAdapter.getDayPeriodNames();\n      this.meridianViewItems = [{\n        value: \"AM\" /* Meridian.AM */,\n        label: amLabel\n      }, {\n        value: \"PM\" /* Meridian.PM */,\n        label: pmLabel\n      }];\n    }\n    /** @hidden */\n    _calculateActiveHourViewItem() {\n      const hour = this._getModelHour();\n      this.activeHourViewItem = this.hourViewItems.find(({\n        value\n      }) => value === hour);\n    }\n    /** @hidden */\n    _calculateActiveMinuteViewItem() {\n      const minute = this._getModelMinute();\n      this.activeMinuteViewItem = this.minuteViewItems.find(({\n        value\n      }) => value === minute);\n    }\n    /** @hidden */\n    _calculateActiveSecondViewItem() {\n      const second = this._getModelSecond();\n      this.activeSecondViewItem = this.secondViewItems.find(({\n        value\n      }) => value === second);\n    }\n    /** @hidden */\n    _calculateActiveMeridianViewItem() {\n      const meridian = this._getDayPeriodByHour();\n      this.activeMeridianViewItem = this.meridianViewItems.find(({\n        value\n      }) => value === meridian);\n    }\n    /**\n     * @hidden\n     * Model hours (0 - 23)\n     */\n    _getModelHour() {\n      return this._dateTimeAdapter.getHours(this.time);\n    }\n    /**\n     * @hidden\n     * Model minutes (0 - 59)\n     */\n    _getModelMinute() {\n      return this._dateTimeAdapter.getMinutes(this.time);\n    }\n    /**\n     * @hidden\n     * Model seconds (0 - 59)\n     */\n    _getModelSecond() {\n      return this._dateTimeAdapter.getSeconds(this.time);\n    }\n    /**\n     * @hidden\n     * Get meridian period based on a given hours\n     */\n    _getDayPeriodByHour(hour = this._getModelHour()) {\n      return this._isPm(hour) ? \"PM\" /* Meridian.PM */ : \"AM\" /* Meridian.AM */;\n    }\n    /** @hidden */\n    _isPm(hours = this._getModelHour()) {\n      return hours >= 12;\n    }\n    /**\n     * @hidden\n     * @returns default time 00:00:00\n     */\n    _getDefaultValue() {\n      return this._dateTimeAdapter.today();\n    }\n  }\n  TimeComponent.ɵfac = function TimeComponent_Factory(t) {\n    return new (t || TimeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.DatetimeAdapter, 8), i0.ɵɵdirectiveInject(i2$1.ContentDensityObserver), i0.ɵɵdirectiveInject(i3$1.RtlService, 8), i0.ɵɵdirectiveInject(TimeI18n, 8));\n  };\n  TimeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TimeComponent,\n    selectors: [[\"fd-time\"]],\n    viewQuery: function TimeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TimeColumnComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columns = _t);\n      }\n    },\n    hostBindings: function TimeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusout\", function TimeComponent_focusout_HostBindingHandler($event) {\n          return ctx._focusOut($event);\n        })(\"blur\", function TimeComponent_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    inputs: {\n      meridian: \"meridian\",\n      validate: \"validate\",\n      keepTwoDigits: \"keepTwoDigits\",\n      disabled: \"disabled\",\n      displaySeconds: \"displaySeconds\",\n      displayMinutes: \"displayMinutes\",\n      displayHours: \"displayHours\",\n      tablet: \"tablet\",\n      elementsAtOnce: \"elementsAtOnce\",\n      time: \"time\",\n      spinnerButtons: \"spinnerButtons\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TimeComponent),\n      multi: true\n    }, contentDensityObserverProviders()]), i0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 19,\n    consts: [[1, \"fd-time\", 3, \"keydown\"], [\"columnTranslationsPreset\", \"hours\", 3, \"active\", \"rows\", \"offset\", \"elementsAtOnce\", \"activeValue\", \"timeConfig\", \"spinners\", \"activeValueChange\", \"activeStateChange\"], [\"columnTranslationsPreset\", \"minutes\", 3, \"active\", \"rows\", \"offset\", \"elementsAtOnce\", \"activeValue\", \"timeConfig\", \"spinners\", \"activeValueChange\", \"activeStateChange\", 4, \"ngIf\"], [\"columnTranslationsPreset\", \"seconds\", 3, \"active\", \"rows\", \"offset\", \"elementsAtOnce\", \"activeValue\", \"timeConfig\", \"spinners\", \"activeValueChange\", \"activeStateChange\", 4, \"ngIf\"], [\"columnTranslationsPreset\", \"period\", 3, \"active\", \"rows\", \"activeValue\", \"offset\", \"elementsAtOnce\", \"timeConfig\", \"meridian\", \"spinners\", \"activeValueChange\", \"activeStateChange\", 4, \"ngIf\"], [\"columnTranslationsPreset\", \"minutes\", 3, \"active\", \"rows\", \"offset\", \"elementsAtOnce\", \"activeValue\", \"timeConfig\", \"spinners\", \"activeValueChange\", \"activeStateChange\"], [\"columnTranslationsPreset\", \"seconds\", 3, \"active\", \"rows\", \"offset\", \"elementsAtOnce\", \"activeValue\", \"timeConfig\", \"spinners\", \"activeValueChange\", \"activeStateChange\"], [\"columnTranslationsPreset\", \"period\", 3, \"active\", \"rows\", \"activeValue\", \"offset\", \"elementsAtOnce\", \"timeConfig\", \"meridian\", \"spinners\", \"activeValueChange\", \"activeStateChange\"]],\n    template: function TimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"keydown\", function TimeComponent_Template_div_keydown_0_listener($event) {\n          return ctx.handleKeyDownEvent($event);\n        });\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵpipe(2, \"fdTranslate\");\n        i0.ɵɵelementStart(3, \"fd-time-column\", 1);\n        i0.ɵɵlistener(\"activeValueChange\", function TimeComponent_Template_fd_time_column_activeValueChange_3_listener($event) {\n          return ctx.handleHourChange($event.value.value);\n        })(\"activeStateChange\", function TimeComponent_Template_fd_time_column_activeStateChange_3_listener() {\n          return ctx.changeActive(\"hour\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, TimeComponent_fd_time_column_4_Template, 1, 7, \"fd-time-column\", 2);\n        i0.ɵɵtemplate(5, TimeComponent_fd_time_column_5_Template, 1, 7, \"fd-time-column\", 3);\n        i0.ɵɵtemplate(6, TimeComponent_fd_time_column_6_Template, 1, 8, \"fd-time-column\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"is-compact\", i0.ɵɵpipeBind1(1, 15, ctx._contentDensityObserver.isCompact$))(\"fd-time--tablet\", ctx.tablet);\n        i0.ɵɵattribute(\"aria-label\", ctx._componentAriaLabel || i0.ɵɵpipeBind1(2, 17, \"coreTime.componentAriaName\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"active\", ctx.isActive(\"hour\"))(\"rows\", ctx.hourViewItems)(\"offset\", ctx.offset)(\"elementsAtOnce\", ctx.elementsAtOnce)(\"activeValue\", ctx.activeHourViewItem)(\"timeConfig\", ctx.getHoursConfig())(\"spinners\", ctx.spinnerButtons);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.displayMinutes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.displaySeconds);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.meridian);\n      }\n    },\n    dependencies: [i1.NgIf, TimeColumnComponent, i1.AsyncPipe, i4.FdTranslatePipe],\n    styles: [\".fd-input{-webkit-box-sizing:border-box;-webkit-box-shadow:none;-webkit-appearance:none;appearance:none;background:var(--sapField_BackgroundStyle, var(--sapField_BackgroundStyle));background-color:var(--sapField_Background, var(--sapField_Background));border:0;border:var(--sapField_BorderWidth) var(--sapField_BorderStyle) var(--sapField_BorderColor);border-radius:var(--sapField_BorderCornerRadius);box-shadow:none;box-sizing:border-box;color:var(--sapTextColor);color:var(--sapField_TextColor);cursor:text;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:2.25rem;line-height:var(--sapContent_LineHeight);margin:0;margin:var(--fdInput_Field_Margin, .25rem 0);min-height:2.25rem;min-width:var(2.75rem, 2.75rem);outline:none;overflow:hidden;padding:0;padding:var(--fdInput_Field_Padding, 0 .625rem);text-overflow:ellipsis;text-shadow:var(--fdInput_Text_Shadow);white-space:nowrap;width:100%;z-index:1}.fd-input:after,.fd-input:before{box-sizing:inherit;font-size:inherit}.fd-input::placeholder{color:var(--sapField_PlaceholderTextColor);font-style:var(--fdPlaceholder_Font_Style)}.fd-input[dir=rtl]::placeholder,[dir=rtl] .fd-input::placeholder{text-indent:.125rem}.fd-input::selection{background-color:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}.fd-input::-ms-clear{display:none}.fd-input.is-hover,.fd-input:hover{-webkit-box-shadow:var(--fdInput_Box_Shadow_Hover);background:var(--sapField_Hover_BackgroundStyle, var(--sapField_Hover_BackgroundStyle));background-color:var(--sapField_Hover_Background, var(--sapField_Hover_Background));border-color:var(--sapField_Hover_BorderColor);box-shadow:var(--fdInput_Box_Shadow_Hover)}.fd-input.is-focus,.fd-input:focus{-webkit-box-shadow:none;background:var(--sapField_Focus_Background, var(--sapField_Focus_Background));box-shadow:none;outline-color:var(--fdInput_Outline_Color);outline-offset:var(--fdInput_Outline_Offset);outline-style:var(--sapContent_FocusStyle);outline-width:var(--sapContent_FocusWidth);z-index:5}.fd-input[type=search]::-webkit-search-cancel-button,.fd-input[type=search]::-webkit-search-decoration,.fd-input[type=search]::-webkit-search-results-button,.fd-input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}.fd-input[aria-expanded=false]{z-index:0}.fd-input.is-expanded,.fd-input[aria-expanded=true]{z-index:4}.fd-input[class*=-compact],.fd-input[class*=-condensed],[class*=-compact] .fd-input:not([class*=-cozy]),[class*=-condensed] .fd-input:not([class*=-cozy]){box-sizing:border-box;height:1.625rem;margin:var(--fdInput_Field_Compact_Margin, .1875rem 0);min-height:1.625rem;min-width:var(--fdInput_Field_Compact_Min_Width, 2rem);padding:var(--fdInput_Field_Compact_Padding, 0 .5rem)}.fd-input--no-number-spinner{-moz-appearance:textfield}.fd-input--no-number-spinner::-webkit-inner-spin-button,.fd-input--no-number-spinner::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.fd-input.right-align{text-align:right}.fd-input.is-success{background:var(--sapField_SuccessBackgroundStyle);background-color:var(--sapField_SuccessBackground);border:var(--sapField_SuccessColor) var(--sapField_SuccessBorderWidth) var(--sapField_SuccessBorderStyle)}.fd-input.is-success.is-hover,.fd-input.is-success:hover{-webkit-box-shadow:var(--fdInput_Success_Box_Shadow_Hover);background-color:var(--fdInput_Success_Background_Color_Hover);border-color:var(--sapField_SuccessColor);box-shadow:var(--fdInput_Success_Box_Shadow_Hover)}.fd-input.is-success.is-focus,.fd-input.is-success:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Success_Outline_Color);z-index:5}.fd-input.is-success.is-focus.is-hover,.fd-input.is-success.is-focus:hover,.fd-input.is-success:focus.is-hover,.fd-input.is-success:focus:hover{box-shadow:none}.fd-input.is-error{background:var(--sapField_InvalidBackgroundStyle);background-color:var(--sapField_InvalidBackground);border:var(--sapField_InvalidColor) var(--sapField_InvalidBorderWidth) var(--sapField_InvalidBorderStyle)}.fd-input.is-error.is-hover,.fd-input.is-error:hover{-webkit-box-shadow:var(--fdInput_Error_Box_Shadow_Hover);background-color:var(--fdInput_Error_Background_Color_Hover);border-color:var(--sapField_InvalidColor);box-shadow:var(--fdInput_Error_Box_Shadow_Hover)}.fd-input.is-error.is-focus,.fd-input.is-error:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Error_Outline_Color);z-index:5}.fd-input.is-error.is-focus.is-hover,.fd-input.is-error.is-focus:hover,.fd-input.is-error:focus.is-hover,.fd-input.is-error:focus:hover{box-shadow:none}.fd-input.is-warning{background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border:var(--sapField_WarningColor) var(--sapField_WarningBorderWidth) var(--sapField_WarningBorderStyle)}.fd-input.is-warning.is-hover,.fd-input.is-warning:hover{-webkit-box-shadow:var(--fdInput_Warning_Box_Shadow_Hover);background-color:var(--fdInput_Warning_Background_Color_Hover);border-color:var(--sapField_WarningColor);box-shadow:var(--fdInput_Warning_Box_Shadow_Hover)}.fd-input.is-warning.is-focus,.fd-input.is-warning:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Warning_Outline_Color);z-index:5}.fd-input.is-warning.is-focus.is-hover,.fd-input.is-warning.is-focus:hover,.fd-input.is-warning:focus.is-hover,.fd-input.is-warning:focus:hover{box-shadow:none}.fd-input.is-alert{background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border:var(--sapField_WarningColor) var(--sapField_WarningBorderWidth) var(--sapField_WarningBorderStyle)}.fd-input.is-alert.is-hover,.fd-input.is-alert:hover{-webkit-box-shadow:var(--fdInput_Warning_Box_Shadow_Hover);background-color:var(--fdInput_Warning_Background_Color_Hover);border-color:var(--sapField_WarningColor);box-shadow:var(--fdInput_Warning_Box_Shadow_Hover)}.fd-input.is-alert.is-focus,.fd-input.is-alert:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Warning_Outline_Color);z-index:5}.fd-input.is-alert.is-focus.is-hover,.fd-input.is-alert.is-focus:hover,.fd-input.is-alert:focus.is-hover,.fd-input.is-alert:focus:hover{box-shadow:none}.fd-input.is-information{background:var(--sapField_InformationBackgroundStyle);background-color:var(--sapField_InformationBackground);border:var(--sapField_InformationColor) var(--sapField_InformationBorderWidth) var(--sapField_InformationBorderStyle)}.fd-input.is-information.is-hover,.fd-input.is-information:hover{-webkit-box-shadow:var(--fdInput_Information_Box_Shadow_Hover);background-color:var(--fdInput_Information_Background_Color_Hover);border-color:var(--sapField_InformationColor);box-shadow:var(--fdInput_Information_Box_Shadow_Hover)}.fd-input.is-information.is-focus,.fd-input.is-information:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Information_Outline_Color);z-index:5}.fd-input.is-information.is-focus.is-hover,.fd-input.is-information.is-focus:hover,.fd-input.is-information:focus.is-hover,.fd-input.is-information:focus:hover{box-shadow:none}.fd-input.is-alert,.fd-input.is-error,.fd-input.is-warning{font-style:var(--fdInput_State_Text_Style);font-weight:var(--fdInput_State_Font_Weight)}.fd-input.is-alert::placeholder,.fd-input.is-error::placeholder,.fd-input.is-warning::placeholder{font-weight:var(--fdInput_State_Font_Weight)}.fd-input.is-alert.is-focus,.fd-input.is-alert:focus,.fd-input.is-error.is-focus,.fd-input.is-error:focus,.fd-input.is-information.is-focus,.fd-input.is-information:focus,.fd-input.is-warning.is-focus,.fd-input.is-warning:focus{outline-offset:var(--fdInput_Outline_Offset_States);z-index:5}.fd-input.is-error::placeholder{color:var(--sapField_TextColor)}.fd-input.is-disabled,.fd-input:disabled,.fd-input[aria-disabled=true]{opacity:var(--sapContent_DisabledOpacity);pointer-events:none}.fd-input.is-disabled::placeholder,.fd-input:disabled::placeholder,.fd-input[aria-disabled=true]::placeholder{color:var(--fdInput_Non_Interactive_State_Placeholder_Color)}.fd-input.is-readonly,.fd-input[aria-readonly=true],.fd-input[readonly]{background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor);border-radius:var(--fdInput_ReadOnly_Border_Radius)}.fd-input.is-readonly::placeholder,.fd-input[aria-readonly=true]::placeholder,.fd-input[readonly]::placeholder{color:var(--fdInput_Non_Interactive_State_Placeholder_Color)}.fd-input.is-readonly.is-hover,.fd-input.is-readonly:hover,.fd-input[aria-readonly=true].is-hover,.fd-input[aria-readonly=true]:hover,.fd-input[readonly].is-hover,.fd-input[readonly]:hover{-webkit-box-shadow:none;background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor);border-radius:var(--fdInput_ReadOnly_Border_Radius);box-shadow:none}.fd-input.is-readonly.is-focus,.fd-input.is-readonly:focus,.fd-input[aria-readonly=true].is-focus,.fd-input[aria-readonly=true]:focus,.fd-input[readonly].is-focus,.fd-input[readonly]:focus{background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor);border-radius:var(--fdInput_ReadOnly_Border_Radius);z-index:5}/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-time{-webkit-box-sizing:border-box;--fdTime_Item_Height:2.875rem;--fdTime_Dropdown_Padding:1rem;--fdTime_Wrapper_Height:20.125rem;--fdTime_Unit_Line_Height:2.75rem;-webkit-box-pack:center;-ms-flex-pack:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:row;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;padding:0;padding:var(--fdTime_Dropdown_Padding)}.fd-time:after,.fd-time:before{box-sizing:inherit;font-size:inherit}.fd-time__col{-webkit-box-sizing:border-box;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:column;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0 .5rem 0 0;padding:0}.fd-time__col:after,.fd-time__col:before{box-sizing:inherit;font-size:inherit}.fd-time__col:last-child{margin-right:0}.fd-time__current-indicator{-webkit-box-sizing:border-box;-webkit-transform:translateY(-50%);border:0;border:.0625rem solid var(--sapList_SelectionBorderColor);border-radius:var(--sapButton_BorderCornerRadius);box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:var(--fdTime_Item_Height);left:0;line-height:var(--sapContent_LineHeight);margin:0;padding:0;position:absolute;top:50%;transform:translateY(-50%);width:3rem}.fd-time__current-indicator:after,.fd-time__current-indicator:before{box-sizing:inherit;font-size:inherit}.fd-time__wrapper{-webkit-box-sizing:border-box;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-box-align:center;-ms-flex-align:center;-webkit-box-flex:1;-ms-flex:1 1 auto;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex:1 1 auto;flex-direction:column;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;overflow:hidden;padding:0;position:relative;width:3rem}.fd-time__wrapper:after,.fd-time__wrapper:before{box-sizing:inherit;font-size:inherit}.fd-time__wrapper--active{-webkit-box-pack:initial;-ms-flex-pack:initial;height:var(--fdTime_Wrapper_Height);justify-content:normal;max-height:var(--fdTime_Wrapper_Height)}.fd-time__wrapper--meridian .fd-time__item:first-child{margin-top:calc(var(--fdTime_Item_Height) * 3)}.fd-time__wrapper--meridian .fd-time__item:last-child{margin-bottom:calc(var(--fdTime_Item_Height) * 3)}.fd-time__wrapper--meridian .fd-time__list{height:var(--fdTime_Wrapper_Height)}.fd-time__item{-webkit-box-sizing:border-box;-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;background-color:var(--sapLegend_WorkingBackground);border:0;border:.0625rem solid var(--sapList_Background);border-radius:var(--sapButton_BorderCornerRadius);box-sizing:border-box;color:var(--sapTextColor);cursor:default;display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:var(--fdTime_Item_Height);justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;min-height:var(--fdTime_Item_Height);padding:0;text-shadow:var(--fdTime_Text_Shadow);width:3rem}.fd-time__item:after,.fd-time__item:before{box-sizing:inherit;font-size:inherit}.fd-time__item:hover{background-color:var(--sapList_Hover_Background)}.fd-time__item:active{background-color:var(--sapContent_Selected_Background);border-color:transparent;color:var(--sapContent_Selected_TextColor)}.fd-time__item--current{background-color:var(--sapList_Background);border-color:var(--sapList_SelectionBorderColor)}.fd-time__item--current:hover{background-color:var(--sapList_Hover_Background)}.fd-time__item--collapsed,.fd-time__item--current:active{background-color:var(--sapContent_Selected_Background);border-color:transparent;color:var(--sapContent_Selected_TextColor)}.fd-time__item--collapsed:hover{background-color:var(--sapContent_Selected_Hover_Background)}.fd-time__item--hidden{visibility:hidden}.fd-time__unit{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);color:inherit;display:block;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:100%;line-height:var(--sapContent_LineHeight);line-height:var(--fdTime_Unit_Line_Height);margin:0;overflow:hidden;padding:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;width:100%;z-index:2}.fd-time__unit:after,.fd-time__unit:before{box-sizing:inherit;font-size:inherit}.fd-time__list{-webkit-box-sizing:border-box;-ms-overflow-style:none;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;overflow:hidden;padding:0;scrollbar-width:none}.fd-time__list:after,.fd-time__list:before{box-sizing:inherit;font-size:inherit}.fd-time__list::-webkit-scrollbar{display:none}.fd-time__slider-label{-webkit-box-sizing:border-box;align-self:flex-start;align-self:auto;border:0;box-sizing:border-box;color:var(--sapTextColor);color:var(--sapContent_LabelColor);cursor:text;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-size:var(--sapFontSmallSize);font-weight:400;forced-color-adjust:none;height:2rem;line-height:var(--sapContent_LineHeight);line-height:2rem;margin:0;max-width:100%;overflow:hidden;padding:0;position:relative;text-overflow:ellipsis;text-overflow:clip;white-space:nowrap;width:-moz-fit-content;width:fit-content}.fd-time__slider-label:after,.fd-time__slider-label:before{box-sizing:inherit;font-size:inherit}.fd-time__slider-label[dir=rtl],[dir=rtl] .fd-time__slider-label{margin:0;margin-left:.5rem;margin-right:0;padding:0}.fd-time__control{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-time__control:after,.fd-time__control:before{box-sizing:inherit;font-size:inherit}.fd-time--tablet{--fdTime_Dropdown_Padding:.5rem;--fdTime_Item_Height:2.875rem}.fd-time[class*=-compact],.fd-time[class*=-condensed],[class*=-compact] .fd-time:not([class*=-cozy]),[class*=-condensed] .fd-time:not([class*=-cozy]){--fdTime_Dropdown_Padding:.5rem;--fdTime_Item_Height:2rem;--fdTime_Wrapper_Height:14rem;--fdTime_Unit_Line_Height:1.875rem}.fd-time--scrollable .fd-time__list{overflow:auto}.fd-time[dir=rtl] .fd-time__col,[dir=rtl] .fd-time .fd-time__col{margin-left:.5rem;margin-right:0}.fd-time[dir=rtl] .fd-time__col:last-child,[dir=rtl] .fd-time .fd-time__col:last-child{margin-left:0}.fd-time__list{touch-action:pan-x;-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TimeComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedTimeContentDensityDirective = /*#__PURE__*/(() => {\n  class DeprecatedTimeContentDensityDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-time-column[compact], fd-time');\n    }\n  }\n  DeprecatedTimeContentDensityDirective.ɵfac = function DeprecatedTimeContentDensityDirective_Factory(t) {\n    return new (t || DeprecatedTimeContentDensityDirective)();\n  };\n  DeprecatedTimeContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedTimeContentDensityDirective,\n    selectors: [[\"fd-time-column\", \"compact\", \"\"], [\"fd-time\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedTimeContentDensityDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedTimeContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TimeModule = /*#__PURE__*/(() => {\n  class TimeModule {}\n  TimeModule.ɵfac = function TimeModule_Factory(t) {\n    return new (t || TimeModule)();\n  };\n  TimeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TimeModule\n  });\n  TimeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, FormModule, ButtonModule, PipeModule, CarouselModule, ContentDensityModule, I18nModule, ContentDensityModule]\n  });\n  return TimeModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DeprecatedTimeContentDensityDirective, TimeColumnComponent, TimeComponent, TimeI18n, TimeModule };\n//# sourceMappingURL=fundamental-ngx-core-time.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}