{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, HostBinding, Output, HostListener, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChild, forwardRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { AvatarModule } from '@fundamental-ngx/core/avatar';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport { FormControlModule } from '@fundamental-ngx/core/form';\nimport { __decorate, __metadata } from 'tslib';\nimport { applyCssClass } from '@fundamental-ngx/cdk/utils';\n\n/**\n * Applies text area auto resize and set maximum rows to grow\n */\nconst _c0 = [\"*\"];\nlet FeedInputTextareaDirective = /*#__PURE__*/(() => {\n  class FeedInputTextareaDirective {\n    /** @hidden */\n    onKeyup(event) {\n      this.resize();\n      this.valueChange.emit(event.target.value);\n    }\n    /** @hidden */\n    constructor(_elementRef, _renderer) {\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      /** Event emitted when the textarea value changed */\n      this.valueChange = new EventEmitter();\n    }\n    /** @hidden */\n    get elementRef() {\n      return this._elementRef;\n    }\n    /** @hidden */\n    ngOnInit() {\n      if (this.fdFeedInputTextareaMaxRows) {\n        const lineHeight = this._getTextareaLineHeight();\n        this._elementRef.nativeElement.style.maxHeight = lineHeight * this.fdFeedInputTextareaMaxRows + 'px';\n      }\n    }\n    /** @hidden make to grow textarea */\n    resize() {\n      this._renderer.setStyle(this.elementRef.nativeElement, 'height', 'inherit');\n      const totalHeight = this._getTextareaTotalHeight();\n      this._renderer.setStyle(this.elementRef.nativeElement, 'height', `${totalHeight}px`);\n    }\n    /** @hidden get line height of textarea */\n    _getTextareaLineHeight() {\n      const lineHeight = window.getComputedStyle(this.elementRef.nativeElement).getPropertyValue('line-height');\n      if (lineHeight === 'normal') {\n        return parseInt(window.getComputedStyle(this.elementRef.nativeElement).getPropertyValue('font-size'), 10) * 1.1;\n      }\n      return parseInt(lineHeight, 10);\n    }\n    /** @hidden get the total height including borders and scroll height */\n    _getTextareaTotalHeight() {\n      const computed = window.getComputedStyle(this._elementRef.nativeElement);\n      return parseInt(computed.getPropertyValue('border-top-width'), 10) + this.elementRef.nativeElement.scrollHeight + parseInt(computed.getPropertyValue('border-bottom-width'), 10);\n    }\n  }\n  FeedInputTextareaDirective.ɵfac = function FeedInputTextareaDirective_Factory(t) {\n    return new (t || FeedInputTextareaDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  FeedInputTextareaDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FeedInputTextareaDirective,\n    selectors: [[\"\", \"fdFeedInputTextarea\", \"\"]],\n    hostVars: 5,\n    hostBindings: function FeedInputTextareaDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function FeedInputTextareaDirective_keyup_HostBindingHandler($event) {\n          return ctx.onKeyup($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        i0.ɵɵclassProp(\"fd-feed-input__textarea\", true)(\"fd-textarea\", true);\n      }\n    },\n    inputs: {\n      fdFeedInputTextareaMaxRows: \"fdFeedInputTextareaMaxRows\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    }\n  });\n  return FeedInputTextareaDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Applies button feed arrow icon and disabled state\n */\nlet FeedInputButtonDirective = /*#__PURE__*/(() => {\n  class FeedInputButtonDirective {\n    /** @hidden */\n    constructor(_elementRef, _renderer) {\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      /** @hidden */\n      this.disabled = true;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this.createArrowIcon();\n    }\n    /** @hidden */\n    get elementRef() {\n      return this._elementRef;\n    }\n    /** @hidden create button icon */\n    createArrowIcon() {\n      const icon = this._renderer.createElement('i');\n      this._renderer.addClass(icon, 'sap-icon--feeder-arrow');\n      this._renderer.setAttribute(icon, 'role', 'presentation');\n      this._renderer.appendChild(this.elementRef.nativeElement, icon);\n    }\n  }\n  FeedInputButtonDirective.ɵfac = function FeedInputButtonDirective_Factory(t) {\n    return new (t || FeedInputButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  FeedInputButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FeedInputButtonDirective,\n    selectors: [[\"\", \"fdFeedInputButton\", \"\"]],\n    hostAttrs: [1, \"fd-button\", \"fd-feed-input__submit-button\", \"is-cozy\"],\n    hostVars: 3,\n    hostBindings: function FeedInputButtonDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        i0.ɵɵclassProp(\"is-disabled\", ctx.disabled);\n      }\n    }\n  });\n  return FeedInputButtonDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FeedInputComponent = /*#__PURE__*/(() => {\n  class FeedInputComponent {\n    constructor() {\n      /** Component disable state */\n      this.disabled = false;\n      /** @hidden */\n      this._subscriptions = new Subscription();\n    }\n    /** @hidden */\n    ngAfterContentInit() {\n      if (this.disabled) {\n        this.textareaElement.disabled = true;\n      }\n      this._subscriptions.add(this.textareaElement.valueChange.subscribe(value => this.buttonElement.disabled = !value));\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n  }\n  FeedInputComponent.ɵfac = function FeedInputComponent_Factory(t) {\n    return new (t || FeedInputComponent)();\n  };\n  FeedInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FeedInputComponent,\n    selectors: [[\"fd-feed-input\"]],\n    contentQueries: function FeedInputComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, FeedInputTextareaDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, FeedInputButtonDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textareaElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonElement = _t.first);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"fd-feed-input\"]],\n    template: function FeedInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"is-disabled\", ctx.disabled);\n      }\n    },\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-feed-input{-webkit-box-sizing:border-box;background-color:var(--sapField_Background);border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:row;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:1rem .5rem 1rem 1rem}.fd-feed-input:after,.fd-feed-input:before{box-sizing:inherit;font-size:inherit}.fd-feed-input[dir=rtl],[dir=rtl] .fd-feed-input{padding-left:.5rem;padding-right:1rem}.fd-feed-input.is-disabled,.fd-feed-input:disabled,.fd-feed-input[aria-disabled=true]{cursor:not-allowed;opacity:1;pointer-events:auto}.fd-feed-input.is-disabled textarea::placeholder,.fd-feed-input:disabled textarea::placeholder,.fd-feed-input[aria-disabled=true] textarea::placeholder{color:var(--sapTextColor, #32363a);font-style:var(--fdFeed_Input_Placeholder_Font_Style)}.fd-feed-input .fd-feed-input__thumb{-webkit-box-flex:1;-ms-flex:1 0 auto;display:none;flex:1 0 auto;margin-left:0;margin-right:.5rem}.fd-feed-input .fd-feed-input__thumb[dir=rtl],[dir=rtl] .fd-feed-input .fd-feed-input__thumb{margin-left:.5rem;margin-right:0}.fd-feed-input .fd-feed-input__textarea{margin:0;max-height:20rem;min-height:3rem;padding:.3125rem .5rem}.fd-feed-input .fd-feed-input__submit-button{margin:auto 0 .375rem .5rem}.fd-feed-input .fd-feed-input__submit-button[dir=rtl],[dir=rtl] .fd-feed-input .fd-feed-input__submit-button{-webkit-transform:rotate(180deg);margin-left:0;margin-right:.5rem;transform:rotate(180deg)}@media (min-width: 25rem){.fd-feed-input{margin-bottom:1rem;margin-top:1rem}.fd-feed-input .fd-feed-input__thumb{display:inline-flex}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FeedInputComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Applies a thumb styles\n */\nlet FeedInputAvatarDirective = /*#__PURE__*/(() => {\n  class FeedInputAvatarDirective {\n    /** @hidden */\n    constructor(_elementRef) {\n      this._elementRef = _elementRef;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this.buildComponentCssClass();\n    }\n    /** @hidden */\n    ngOnChanges() {\n      this.buildComponentCssClass();\n    }\n    /** @hidden */\n    buildComponentCssClass() {\n      return ['fd-feed-input__thumb', this.placeholder ? `sap-icon` : '', this.class];\n    }\n    /** @hidden */\n    elementRef() {\n      return this._elementRef;\n    }\n  }\n  FeedInputAvatarDirective.ɵfac = function FeedInputAvatarDirective_Factory(t) {\n    return new (t || FeedInputAvatarDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  FeedInputAvatarDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FeedInputAvatarDirective,\n    selectors: [[\"\", \"fdFeedInputAvatar\", \"\"]],\n    inputs: {\n      class: \"class\",\n      placeholder: \"placeholder\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  __decorate([applyCssClass, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", Array)], FeedInputAvatarDirective.prototype, \"buildComponentCssClass\", null);\n  return FeedInputAvatarDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FeedInputModule = /*#__PURE__*/(() => {\n  class FeedInputModule {}\n  FeedInputModule.ɵfac = function FeedInputModule_Factory(t) {\n    return new (t || FeedInputModule)();\n  };\n  FeedInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FeedInputModule\n  });\n  FeedInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, AvatarModule, ButtonModule, FormControlModule]\n  });\n  return FeedInputModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FeedInputAvatarDirective, FeedInputButtonDirective, FeedInputComponent, FeedInputModule, FeedInputTextareaDirective };\n//# sourceMappingURL=fundamental-ngx-core-feed-input.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}