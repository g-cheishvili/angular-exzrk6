{"ast":null,"code":"import _asyncToGenerator from \"/home/webpct/angular-exzrk6/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, ViewChild, NgModule, EventEmitter, Injector, forwardRef, TemplateRef, ElementRef, Input, Output, HostListener, Directive } from '@angular/core';\nimport * as i3$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { __decorate, __metadata } from 'tslib';\nimport * as i5$1 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SPACE, ENTER, DOWN_ARROW, UP_ARROW, ESCAPE, TAB } from '@angular/cdk/keycodes';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { takeUntil, distinctUntilChanged, map, first, startWith } from 'rxjs/operators';\nimport * as i7 from '@fundamental-ngx/core/popover';\nimport { PopoverComponent, PopoverModule } from '@fundamental-ngx/core/popover';\nimport { MenuKeyboardService } from '@fundamental-ngx/core/menu';\nimport * as i4 from '@fundamental-ngx/core/token';\nimport { TokenizerComponent, TokenModule } from '@fundamental-ngx/core/token';\nimport * as i9 from '@fundamental-ngx/core/form';\nimport { registerFormItemControl, FormModule } from '@fundamental-ngx/core/form';\nimport * as i6 from '@fundamental-ngx/core/list';\nimport { ListComponent, ListModule } from '@fundamental-ngx/core/list';\nimport * as i2$1 from '@fundamental-ngx/cdk/utils';\nimport { RangeSelector, uuidv4, KeyUtil, applyCssClass, PipeModule, AutoCompleteModule } from '@fundamental-ngx/cdk/utils';\nimport * as i1 from '@fundamental-ngx/core/dialog';\nimport { DialogModule } from '@fundamental-ngx/core/dialog';\nimport { MobileModeBase, MobileModeControl, MOBILE_MODE_CONFIG } from '@fundamental-ngx/core/mobile-mode';\nimport * as i2 from '@fundamental-ngx/core/bar';\nimport { BarModule } from '@fundamental-ngx/core/bar';\nimport * as i3 from '@fundamental-ngx/core/title';\nimport * as i5 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i1$1 from '@fundamental-ngx/core/content-density';\nimport { contentDensityObserverProviders, DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\nimport * as i8 from '@fundamental-ngx/core/input-group';\nimport { InputGroupModule } from '@fundamental-ngx/core/input-group';\nimport * as i10 from '@fundamental-ngx/core/checkbox';\nimport { CheckboxModule } from '@fundamental-ngx/core/checkbox';\nimport * as i11 from '@fundamental-ngx/core/link';\nimport { LinkModule } from '@fundamental-ngx/core/link';\nconst _c0 = [\"dialogTemplate\"];\nfunction MultiInputMobileComponent_ng_template_0_h1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.mobileConfig.title);\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function MultiInputMobileComponent_ng_template_0_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.handleDismiss());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"mobile\", true);\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_ng_template_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"fd-bar-element\", 11);\n    i0.ɵɵtemplate(2, MultiInputMobileComponent_ng_template_0_ng_template_4_ng_container_2_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"fd-bar-element\", 12)(4, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function MultiInputMobileComponent_ng_template_0_ng_template_4_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.selectAll(ctx_r13.allItemsSelected));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r6.childContent == null ? null : ctx_r6.childContent.controlTemplate) || null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"fdType\", ctx_r6.allItemsSelected ? \"emphasized\" : \"transparent\");\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_fd_button_bar_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-button-bar\", 14);\n    i0.ɵɵlistener(\"click\", function MultiInputMobileComponent_ng_template_0_fd_button_bar_8_Template_fd_button_bar_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.handleApprove());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"label\", ctx_r8.mobileConfig.approveButtonText);\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_fd_button_bar_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-button-bar\", 15);\n    i0.ɵɵlistener(\"click\", function MultiInputMobileComponent_ng_template_0_fd_button_bar_9_Template_fd_button_bar_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.handleDismiss());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"label\", ctx_r9.mobileConfig.cancelButtonText);\n  }\n}\nfunction MultiInputMobileComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fd-dialog\", 1)(1, \"fd-dialog-header\");\n    i0.ɵɵtemplate(2, MultiInputMobileComponent_ng_template_0_h1_2_Template, 2, 1, \"h1\", 2);\n    i0.ɵɵtemplate(3, MultiInputMobileComponent_ng_template_0_button_3_Template, 1, 1, \"button\", 3);\n    i0.ɵɵtemplate(4, MultiInputMobileComponent_ng_template_0_ng_template_4_Template, 5, 2, \"ng-template\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"fd-dialog-body\");\n    i0.ɵɵtemplate(6, MultiInputMobileComponent_ng_template_0_ng_container_6_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"fd-dialog-footer\");\n    i0.ɵɵtemplate(8, MultiInputMobileComponent_ng_template_0_fd_button_bar_8_Template, 1, 1, \"fd-button-bar\", 6);\n    i0.ɵɵtemplate(9, MultiInputMobileComponent_ng_template_0_fd_button_bar_9_Template, 1, 1, \"fd-button-bar\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const dialog_r2 = ctx.$implicit;\n    const dialogConfig_r3 = ctx.dialogConfig;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"dialogConfig\", dialogConfig_r3)(\"dialogRef\", dialog_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.hasCloseButton);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r1.childContent == null ? null : ctx_r1.childContent.listTemplate) || null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.approveButtonText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.cancelButtonText);\n  }\n}\nconst _c1 = [\"control\"];\nconst _c2 = [\"list\"];\nconst _c3 = [\"searchInputElement\"];\nfunction MultiInputComponent_ng_container_0_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r4 = i0.ɵɵreference(6);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r4);\n  }\n}\nfunction MultiInputComponent_ng_container_0_fd_popover_4_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MultiInputComponent_ng_container_0_fd_popover_4_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c4 = function () {\n  return [];\n};\nfunction MultiInputComponent_ng_container_0_fd_popover_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-popover\", 9);\n    i0.ɵɵlistener(\"isOpenChange\", function MultiInputComponent_ng_container_0_fd_popover_4_Template_fd_popover_isOpenChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.openChangeHandle($event));\n    })(\"input\", function MultiInputComponent_ng_container_0_fd_popover_4_Template_fd_popover_input_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(!ctx_r14.open && ctx_r14.openChangeHandle(true));\n    });\n    i0.ɵɵelementStart(1, \"fd-popover-control\")(2, \"form\", 10);\n    i0.ɵɵlistener(\"submit\", function MultiInputComponent_ng_container_0_fd_popover_4_Template_form_submit_2_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15._onSubmit());\n    });\n    i0.ɵɵtemplate(3, MultiInputComponent_ng_container_0_fd_popover_4_ng_container_3_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"fd-popover-body\");\n    i0.ɵɵtemplate(5, MultiInputComponent_ng_container_0_fd_popover_4_ng_container_5_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵprojection(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const viewModel_r1 = i0.ɵɵnextContext().ngIf;\n    const _r4 = i0.ɵɵreference(6);\n    const _r6 = i0.ɵɵreference(8);\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"isOpen\", ctx_r3.open)(\"triggers\", i0.ɵɵpureFunction0(10, _c4))(\"maxWidth\", ctx_r3._popoverMaxWidth)(\"disabled\", ctx_r3.disabled)(\"fillControlMode\", ctx_r3.fillControlMode);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"fd-popover__body--hidden\", !viewModel_r1.displayedOptions.length);\n    i0.ɵɵattribute(\"aria-hidden\", !ctx_r3.open);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_5_fd_token_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-token\", 18);\n    i0.ɵɵlistener(\"onCloseClick\", function MultiInputComponent_ng_container_0_ng_template_5_fd_token_3_Template_fd_token_onCloseClick_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const option_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r21._onTokenClick(option_r20.value, false, $event));\n    })(\"onRemove\", function MultiInputComponent_ng_container_0_ng_template_5_fd_token_3_Template_fd_token_onRemove_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const option_r20 = restoredCtx.$implicit;\n      const ctx_r23 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r23._onTokenClick(option_r20.value, false));\n    });\n    i0.ɵɵelement(1, \"span\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r20 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r18.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHtml\", option_r20.label, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-input-group\", 12);\n    i0.ɵɵlistener(\"addOnButtonClicked\", function MultiInputComponent_ng_container_0_ng_template_5_Template_fd_input_group_addOnButtonClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r24._addOnButtonClicked($event));\n    });\n    i0.ɵɵelementStart(1, \"fd-tokenizer\", 13, 14);\n    i0.ɵɵlistener(\"moreClickedEvent\", function MultiInputComponent_ng_container_0_ng_template_5_Template_fd_tokenizer_moreClickedEvent_1_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r26._moreClicked());\n    });\n    i0.ɵɵtemplate(3, MultiInputComponent_ng_container_0_ng_template_5_fd_token_3_Template, 2, 2, \"fd-token\", 15);\n    i0.ɵɵelementStart(4, \"input\", 16, 17);\n    i0.ɵɵlistener(\"onComplete\", function MultiInputComponent_ng_container_0_ng_template_5_Template_input_onComplete_4_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r27._handleComplete($event));\n    })(\"keydown\", function MultiInputComponent_ng_container_0_ng_template_5_Template_input_keydown_4_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r28._handleInputKeydown($event));\n    })(\"focus\", function MultiInputComponent_ng_container_0_ng_template_5_Template_input_focus_4_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const _r17 = i0.ɵɵreference(2);\n      return i0.ɵɵresetView(_r17._showAllTokens());\n    })(\"blur\", function MultiInputComponent_ng_container_0_ng_template_5_Template_input_blur_4_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const _r17 = i0.ɵɵreference(2);\n      return i0.ɵɵresetView(_r17._hideTokens());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const viewModel_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"state\", ctx_r5.state)(\"buttonFocusable\", ctx_r5.buttonFocusable)(\"button\", ctx_r5.displayAddonButton)(\"disabled\", ctx_r5.disabled)(\"isExpanded\", ctx_r5.open && !ctx_r5.mobile && viewModel_r1.displayedOptions.length > 0)(\"isControl\", true)(\"glyph\", ctx_r5.displayAddonButton ? ctx_r5.glyph : \"\")(\"iconTitle\", ctx_r5.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"compactCollapse\", ctx_r5.compactCollapse)(\"open\", ctx_r5.open)(\"tokenizerFocusable\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", viewModel_r1.selectedOptions)(\"ngForTrackBy\", ctx_r5.valueFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"displayFn\", ctx_r5.displayFn)(\"inputText\", ctx_r5._searchTermCtrl.value || \"\")(\"options\", ctx_r5.dropdownValues)(\"enable\", ctx_r5.autoComplete && !ctx_r5.mobile)(\"placeholder\", ctx_r5.placeholder)(\"formControl\", ctx_r5._searchTermCtrl);\n    i0.ɵɵattribute(\"aria-required\", ctx_r5.required)(\"aria-label\", ctx_r5.ariaLabel)(\"aria-labelledby\", ctx_r5.ariaLabelledBy)(\"id\", ctx_r5.inputId);\n  }\n}\nconst _c5 = function (a0) {\n  return {\n    option: a0\n  };\n};\nfunction MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 24);\n    i0.ɵɵlistener(\"click\", function MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_1_Template_li_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const option_r35 = restoredCtx.$implicit;\n      const idx_r36 = restoredCtx.index;\n      const ctx_r37 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r37._onCheckboxClick(option_r35.value, $event, idx_r36, true));\n    })(\"keyup\", function MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_1_Template_li_keyup_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const option_r35 = restoredCtx.$implicit;\n      const idx_r36 = restoredCtx.index;\n      const ctx_r39 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r39._onCheckboxKeyup(option_r35.value, $event, idx_r36));\n    });\n    i0.ɵɵelementStart(1, \"fd-checkbox\", 25);\n    i0.ɵɵlistener(\"click\", function MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_1_Template_fd_checkbox_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const option_r35 = restoredCtx.$implicit;\n      const idx_r36 = restoredCtx.index;\n      const ctx_r40 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r40._onCheckboxClick(option_r35.value, $event, idx_r36));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainer(2, 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r35 = ctx.$implicit;\n    i0.ɵɵnextContext(3);\n    const _r8 = i0.ɵɵreference(10);\n    i0.ɵɵproperty(\"selected\", option_r35.isSelected);\n    i0.ɵɵattribute(\"aria-label\", option_r35.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", option_r35.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c5, option_r35));\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r42 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 27);\n    i0.ɵɵlistener(\"keyDown\", function MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_2_Template_li_keyDown_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r41 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r41._showAllKeyDown($event));\n    })(\"click\", function MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_2_Template_li_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r43 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r43._showAllClicked($event));\n    });\n    i0.ɵɵelementStart(1, \"a\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Show All (\", ctx_r34.dropdownValues.length, \")\");\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_7_ul_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 21);\n    i0.ɵɵlistener(\"focusEscapeList\", function MultiInputComponent_ng_container_0_ng_template_7_ul_0_Template_ul_focusEscapeList_0_listener($event) {\n      i0.ɵɵrestoreView(_r45);\n      const ctx_r44 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r44.handleListFocusEscape($event));\n    });\n    i0.ɵɵtemplate(1, MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_1_Template, 3, 7, \"li\", 22);\n    i0.ɵɵtemplate(2, MultiInputComponent_ng_container_0_ng_template_7_ul_0_li_2_Template, 3, 1, \"li\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const viewModel_r1 = i0.ɵɵnextContext(2).ngIf;\n    const ctx_r32 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"max-height\", !ctx_r32.mobile ? ctx_r32.maxHeight : \"auto\")(\"min-width\", \"100%\");\n    i0.ɵɵproperty(\"selection\", true)(\"mobileMode\", ctx_r32.mobile)(\"byline\", ctx_r32.byline);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", viewModel_r1.displayedOptions)(\"ngForTrackBy\", ctx_r32.valueFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r32.showAllButton && viewModel_r1.displayedOptions.length < ctx_r32.dropdownValues.length);\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MultiInputComponent_ng_container_0_ng_template_7_ul_0_Template, 3, 10, \"ul\", 20);\n  }\n  if (rf & 2) {\n    const viewModel_r1 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵproperty(\"ngIf\", viewModel_r1.displayedOptions.length);\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_9_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 30);\n    i0.ɵɵpipe(1, \"highlight\");\n  }\n  if (rf & 2) {\n    const option_r48 = i0.ɵɵnextContext().option;\n    const ctx_r49 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHtml\", i0.ɵɵpipeBind3(1, 1, option_r48.label, ctx_r49._searchTermCtrl.value || \"\", ctx_r49.highlight), i0.ɵɵsanitizeHtml);\n  }\n}\nconst _c6 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction MultiInputComponent_ng_container_0_ng_template_9_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 26);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const option_r48 = i0.ɵɵnextContext().option;\n    const ctx_r50 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r50.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c6, option_r48.item));\n  }\n}\nfunction MultiInputComponent_ng_container_0_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MultiInputComponent_ng_container_0_ng_template_9_span_0_Template, 2, 5, \"span\", 29);\n    i0.ɵɵtemplate(1, MultiInputComponent_ng_container_0_ng_template_9_ng_container_1_Template, 2, 4, \"ng-container\", 0);\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r9.itemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.itemTemplate);\n  }\n}\nfunction MultiInputComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2);\n    i0.ɵɵtemplate(3, MultiInputComponent_ng_container_0_ng_container_3_Template, 1, 1, \"ng-container\", 3);\n    i0.ɵɵtemplate(4, MultiInputComponent_ng_container_0_fd_popover_4_Template, 7, 11, \"fd-popover\", 4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(5, MultiInputComponent_ng_container_0_ng_template_5_Template, 6, 23, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, MultiInputComponent_ng_container_0_ng_template_7_Template, 1, 1, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(9, MultiInputComponent_ng_container_0_ng_template_9_Template, 2, 2, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.mobile);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.mobile);\n  }\n}\nconst _c7 = [\"*\"];\nconst MULTI_INPUT_COMPONENT = new InjectionToken('MultiInputComponent');\nlet MultiInputMobileComponent = /*#__PURE__*/(() => {\n  class MultiInputMobileComponent extends MobileModeBase {\n    /** @hidden */\n    constructor(elementRef, dialogService, multiInputComponent, mobileModes) {\n      super(elementRef, dialogService, multiInputComponent, MobileModeControl.MULTI_INPUT, mobileModes);\n      /** @hidden\n       * For internal usage\n       * Control element, which will be rendered inside dialog.\n       * List element, which will be rendered inside dialog.\n       */\n      this.childContent = null;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._listenOnMultiInputOpenChange();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      super.onDestroy();\n    }\n    /** Throw select all event, it's handled by multi input component */\n    selectAll(selectAll) {\n      this._component.selectAllItems(!selectAll);\n    }\n    /** @hidden */\n    handleDismiss() {\n      this.dialogRef.dismiss();\n      this._component.dialogDismiss(this._selectedBackup);\n    }\n    /** @hidden */\n    handleApprove() {\n      this.dialogRef.close();\n      this._component.dialogApprove();\n    }\n    /** @hidden */\n    _toggleDialog(open) {\n      if (!open) {\n        return;\n      }\n      this._selectedBackup = this._component.selected?.length ? [...this._component.selected] : [];\n      if (!this._dialogService.hasOpenDialogs()) {\n        this._open();\n      }\n    }\n    /** @hidden */\n    _listenOnMultiInputOpenChange() {\n      this._component.openChange.pipe(takeUntil(this._onDestroy$)).subscribe(isOpen => this._toggleDialog(isOpen));\n      this._component.allItemsSelectedChange.pipe(takeUntil(this._onDestroy$)).subscribe(allItemsSelected => this.allItemsSelected = allItemsSelected);\n    }\n    /** @hidden */\n    _open() {\n      this.dialogRef = this._dialogService.open(this.dialogTemplate, {\n        mobile: true,\n        disablePaddings: true,\n        ...this.dialogConfig,\n        backdropClickCloseable: false,\n        escKeyCloseable: false,\n        container: this._elementRef.nativeElement\n      });\n    }\n  }\n  MultiInputMobileComponent.ɵfac = function MultiInputMobileComponent_Factory(t) {\n    return new (t || MultiInputMobileComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DialogService), i0.ɵɵdirectiveInject(MULTI_INPUT_COMPONENT), i0.ɵɵdirectiveInject(MOBILE_MODE_CONFIG, 8));\n  };\n  MultiInputMobileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MultiInputMobileComponent,\n    selectors: [[\"fd-multi-input-mobile\"]],\n    viewQuery: function MultiInputMobileComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialogTemplate = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"dialogTemplate\", \"\"], [3, \"dialogConfig\", \"dialogRef\"], [\"fd-title\", \"\", 4, \"ngIf\"], [\"fd-dialog-close-button\", \"\", 3, \"mobile\", \"click\", 4, \"ngIf\"], [\"fdkTemplate\", \"subheader\"], [4, \"ngTemplateOutlet\"], [\"fdType\", \"emphasized\", 3, \"label\", \"click\", 4, \"ngIf\"], [3, \"label\", \"click\", 4, \"ngIf\"], [\"fd-title\", \"\"], [\"fd-dialog-close-button\", \"\", 3, \"mobile\", \"click\"], [\"fd-bar-middle\", \"\"], [1, \"custom-multi-input-mobile-control-element\"], [1, \"custom-multi-input-select-all-bar-element\"], [\"fd-button\", \"\", \"glyph\", \"multiselect-all\", 3, \"fdType\", \"click\"], [\"fdType\", \"emphasized\", 3, \"label\", \"click\"], [3, \"label\", \"click\"]],\n    template: function MultiInputMobileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MultiInputMobileComponent_ng_template_0_Template, 10, 7, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    dependencies: [i2.BarMiddleDirective, i2.BarElementDirective, i2.ButtonBarComponent, i1.DialogComponent, i1.DialogBodyComponent, i1.DialogFooterComponent, i1.DialogHeaderComponent, i1.DialogCloseButtonComponent, i3.TitleComponent, i2$1.TemplateDirective, i5.ButtonComponent, i3$1.NgIf, i3$1.NgTemplateOutlet],\n    styles: [\".custom-multi-input-select-all-bar-element{min-width:2.25rem}.custom-multi-input-mobile-control-element{width:calc(100% - 2.25rem)}.custom-multi-input-mobile-control-element .fd-multi-input-input-group-custom{width:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MultiInputMobileComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MultiInputMobileModule = /*#__PURE__*/(() => {\n  class MultiInputMobileModule {}\n  MultiInputMobileModule.ɵfac = function MultiInputMobileModule_Factory(t) {\n    return new (t || MultiInputMobileModule)();\n  };\n  MultiInputMobileModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MultiInputMobileModule\n  });\n  MultiInputMobileModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [BarModule, DialogModule, ButtonModule, CommonModule]\n  });\n  return MultiInputMobileModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Input field with multiple selection enabled. Should be used when a user can select between a\n * limited number of pre-defined options with a filter-enabled context.\n *\n * Supports Angular Forms.\n */\nlet MultiInputComponent = /*#__PURE__*/(() => {\n  class MultiInputComponent {\n    /** Search term, or more specifically the value of the inner input field. */\n    set searchTerm(value) {\n      this._searchTermCtrl.setValue(value);\n    }\n    get searchTerm() {\n      return this._searchTermCtrl.value ?? '';\n    }\n    /** Selected dropdown items. */\n    set selected(values) {\n      this._selectionModel.clear();\n      values?.forEach(item => this._selectionModel.select(item));\n    }\n    get selected() {\n      return this._selectionModel.selected;\n    }\n    /** @hidden */\n    get _popoverMaxWidth() {\n      if (this.bodyMaxWidth === 'none') {\n        return null;\n      }\n      if (typeof this.bodyMaxWidth === 'number') {\n        return this.bodyMaxWidth;\n      }\n      return this._elementRef.nativeElement.getBoundingClientRect().width;\n    }\n    /** @hidden */\n    constructor(_contentDensityObserver, _elementRef, _changeDetRef, _dynamicComponentService, _injector, _viewContainerRef, _rtlService, _focusTrapService) {\n      this._contentDensityObserver = _contentDensityObserver;\n      this._elementRef = _elementRef;\n      this._changeDetRef = _changeDetRef;\n      this._dynamicComponentService = _dynamicComponentService;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._rtlService = _rtlService;\n      this._focusTrapService = _focusTrapService;\n      /** Placeholder for the input field. */\n      this.placeholder = '';\n      /** Whether the input is disabled. */\n      this.disabled = false;\n      /** If it is mandatory field */\n      this.required = false;\n      /** Whether to use cozy visuals but compact collapsing behavior. */\n      this.compactCollapse = true;\n      /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n      this.maxHeight = '300px';\n      /** Icon of the button on the right of the input field. */\n      this.glyph = 'value-help';\n      /** Values to be displayed in the unfiltered dropdown. */\n      this.dropdownValues = [];\n      /** Whether to open the dropdown when the addon button is clicked. */\n      this.openDropdownOnAddOnClicked = true;\n      /** Id attribute for input element inside MultiInput component */\n      this.inputId = '';\n      /** Whether the search term should be highlighted in results. */\n      this.highlight = true;\n      /**\n       * Filter function. Accepts an array and a string as arguments, and outputs an array.\n       * An arrow function can be used to access the *this* keyword in the calling component.\n       * See multi input examples for details.\n       */\n      this.filterFn = this._defaultFilter;\n      /**\n       * Value function. Accepts an object of the same type as the\n       * items passed to dropdownValues as argument, and outputs any property, that should be used as value.\n       * An arrow function can be used to access the *this* keyword in the calling component.\n       * See multi input examples for details.\n       */\n      this.valueFn = this._defaultValueFn;\n      /**\n       * Display function. Accepts an object of the same type as the\n       * items passed to dropdownValues as argument, and outputs a string.\n       * An arrow function can be used to access the *this* keyword in the calling component.\n       * See multi input examples for details.\n       */\n      this.displayFn = this._defaultDisplay;\n      /**\n       * Parse function. Used for submitting new tokens. Accepts a string by default.\n       * An arrow function can be used to access the *this* keyword in the calling component.\n       * See multi input examples for details.\n       */\n      this.newTokenParseFn = this._defaultParse;\n      /**\n       * Validate function. Used to check if new token can be added into list.\n       * Works only, when `allowNewTokens` option is enabled.\n       */\n      this.newTokenValidateFn = this._defaultTokenValidate;\n      /**\n       * Preset options for the Select body width, whatever is chosen, the body has a 600px limit.\n       * * `at-least` will apply a minimum width to the body equivalent to the width of the control. - Default\n       * * `equal` will apply a width to the body equivalent to the width of the control.\n       * * 'fit-content' will apply width needed to properly display items inside, independent of control.\n       */\n      this.fillControlMode = 'at-least';\n      /**\n       * Whether AddOn Button should be focusable\n       * @default true\n       */\n      this.buttonFocusable = true;\n      /** Whether the multi-input allows the creation of new tokens. */\n      this.allowNewTokens = false;\n      /** Whether the multi-input should be built on mobile mode */\n      this.mobile = false;\n      /** Whether the multi-input should have show all button. */\n      this.showAllButton = true;\n      /**\n       * Max width of multi input body.\n       * `none` will not limit width of the dropdown.\n       * `container` will limit width of the dropdown to the width of the multi-input itself.\n       * `number` will limit width of the dropdown by provided number in pixels.\n       */\n      this.bodyMaxWidth = 'none';\n      /** Multi Input Mobile Configuration, it's applied only, when mobile is enabled */\n      this.mobileConfig = {\n        hasCloseButton: true,\n        approveButtonText: 'Select'\n      };\n      /**\n       * Whether or not to return results where the input matches the entire string. By default, only results that start\n       * with the input search term will be returned.\n       */\n      this.includes = false;\n      /** Whether list item options should be rendered as byline. */\n      this.byline = false;\n      /** Whether the autocomplete should be enabled; Enabled by default */\n      this.autoComplete = true;\n      /** Event emitted when the search term changes. Use *$event* to access the new term. */\n      this.searchTermChange = new EventEmitter();\n      /** Event emitted when the selected items change. Use *$event* to access the new selected array. */\n      this.selectedChange = new EventEmitter();\n      /** Whether multi input popover body should be opened */\n      this.open = false;\n      /** Whether or not to display the addon button. */\n      this.displayAddonButton = true;\n      /** Event emitted, when the multi input's popover body is opened or closed */\n      this.openChange = new EventEmitter();\n      /** Emits event when the addon button is clicked. */\n      this.addOnButtonClicked = new EventEmitter();\n      /** Event emitted, when the multi input's all item checked or not */\n      this.allItemsSelectedChange = new EventEmitter();\n      /** @hidden */\n      this.optionItems$ = new BehaviorSubject([]);\n      /** @hidden */\n      this._searchTermCtrl = new FormControl('');\n      /** @hidden */\n      this._selectionModel = new SelectionModel(true);\n      /** @hidden */\n      this._viewModel$ = this._getViewModel();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this._rangeSelector = new RangeSelector();\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n    }\n    /** @hidden */\n    ngOnInit() {\n      this.buildComponentCssClass();\n      this._subscriptions.add(this._rtlService?.rtl.subscribe(isRtl => {\n        this._dir = isRtl ? 'rtl' : 'ltr';\n        this.buildComponentCssClass();\n      }));\n      if (!this.inputId) {\n        this.inputId = uuidv4();\n      }\n      this._subscriptions.add(this._searchTermCtrl.valueChanges.pipe(distinctUntilChanged()).subscribe(searchTerm => {\n        this.searchTermChange.emit(searchTerm ?? '');\n        // resetting existing selection state, if any\n        this._rangeSelector.reset();\n      }));\n      this._subscriptions.add(this._getViewModel().pipe(map(viewModel => !viewModel.displayedOptions.some(c => !c.isSelected))).subscribe(allItemsSelected => this.allItemsSelectedChange.emit(allItemsSelected)));\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      this.buildComponentCssClass();\n      if (changes.dropdownValues || changes.searchTerm || changes.valueFn || changes.displayFn) {\n        const optionItems = (this.dropdownValues ?? []).map(item => this._getOptionItem(item));\n        this.optionItems$.next(optionItems);\n        this._changeDetRef.markForCheck();\n      }\n      if (changes.disabled) {\n        this.disabled ? this._searchTermCtrl.disable() : this._searchTermCtrl.enable();\n      }\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      if (this.mobile) {\n        this._setUpMobileMode();\n      }\n      this.tokenizer._showOverflowPopover = false;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n    /** @hidden CssClassBuilder interface implementation\n     * function must return single string\n     * function is responsible for order which css classes are applied\n     */\n    buildComponentCssClass() {\n      // TODO: this icon flip may be addressed in styles in the future\n      if (this.glyph === 'value-help' && this._dir === 'rtl') {\n        const icon = this._elementRef.nativeElement.querySelector('.sap-icon--value-help');\n        if (icon) {\n          icon.style.transform = 'scaleX(-1)';\n        }\n      }\n      return ['fd-multi-input', 'fd-multi-input-custom', this.class];\n    }\n    /** @hidden */\n    elementRef() {\n      return this._elementRef;\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      if (isDisabled) {\n        this._elementRef.nativeElement.style.pointerEvents = 'none';\n      } else {\n        this._elementRef.nativeElement.style.pointerEvents = 'auto';\n      }\n      this._changeDetRef.detectChanges();\n    }\n    /** @hidden */\n    writeValue(selected) {\n      this.selected = selected;\n      this._changeDetRef.markForCheck();\n    }\n    /** Method passed to list component */\n    handleListFocusEscape(direction) {\n      if (direction === 'up' && !this.mobile) {\n        this.searchInputElement.nativeElement.focus();\n      }\n    }\n    /** @hidden */\n    openChangeHandle(open) {\n      if (this.disabled) {\n        return;\n      }\n      if (!open && this.open && !this.mobile) {\n        this.searchInputElement.nativeElement.focus();\n      }\n      if (this.open !== open) {\n        this.openChange.emit(open);\n      }\n      this.open = open;\n      if (!this.mobile) {\n        this._popoverOpenHandle(open);\n      }\n      if (!this.open) {\n        this._resetSearchTerm();\n        this.enableParentFocusTrap();\n      } else {\n        this.disableParentFocusTrap();\n        this.searchInputElement?.nativeElement.focus();\n      }\n      this.tokenizer.removeSelectedTokens();\n      this.tokenizer.tokenizerInnerEl.nativeElement.scrollLeft = this.tokenizer.tokenizerInnerEl.nativeElement.scrollWidth;\n      this._changeDetRef.detectChanges();\n    }\n    /** Method that selects all possible options. */\n    selectAllItems(selectAll) {\n      if (selectAll) {\n        this.selected = this.optionItems$.getValue().map(c => c.value);\n      } else {\n        this.selected = [];\n      }\n      // On Mobile mode changes are propagated only on approve.\n      this._propagateChange();\n    }\n    /** @hidden */\n    _onCheckboxKeyup(value, event, index) {\n      if (KeyUtil.isKeyCode(event, [SPACE, ENTER])) {\n        this._onCheckboxClick(value, event, index);\n      }\n    }\n    /** @hidden */\n    _onCheckboxClick(value, event, index, isListItem = false) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const toggledSelection = !_this._selectionModel.isSelected(value);\n        _this._rangeSelector.onRangeElementToggled(index, event);\n        const sub = _this._viewModel$.pipe(first()).subscribe(vm => {\n          _this._rangeSelector.applyValueToEachInRange(idx => _this._handleSelect(toggledSelection, vm.displayedOptions[idx].value, false));\n        });\n        _this._subscriptions.add(sub);\n        if (isListItem) {\n          _this.openChangeHandle(false);\n        } else {\n          // stop propagation on the checkbox so event doesn't reach the list item\n          event.stopPropagation();\n        }\n      })();\n    }\n    /** @hidden */\n    _onTokenClick(value, resetSearch, event) {\n      event?.preventDefault(); // prevent this function from being called twice when checkbox updates\n      this._handleSelect(false, value, resetSearch);\n    }\n    /** @hidden */\n    _handleSelect(checked, value, resetSearch = true) {\n      const previousLength = this._selectionModel.selected.length;\n      if (checked) {\n        this._selectionModel.select(value);\n      } else {\n        this._selectionModel.deselect(value);\n      }\n      // Handle popover placement update\n      if (this._shouldPopoverBeUpdated(previousLength, this._selectionModel.selected.length)) {\n        this.popoverRef.refreshPosition();\n      }\n      if (resetSearch) {\n        this._resetSearchTerm();\n        this.searchInputElement.nativeElement.focus();\n      }\n      if (this._selectionModel.selected.length === 0) {\n        this.searchInputElement.nativeElement.focus();\n        this._changeDetRef.detectChanges();\n      }\n      // On Mobile mode changes are propagated only on approve.\n      this._propagateChange();\n    }\n    /** @hidden */\n    _handleInputKeydown(event) {\n      if (KeyUtil.isKeyCode(event, DOWN_ARROW) && !this.mobile) {\n        if (event.altKey) {\n          this.openChangeHandle(true);\n        }\n        if (this.listComponent) {\n          this.listComponent.setItemActive(0);\n          event.preventDefault();\n        }\n      } else if (KeyUtil.isKeyCode(event, [DOWN_ARROW, UP_ARROW, ENTER])) {\n        this.openChangeHandle(true);\n      } else if (KeyUtil.isKeyCode(event, ESCAPE)) {\n        this.openChangeHandle(false);\n      } else if (KeyUtil.isKeyCode(event, TAB) && this.open) {\n        if (this.listComponent) {\n          this.listComponent.setItemActive(0);\n          event.preventDefault();\n        }\n      } else if (KeyUtil.isKeyType(event, 'alphabetical') || KeyUtil.isKeyType(event, 'numeric')) {\n        if (!this.open) {\n          this.openChangeHandle(true);\n          this.searchInputElement.nativeElement.focus();\n        }\n      }\n    }\n    /** @hidden */\n    _showAllClicked(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._searchTermCtrl.setValue('');\n      this.searchInputElement.nativeElement.focus();\n    }\n    /** @hidden */\n    _showAllKeyDown(event) {\n      if (KeyUtil.isKeyCode(event, [SPACE, ENTER])) {\n        this._showAllClicked(event);\n      }\n    }\n    /** @hidden */\n    _onSubmit() {\n      const searchTerm = this.searchTerm;\n      if (searchTerm === '') {\n        return;\n      }\n      const isExist = this._selectFirstFiltered(searchTerm);\n      if (!isExist && this.allowNewTokens && this.newTokenValidateFn(this._searchTermCtrl.value ?? '')) {\n        const newToken = this.newTokenParseFn(this._searchTermCtrl.value ?? '');\n        this._addNewTokenToDropDownValues(newToken);\n        this._handleSelect(true, newToken);\n        this._searchTermCtrl.setValue('');\n        this.open = false;\n      }\n    }\n    /** @hidden */\n    _handleComplete({\n      term\n    }) {\n      this.searchTerm = term;\n    }\n    /**\n     * Handle dialog dismissing, closes popover and sets backup data.\n     */\n    dialogDismiss(selectedBackup) {\n      this.openChangeHandle(false);\n      this._resetSearchTerm();\n      this.selected = selectedBackup;\n    }\n    /**\n     * Handle dialog approval, closes popover and propagates data changes.\n     */\n    dialogApprove() {\n      this._propagateChange(true);\n      this.openChangeHandle(false);\n      this._resetSearchTerm();\n    }\n    /** @hidden */\n    _moreClicked() {\n      this.openChangeHandle(true);\n    }\n    /** @hidden */\n    _addOnButtonClicked(event) {\n      this.addOnButtonClicked.emit(event);\n      if (this.openDropdownOnAddOnClicked) {\n        this.openChangeHandle(!this.open);\n      } else if (this.open) {\n        this.openChangeHandle(false);\n      }\n    }\n    /** @hidden */\n    disableParentFocusTrap() {\n      this._focusTrapService?.pauseCurrentFocusTrap();\n    }\n    /** @hidden */\n    enableParentFocusTrap() {\n      this._focusTrapService?.unpauseCurrentFocusTrap();\n    }\n    /** @hidden */\n    _addNewTokenToDropDownValues(newToken) {\n      this.dropdownValues.push(newToken);\n      const newOption = this._getOptionItem(newToken);\n      this.optionItems$.next([...this.optionItems$.value, newOption]);\n    }\n    /** @hidden */\n    _selectFirstFiltered(searchTerm) {\n      const filtered = this.filterFn(this.dropdownValues, searchTerm);\n      if (Array.isArray(filtered) && filtered.length > 0 && this.autoComplete) {\n        const optionItem = this._getOptionItem(filtered[0]);\n        this._handleSelect(true, optionItem.value);\n        this._searchTermCtrl.setValue('');\n        this.open = false;\n        return true;\n      }\n      return false;\n    }\n    /** @hidden */\n    _defaultFilter(contentArray, searchTerm = '') {\n      const searchLower = searchTerm.toLocaleLowerCase();\n      return contentArray.filter(item => {\n        if (item) {\n          const displayedValue = this.displayFn(item);\n          const term = typeof displayedValue === 'string' ? displayedValue.toLocaleLowerCase() : '';\n          return this.includes ? term.includes(searchLower) : term.startsWith(searchLower);\n        }\n      });\n    }\n    /** @hidden */\n    _defaultValueFn(value) {\n      return value;\n    }\n    /** @hidden */\n    _defaultDisplay(str) {\n      return str;\n    }\n    /** @hidden */\n    _defaultParse(str) {\n      return str;\n    }\n    /** @hidden */\n    _defaultTokenValidate(str) {\n      return !!str;\n    }\n    /** @hidden */\n    _popoverOpenHandle(open) {\n      this.open = open;\n    }\n    /** @hidden */\n    _propagateChange(emitInMobile) {\n      if (!this.mobile || emitInMobile) {\n        const selected = [...this._selectionModel.selected];\n        this.onChange(selected);\n        this.selectedChange.emit(selected);\n      }\n    }\n    /** @hidden */\n    _shouldPopoverBeUpdated(previousLength, currentLength) {\n      return !!this.popoverRef && (previousLength === 0 && currentLength === 1 || previousLength === 1 && currentLength === 0);\n    }\n    /** @hidden */\n    _setUpMobileMode() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const injector = Injector.create({\n          providers: [{\n            provide: MULTI_INPUT_COMPONENT,\n            useValue: _this2\n          }],\n          parent: _this2._injector\n        });\n        yield _this2._dynamicComponentService.createDynamicModule({\n          listTemplate: _this2.listTemplate,\n          controlTemplate: _this2.controlTemplate\n        }, MultiInputMobileModule, MultiInputMobileComponent, _this2._viewContainerRef, injector);\n      })();\n    }\n    /** @hidden */\n    _resetSearchTerm() {\n      this._searchTermCtrl.setValue('');\n      this._changeDetRef.detectChanges();\n    }\n    /** @hidden */\n    _getOptionItem(item) {\n      const {\n        label,\n        value\n      } = this._getValueAndLabel(item);\n      return {\n        item,\n        label,\n        value,\n        isSelected: false\n      };\n    }\n    /** @hidden */\n    _getValueAndLabel(itemOrValue, optionItems = []) {\n      if (optionItems.length > 0) {\n        itemOrValue = optionItems.find(c => c.value === itemOrValue)?.item ?? itemOrValue;\n      }\n      const defaultDisplay = typeof itemOrValue === 'object' ? itemOrValue[Object.keys(itemOrValue)[0]] : itemOrValue;\n      const value = this.valueFn(itemOrValue) ?? defaultDisplay;\n      const label = this.displayFn(itemOrValue) ?? defaultDisplay;\n      return {\n        label,\n        value\n      };\n    }\n    /** @hidden */\n    _getViewModel() {\n      return combineLatest([this._searchTermCtrl.valueChanges.pipe(startWith(this._searchTermCtrl.value)), this._selectionModel.changed.pipe(startWith(null)), this.optionItems$]).pipe(map(([,, optionItems]) => {\n        const selected = this.selected.map(c => this._getValueAndLabel(c, optionItems));\n        // not using \"searchTerm\" value from combineLatest as it will be wrong for late subscribers, if any\n        const searchTerm = this._searchTermCtrl.value ?? '';\n        const filtered = this.filterFn(optionItems.map(c => c.item), searchTerm);\n        const displayedOptions = (Array.isArray(filtered) ? filtered : []).map(item => this._getOptionItem(item));\n        displayedOptions.forEach(c => c.isSelected = selected.findIndex(d => d.value === c.value) > -1);\n        return {\n          selectedOptions: selected,\n          displayedOptions\n        };\n      }));\n    }\n    /** @hidden */\n    _focusOut(event) {\n      if (!this._elementRef.nativeElement.contains(event.relatedTarget)) {\n        this.onTouched();\n      }\n    }\n  }\n  MultiInputComponent.ɵfac = function MultiInputComponent_Factory(t) {\n    return new (t || MultiInputComponent)(i0.ɵɵdirectiveInject(i1$1.ContentDensityObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2$1.DynamicComponentService), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2$1.RtlService, 8), i0.ɵɵdirectiveInject(i2$1.FocusTrapService, 8));\n  };\n  MultiInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MultiInputComponent,\n    selectors: [[\"fd-multi-input\"]],\n    viewQuery: function MultiInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(PopoverComponent, 5);\n        i0.ɵɵviewQuery(_c1, 5, TemplateRef);\n        i0.ɵɵviewQuery(_c2, 5, TemplateRef);\n        i0.ɵɵviewQuery(ListComponent, 5);\n        i0.ɵɵviewQuery(_c3, 5, ElementRef);\n        i0.ɵɵviewQuery(TokenizerComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popoverRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchInputElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tokenizer = _t.first);\n      }\n    },\n    hostBindings: function MultiInputComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusout\", function MultiInputComponent_focusout_HostBindingHandler($event) {\n          return ctx._focusOut($event);\n        });\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      disabled: \"disabled\",\n      required: \"required\",\n      compactCollapse: \"compactCollapse\",\n      maxHeight: \"maxHeight\",\n      glyph: \"glyph\",\n      dropdownValues: \"dropdownValues\",\n      openDropdownOnAddOnClicked: \"openDropdownOnAddOnClicked\",\n      searchTerm: \"searchTerm\",\n      inputId: \"inputId\",\n      highlight: \"highlight\",\n      selected: \"selected\",\n      class: \"class\",\n      filterFn: \"filterFn\",\n      valueFn: \"valueFn\",\n      displayFn: \"displayFn\",\n      newTokenParseFn: \"newTokenParseFn\",\n      newTokenValidateFn: \"newTokenValidateFn\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      fillControlMode: \"fillControlMode\",\n      state: \"state\",\n      buttonFocusable: \"buttonFocusable\",\n      allowNewTokens: \"allowNewTokens\",\n      mobile: \"mobile\",\n      showAllButton: \"showAllButton\",\n      bodyMaxWidth: \"bodyMaxWidth\",\n      mobileConfig: \"mobileConfig\",\n      includes: \"includes\",\n      itemTemplate: \"itemTemplate\",\n      title: \"title\",\n      byline: \"byline\",\n      autoComplete: \"autoComplete\",\n      open: \"open\",\n      displayAddonButton: \"displayAddonButton\"\n    },\n    outputs: {\n      searchTermChange: \"searchTermChange\",\n      selectedChange: \"selectedChange\",\n      openChange: \"openChange\",\n      addOnButtonClicked: \"addOnButtonClicked\",\n      allItemsSelectedChange: \"allItemsSelectedChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MultiInputComponent),\n      multi: true\n    }, MenuKeyboardService, registerFormItemControl(MultiInputComponent), contentDensityObserverProviders()]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c7,\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [1, \"fd-multi-input\", \"fd-multi-input-custom\"], [1, \"fd-multi-input-field\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"additionalBodyClass\", \"fd-popover-custom-list\", \"class\", \"fd-multi-input-popover-custom\", 3, \"isOpen\", \"triggers\", \"maxWidth\", \"disabled\", \"fillControlMode\", \"isOpenChange\", \"input\", 4, \"ngIf\"], [\"control\", \"\"], [\"list\", \"\"], [\"itemSource\", \"\"], [3, \"ngTemplateOutlet\"], [\"additionalBodyClass\", \"fd-popover-custom-list\", 1, \"fd-multi-input-popover-custom\", 3, \"isOpen\", \"triggers\", \"maxWidth\", \"disabled\", \"fillControlMode\", \"isOpenChange\", \"input\"], [3, \"submit\"], [4, \"ngTemplateOutlet\"], [1, \"fd-multi-input-input-group-custom\", 3, \"state\", \"buttonFocusable\", \"button\", \"disabled\", \"isExpanded\", \"isControl\", \"glyph\", \"iconTitle\", \"addOnButtonClicked\"], [\"tabindex\", \"-1\", 1, \"fd-multi-input-tokenizer-custom\", 3, \"compactCollapse\", \"open\", \"tokenizerFocusable\", \"moreClickedEvent\"], [\"tokenizer\", \"\"], [3, \"disabled\", \"onCloseClick\", \"onRemove\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"type\", \"text\", \"autocomplete\", \"off\", \"fd-form-control\", \"\", \"fd-input-group-input\", \"\", \"fdkAutoComplete\", \"\", 1, \"fd-input\", \"fd-tokenizer__input\", \"fd-multi-input-tokenizer-input\", 3, \"displayFn\", \"inputText\", \"options\", \"enable\", \"placeholder\", \"formControl\", \"onComplete\", \"keydown\", \"focus\", \"blur\"], [\"searchInputElement\", \"\"], [3, \"disabled\", \"onCloseClick\", \"onRemove\"], [3, \"innerHtml\"], [\"fd-list\", \"\", \"class\", \"fd-multi-input-menu-overflow\", 3, \"selection\", \"mobileMode\", \"maxHeight\", \"byline\", \"minWidth\", \"focusEscapeList\", 4, \"ngIf\"], [\"fd-list\", \"\", 1, \"fd-multi-input-menu-overflow\", 3, \"selection\", \"mobileMode\", \"byline\", \"focusEscapeList\"], [\"fd-list-item\", \"\", 3, \"selected\", \"click\", \"keyup\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"fd-list-item\", \"\", \"class\", \"fd-multi-input-show-all\", 3, \"keyDown\", \"click\", 4, \"ngIf\"], [\"fd-list-item\", \"\", 3, \"selected\", \"click\", \"keyup\"], [3, \"value\", \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"fd-list-item\", \"\", 1, \"fd-multi-input-show-all\", 3, \"keyDown\", \"click\"], [\"fd-link\", \"\", \"tabindex\", \"0\"], [\"fd-list-title\", \"\", 3, \"innerHtml\", 4, \"ngIf\"], [\"fd-list-title\", \"\", 3, \"innerHtml\"]],\n    template: function MultiInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, MultiInputComponent_ng_container_0_Template, 11, 2, \"ng-container\", 0);\n        i0.ɵɵpipe(1, \"async\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx._viewModel$));\n      }\n    },\n    dependencies: [i3$1.NgForOf, i3$1.NgIf, i3$1.NgTemplateOutlet, i4.TokenComponent, i4.TokenizerComponent, i5$1.ɵNgNoValidate, i5$1.DefaultValueAccessor, i5$1.NgControlStatus, i5$1.NgControlStatusGroup, i5$1.NgForm, i5$1.FormControlDirective, i6.ListComponent, i6.ListItemComponent, i6.ListTitleDirective, i7.PopoverControlComponent, i7.PopoverBodyComponent, i7.PopoverComponent, i8.InputGroupComponent, i8.InputGroupInputDirective, i9.FormControlComponent, i9.InputFormControlDirective, i10.CheckboxComponent, i11.LinkComponent, i2$1.AutoCompleteDirective, i3$1.AsyncPipe, i2$1.SearchHighlightPipe],\n    styles: [\".fd-multi-input-tokenizer-custom{width:calc(100% - 2.25rem)}[class*=--compact] .fd-multi-input-tokenizer-custom:not([class*=\\\"--cozy\\\"]):not([class*=\\\"--condensed\\\"]),.is-compact .fd-multi-input-tokenizer-custom:not(.is-cozy):not(.is-condensed),.fd-multi-input-tokenizer-custom[class*=--compact],.fd-multi-input-tokenizer-custom.is-compact{width:calc(100% - 2rem)}.fd-multi-input-input-group-custom{max-width:100%}.fd-multi-input-custom{display:block}.fd-multi-input-item{cursor:pointer;padding:0}.fd-multi-input-popover-size{overflow:auto;display:block}.fd-multi-input-popover-custom.fd-popover-custom{max-width:100%;display:block}.fd-multi-input-show-all{width:100%;display:flex;justify-content:flex-end;background-color:transparent}.fd-multi-input-show-all .fd-link:active{color:inherit}.fd-multi-input-checkbox{width:100%;cursor:pointer}.fd-multi-input-checkbox .fd-checkbox__label{color:inherit}.fd-multi-input-menu-overflow{max-width:37.5rem}.fd-input.fd-multi-input-tokenizer-input{min-width:4rem;margin-top:0;margin-bottom:0;padding-left:0;background-color:transparent}.fd-list--multi-input{max-width:100%}.fd-popover__body--hidden{display:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  __decorate([applyCssClass, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", Array)], MultiInputComponent.prototype, \"buildComponentCssClass\", null);\n  return MultiInputComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedMultiInputCompactDirective = /*#__PURE__*/(() => {\n  class DeprecatedMultiInputCompactDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-multi-input');\n    }\n  }\n  DeprecatedMultiInputCompactDirective.ɵfac = function DeprecatedMultiInputCompactDirective_Factory(t) {\n    return new (t || DeprecatedMultiInputCompactDirective)();\n  };\n  DeprecatedMultiInputCompactDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedMultiInputCompactDirective,\n    selectors: [[\"fd-multi-input\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedMultiInputCompactDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedMultiInputCompactDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MultiInputModule = /*#__PURE__*/(() => {\n  class MultiInputModule {}\n  MultiInputModule.ɵfac = function MultiInputModule_Factory(t) {\n    return new (t || MultiInputModule)();\n  };\n  MultiInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MultiInputModule\n  });\n  MultiInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, TokenModule, FormsModule, ReactiveFormsModule, ListModule, PopoverModule, PipeModule, InputGroupModule, FormModule, CheckboxModule, LinkModule, AutoCompleteModule, ContentDensityModule, ContentDensityModule]\n  });\n  return MultiInputModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DeprecatedMultiInputCompactDirective, MULTI_INPUT_COMPONENT, MultiInputComponent, MultiInputMobileComponent, MultiInputMobileModule, MultiInputModule };\n//# sourceMappingURL=fundamental-ngx-core-multi-input.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}