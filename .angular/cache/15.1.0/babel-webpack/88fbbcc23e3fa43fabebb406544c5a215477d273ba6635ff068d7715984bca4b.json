{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Optional, Directive, Attribute, EventEmitter, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, ViewChild, Inject, forwardRef, HostBinding, NgModule } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '@fundamental-ngx/core/icon';\nimport * as i5 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject, Subscription } from 'rxjs';\nimport * as i2 from '@fundamental-ngx/core/datetime';\nimport { DATE_TIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport * as i1 from '@fundamental-ngx/cdk/utils';\nimport equal from 'fast-deep-equal';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport * as i1$1 from '@fundamental-ngx/core/content-density';\nimport { contentDensityObserverProviders, DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\n\n/**\n * Provides i18n support for labels inside the calendar component.\n */\nconst _c0 = [\"prevButton\"];\nfunction CalendarHeaderComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 10)(2, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function CalendarHeaderComponent_ng_container_5_Template_button_click_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4._processViewChange(\"month\", $event));\n    });\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"div\", 10)(6, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function CalendarHeaderComponent_ng_container_5_Template_button_click_6_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6._processViewChange(\"year\", $event));\n    });\n    i0.ɵɵelementStart(7, \"span\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-labelledby\", ctx_r1._monthButtonLabelId + \" \" + ctx_r1._selectMonthButtonAriaLabelId)(\"data-fd-calendar-month\", ctx_r1.currentlyDisplayed.month);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", ctx_r1._monthButtonLabelId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.selectMonthLabel);\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-labelledby\", ctx_r1._yearButtonLabelId + \" \" + ctx_r1._selectYearButtonAriaLabelId)(\"data-fd-calendar-year\", ctx_r1.currentlyDisplayed.year);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", ctx_r1._yearButtonLabelId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.selectYearLabel);\n  }\n}\nfunction CalendarHeaderComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 12)(2, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CalendarHeaderComponent_ng_container_6_Template_button_click_2_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7._processViewChange(\"aggregatedYear\", $event));\n    });\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-labelledby\", ctx_r2._yearsRangeButtonLabelId + \" \" + ctx_r2._selectYearsRangeButtonAriaLabelId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", ctx_r2._yearsRangeButtonLabelId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.selectAggregatedYearLabel);\n  }\n}\nfunction CalendarHeaderComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function CalendarHeaderComponent_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9._emitClose());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalendarDayViewComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"id\", ctx_r0._weekNumbersColumnHeaderId)(\"aria-label\", ctx_r0._weekColumnLabelAriaLabel);\n  }\n}\nfunction CalendarDayViewComponent_th_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 8)(1, \"span\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const day_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.longWeekDays[i_r6]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r5);\n  }\n}\nfunction CalendarDayViewComponent_tr_6_th_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const rowIndex_r8 = i0.ɵɵnextContext(2).index;\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11._weeks[rowIndex_r8], \" \");\n  }\n}\nfunction CalendarDayViewComponent_tr_6_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 12);\n    i0.ɵɵtemplate(1, CalendarDayViewComponent_tr_6_th_1_span_1_Template, 2, 1, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const rowIndex_r8 = i0.ɵɵnextContext().index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"data-fd-calendar-week\", ctx_r9._weeks[rowIndex_r8])(\"id\", ctx_r9.viewId + \"-week-\" + ctx_r9._weeks[rowIndex_r8])(\"aria-labelledby\", ctx_r9._weekNumbersColumnHeaderId + \" \" + (ctx_r9.viewId + \"-week-\" + ctx_r9._weeks[rowIndex_r8]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9._weeks && ctx_r9._weeks[rowIndex_r8]);\n  }\n}\nfunction CalendarDayViewComponent_tr_6_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵlistener(\"click\", function CalendarDayViewComponent_tr_6_td_2_Template_td_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const cell_r14 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.selectDate(cell_r14, $event));\n    })(\"mouseenter\", function CalendarDayViewComponent_tr_6_td_2_Template_td_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const cell_r14 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18._refreshHoverRange(cell_r14));\n    })(\"keydown\", function CalendarDayViewComponent_tr_6_td_2_Template_td_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const cell_r14 = restoredCtx.$implicit;\n      const cellIndex_r15 = restoredCtx.index;\n      const rowIndex_r8 = i0.ɵɵnextContext().index;\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19._onKeydownDayHandler($event, cell_r14, ctx_r19._getIndex(rowIndex_r8, cellIndex_r15)));\n    });\n    i0.ɵɵelementStart(1, \"span\", 15);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 7);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const cell_r14 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(cell_r14.specialNumber ? \"fd-calendar__special-day--\" + cell_r14.specialNumber : \"\");\n    i0.ɵɵclassProp(\"is-active\", cell_r14.selectedFirst || cell_r14.selectedLast || cell_r14.selected)(\"fd-calendar__item--range\", (cell_r14.selectedRange || cell_r14.hoverRange) && !cell_r14.selectedFirst && !cell_r14.selectedLast)(\"fd-calendar__item--current\", cell_r14.current)(\"fd-calendar__item--weekend\", cell_r14.weekend && ctx_r10.markWeekends && cell_r14.monthStatus === \"current\")(\"fd-calendar__item--other-month\", cell_r14.monthStatus !== \"current\")(\"is-disabled\", cell_r14.disabled);\n    i0.ɵɵattribute(\"id\", cell_r14.id)(\"data-fd-calendar-date-day\", cell_r14.label)(\"data-fd-calendar-day\", cell_r14.index)(\"aria-selected\", cell_r14.selected)(\"aria-disabled\", cell_r14.disabled)(\"tabindex\", cell_r14.isTabIndexed ? 0 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-labelledby\", cell_r14.id + \"-aria-label \" + (cell_r14.selectedFirst ? ctx_r10._dateRangeStartLabelId + \" \" : \"\") + (cell_r14.selectedLast ? ctx_r10._dateRangeEndLabelId + \" \" : \"\") + (cell_r14.current ? ctx_r10._todayLabelId + \" \" : \"\") + (cell_r14.selected && ctx_r10.calType === \"single\" ? ctx_r10._selectedDateLabelId + \" \" : \"\") + (cell_r14.past ? ctx_r10._dateInPastLabelId : \"\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(cell_r14.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", cell_r14.id + \"-aria-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", cell_r14.ariaLabel, \" \");\n  }\n}\nfunction CalendarDayViewComponent_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 2);\n    i0.ɵɵtemplate(1, CalendarDayViewComponent_tr_6_th_1_Template, 2, 4, \"th\", 10);\n    i0.ɵɵtemplate(2, CalendarDayViewComponent_tr_6_td_2_Template, 5, 24, \"td\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showWeekNumbers);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r7);\n  }\n}\nfunction CalendarDayViewComponent_tr_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 16);\n    i0.ɵɵelement(1, \"td\", 17);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalendarDayViewComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 16);\n    i0.ɵɵelement(1, \"td\", 17);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalendarMonthViewComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 7);\n    i0.ɵɵlistener(\"keydown\", function CalendarMonthViewComponent_tr_3_td_1_Template_td_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const monthCell_r4 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6._onKeydownMonthHandler($event, monthCell_r4.index));\n    })(\"click\", function CalendarMonthViewComponent_tr_3_td_1_Template_td_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const monthCell_r4 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.selectMonth(monthCell_r4, $event));\n    });\n    i0.ɵɵelementStart(1, \"button\", 8)(2, \"span\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"span\", 4);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const monthCell_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"fd-calendar__item--current\", monthCell_r4.current)(\"is-active\", monthCell_r4.selected);\n    i0.ɵɵattribute(\"tabIndex\", monthCell_r4.tabIndex)(\"id\", monthCell_r4.id)(\"aria-selected\", monthCell_r4.selected)(\"aria-disabled\", monthCell_r4.disabled)(\"data-fd-calendar-month\", monthCell_r4.month);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"is-active\", monthCell_r4.current);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-labelledby\", monthCell_r4.id + \"-aria-label \" + (monthCell_r4.current ? ctx_r3._todayLabelId + \" \" : \"\") + (monthCell_r4.selected ? ctx_r3._selectedDateLabelId : \"\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", monthCell_r4.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", monthCell_r4.id + \"-aria-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", monthCell_r4.ariaLabel, \" \");\n  }\n}\nfunction CalendarMonthViewComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 5);\n    i0.ɵɵtemplate(1, CalendarMonthViewComponent_tr_3_td_1_Template, 6, 15, \"td\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const colMonths_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", colMonths_r1);\n  }\n}\nfunction CalendarYearViewComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 7);\n    i0.ɵɵlistener(\"keydown\", function CalendarYearViewComponent_tr_3_td_1_Template_td_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const yearCell_r4 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6._onKeydownYearHandler($event, yearCell_r4.index));\n    })(\"click\", function CalendarYearViewComponent_tr_3_td_1_Template_td_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const yearCell_r4 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.selectYear(yearCell_r4, $event));\n    });\n    i0.ɵɵelementStart(1, \"button\", 8)(2, \"span\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"span\", 4);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const yearCell_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"fd-calendar__item--current\", yearCell_r4.current)(\"is-active\", yearCell_r4.selected);\n    i0.ɵɵattribute(\"id\", yearCell_r4.id)(\"tabindex\", yearCell_r4.tabIndex)(\"aria-selected\", yearCell_r4.selected)(\"aria-disabled\", yearCell_r4.disabled)(\"data-fd-calendar-year\", yearCell_r4.year);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"is-active\", yearCell_r4.current);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-labelledby\", yearCell_r4.id + \"-aria-label \" + (yearCell_r4.current ? ctx_r3._todayLabelId + \" \" : \"\") + (yearCell_r4.selected ? ctx_r3._selectedDateLabelId : \"\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", yearCell_r4.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", yearCell_r4.id + \"-aria-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", yearCell_r4.ariaLabel, \" \");\n  }\n}\nfunction CalendarYearViewComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 5);\n    i0.ɵɵtemplate(1, CalendarYearViewComponent_tr_3_td_1_Template, 6, 15, \"td\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const colYears_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", colYears_r1);\n  }\n}\nfunction CalendarAggregatedYearViewComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 7);\n    i0.ɵɵlistener(\"keydown\", function CalendarAggregatedYearViewComponent_tr_3_td_1_Template_td_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const cell_r4 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6._onKeydownYearHandler($event, cell_r4.index));\n    })(\"click\", function CalendarAggregatedYearViewComponent_tr_3_td_1_Template_td_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const cell_r4 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.selectYear(cell_r4, $event));\n    });\n    i0.ɵɵelementStart(1, \"button\", 8)(2, \"span\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"span\", 4);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const cell_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"fd-calendar__item--current\", cell_r4.current)(\"is-active\", cell_r4.selected);\n    i0.ɵɵattribute(\"id\", cell_r4.id)(\"tabindex\", cell_r4.tabIndex)(\"data-fd-calendar-years\", cell_r4.years.startYear + \"-\" + cell_r4.years.endYear);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"is-active\", cell_r4.current);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-labelledby\", cell_r4.id + \"-aria-label \" + (cell_r4.current ? ctx_r3._todayLabelId + \" \" : \"\") + (cell_r4.selected ? ctx_r3._selectedDateLabelId : \"\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", cell_r4.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", cell_r4.id + \"-aria-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", cell_r4.ariaLabel, \" \");\n  }\n}\nfunction CalendarAggregatedYearViewComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 5);\n    i0.ɵɵtemplate(1, CalendarAggregatedYearViewComponent_tr_3_td_1_Template, 6, 13, \"td\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const colYears_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", colYears_r1);\n  }\n}\nfunction CalendarComponent_ng_container_1_fd_calendar_day_view_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-calendar-day-view\", 8);\n    i0.ɵɵlistener(\"selectedDateChange\", function CalendarComponent_ng_container_1_fd_calendar_day_view_2_Template_fd_calendar_day_view_selectedDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.selectedDateChanged($event));\n    })(\"selectedRangeDateChange\", function CalendarComponent_ng_container_1_fd_calendar_day_view_2_Template_fd_calendar_day_view_selectedRangeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.selectedRangeDateChanged($event));\n    })(\"nextMonthSelect\", function CalendarComponent_ng_container_1_fd_calendar_day_view_2_Template_fd_calendar_day_view_nextMonthSelect_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.displayNextMonth());\n    })(\"previousMonthSelect\", function CalendarComponent_ng_container_1_fd_calendar_day_view_2_Template_fd_calendar_day_view_previousMonthSelect_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.displayPreviousMonth());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedDate\", ctx_r1.selectedDate)(\"showWeekNumbers\", ctx_r1.showWeekNumbers)(\"markWeekends\", ctx_r1.markWeekends)(\"selectedRangeDate\", ctx_r1.selectedRangeDate)(\"currentlyDisplayed\", ctx_r1._currentlyDisplayed)(\"startingDayOfWeek\", ctx_r1.getWeekStartDay())(\"disableFunction\", ctx_r1.disableFunction)(\"disableRangeEndFunction\", ctx_r1.disableRangeEndFunction)(\"disableRangeStartFunction\", ctx_r1.disableRangeStartFunction)(\"calType\", ctx_r1.calType)(\"id\", ctx_r1.id)(\"rangeHoverEffect\", ctx_r1.rangeHoverEffect)(\"specialDaysRules\", ctx_r1.specialDaysRules)(\"focusEscapeFunction\", ctx_r1.escapeFocusFunction);\n  }\n}\nfunction CalendarComponent_ng_container_1_fd_calendar_month_view_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-calendar-month-view\", 9);\n    i0.ɵɵlistener(\"monthClicked\", function CalendarComponent_ng_container_1_fd_calendar_month_view_3_Template_fd_calendar_month_view_monthClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.handleMonthViewChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"monthSelected\", ctx_r2._currentlyDisplayed.month)(\"year\", ctx_r2._currentlyDisplayed.year)(\"id\", ctx_r2.id)(\"focusEscapeFunction\", ctx_r2.escapeFocusFunction);\n  }\n}\nfunction CalendarComponent_ng_container_1_fd_calendar_year_view_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-calendar-year-view\", 10);\n    i0.ɵɵlistener(\"yearClicked\", function CalendarComponent_ng_container_1_fd_calendar_year_view_4_Template_fd_calendar_year_view_yearClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.selectedYear($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"yearSelected\", ctx_r3._currentlyDisplayed.year)(\"yearViewGrid\", ctx_r3.yearGrid)(\"id\", ctx_r3.id)(\"focusEscapeFunction\", ctx_r3.escapeFocusFunction);\n  }\n}\nfunction CalendarComponent_ng_container_1_fd_calendar_aggregated_year_view_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-calendar-aggregated-year-view\", 11);\n    i0.ɵɵlistener(\"yearsClicked\", function CalendarComponent_ng_container_1_fd_calendar_aggregated_year_view_5_Template_fd_calendar_aggregated_year_view_yearsClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.selectedYears($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"yearSelected\", ctx_r4._currentlyDisplayed.year)(\"yearViewGrid\", ctx_r4.yearGrid)(\"aggregatedYearsViewGrid\", ctx_r4.aggregatedYearGrid)(\"id\", ctx_r4.id)(\"focusEscapeFunction\", ctx_r4.escapeFocusFunction);\n  }\n}\nfunction CalendarComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 2);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵtemplate(2, CalendarComponent_ng_container_1_fd_calendar_day_view_2_Template, 1, 14, \"fd-calendar-day-view\", 4);\n    i0.ɵɵtemplate(3, CalendarComponent_ng_container_1_fd_calendar_month_view_3_Template, 1, 4, \"fd-calendar-month-view\", 5);\n    i0.ɵɵtemplate(4, CalendarComponent_ng_container_1_fd_calendar_year_view_4_Template, 1, 4, \"fd-calendar-year-view\", 6);\n    i0.ɵɵtemplate(5, CalendarComponent_ng_container_1_fd_calendar_aggregated_year_view_5_Template, 1, 5, \"fd-calendar-aggregated-year-view\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r0.activeView);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"fd-calendar__content--dates\", ctx_r0.activeView === \"day\")(\"fd-calendar__content--months\", ctx_r0.activeView === \"month\")(\"fd-calendar__content--years\", ctx_r0.activeView === \"year\" || ctx_r0.activeView === \"aggregatedYear\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"day\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"month\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"year\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"aggregatedYear\");\n  }\n}\nlet CalendarI18nLabels = /*#__PURE__*/(() => {\n  class CalendarI18nLabels {\n    constructor() {\n      /** This is event that should be called, when labels are changed, to let component detect an changes. */\n      this.labelsChange = new Subject();\n      /** Year selection aria label. Used on the button to navigate to the years view. */\n      this.yearSelectionLabel = 'Select year';\n      /** Years range selection aria label. Used on the button to navigate to the years range view. */\n      this.yearsRangeSelectionLabel = 'Select years range';\n      /** Month selection aria label. Used on the button to navigate to the months view. */\n      this.monthSelectionLabel = 'Select month';\n      /** Day selection aria label. Used on the button to navigate to the day view. */\n      this.dateSelectionLabel = 'Select date';\n      /** Previous year aria label. Used on the button to switch to a previous year in the years view. */\n      this.previousYearLabel = 'Previous year';\n      /** Next year aria label. Used on the button to switch to a next year in the years view. */\n      this.nextYearLabel = 'Next year';\n      /** Previous month aria label. Used on the button to switch to a previous month in the months view. */\n      this.previousMonthLabel = 'Previous month';\n      /** Next month aria label. Used on the button to switch to a next month in the months view. */\n      this.nextMonthLabel = 'Next month';\n      /** Week number column label */\n      this.weekColumnLabel = 'Calendar week';\n      /** Selected date label. Used on the selected day/month/year cell. */\n      this.dateSelectedLabel = 'Selected date';\n      /** Is used to describe present date */\n      this.todayLabel = 'Today';\n      /** Range start label. Used for date range selection */\n      this.rangeStartLabel = 'Range start';\n      /** Range end label. Used for date range selection */\n      this.rangeEndLabel = 'Range end';\n      /** Past days aria label. Used when days in the past are accessed */\n      this.dayInPastLabel = 'Past days';\n      /** Past days aria label. Used when days in the past are accessed */\n      this.closeCalendarLabel = 'Close calendar';\n      /** Calendar day view aria role description. */\n      this.calendarDayViewDescription = 'Calendar';\n      /** Calendar month view aria role description. */\n      this.calendarMonthViewDescription = 'Month picker';\n      /** Calendar years view aria role description. */\n      this.calendarYearsViewDescription = 'Year picker';\n      /** Calendar years range view aria role description. */\n      this.calendarYearsRangeViewDescription = 'Years range picker';\n    }\n  }\n  CalendarI18nLabels.ɵfac = function CalendarI18nLabels_Factory(t) {\n    return new (t || CalendarI18nLabels)();\n  };\n  CalendarI18nLabels.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CalendarI18nLabels,\n    factory: CalendarI18nLabels.ɵfac,\n    providedIn: 'root'\n  });\n  return CalendarI18nLabels;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CalendarService = /*#__PURE__*/(() => {\n  class CalendarService {\n    /** @hidden */\n    constructor(_rtlService) {\n      this._rtlService = _rtlService;\n      /** Row amount */\n      this.rowAmount = 3;\n      /** Column amount */\n      this.colAmount = 4;\n      /** Event thrown, when the element is selected by space or enter keys */\n      this.onKeySelect = new Subject();\n      /** Event thrown, when the focus goes after list of elements */\n      this.onListEndApproach = new Subject();\n      /** Event thrown, when the focus goes before list of elements */\n      this.onListStartApproach = new Subject();\n      /** Event thrown, when the focus is changed. */\n      this.onFocusIdChange = new Subject();\n    }\n    /**\n     * Standardized method to calculate grid [x][y] to index number\n     */\n    getId(row, col) {\n      return row * this.colAmount + col;\n    }\n    /**\n     * Method that handles keydown events, dedicated for All Calendar views, which have a list with row x col elements.\n     * Triggers the events, when the focus approaches start and end of list. Or when there is basic change of focus.\n     * Triggers also event, when the element is selected by enter key, or space bar.\n     * @param event KeyboardEvent\n     * @param index which is number (0 - (rowAmount * colAmount))\n     */\n    onKeydownHandler(event, index) {\n      const rtl = this._rtlService && this._rtlService.rtl.getValue();\n      switch (event.key) {\n        case 'Spacebar':\n        case 'Enter':\n        case ' ':\n          {\n            event.preventDefault();\n            this.onKeySelect.next(index);\n            break;\n          }\n        case 'Left':\n        case 'ArrowLeft':\n          {\n            event.preventDefault();\n            if (!rtl) {\n              this.focusLeftElement(index);\n            } else {\n              this.focusRightElement(index);\n            }\n            break;\n          }\n        case 'Right':\n        case 'ArrowRight':\n          {\n            event.preventDefault();\n            if (!rtl) {\n              this.focusRightElement(index);\n            } else {\n              this.focusLeftElement(index);\n            }\n            break;\n          }\n        case 'Up':\n        case 'ArrowUp':\n          {\n            event.preventDefault();\n            if (index <= this.colAmount - 1) {\n              this.onListStartApproach.next(this.getId(this.rowAmount - 1, 0) + index);\n            } else {\n              this.onFocusIdChange.next(index - this.colAmount);\n            }\n            break;\n          }\n        case 'Down':\n        case 'ArrowDown':\n          {\n            event.preventDefault();\n            if (index >= this.getId(this.rowAmount - 1, 0)) {\n              this.onListEndApproach.next(index - this.getId(this.rowAmount - 1, 0));\n            } else {\n              this.onFocusIdChange.next(index + this.colAmount);\n            }\n            break;\n          }\n        case 'Tab':\n          {\n            if (!event.shiftKey) {\n              if (typeof this.focusEscapeFunction === 'function') {\n                this.focusEscapeFunction(event);\n              } else {\n                const element = document.getElementById(this.leftArrowId);\n                if (element) {\n                  element.focus();\n                }\n              }\n              event.preventDefault();\n              break;\n            }\n          }\n      }\n    }\n    /**\n     * @hidden\n     * Right Element focus trigger\n     */\n    focusRightElement(index) {\n      if (index === this.getId(this.rowAmount, 0) - 1) {\n        this.onListEndApproach.next(0);\n      } else {\n        this.onFocusIdChange.next(index + 1);\n      }\n    }\n    /**\n     * @hidden\n     * Left Element focus trigger\n     */\n    focusLeftElement(index) {\n      if (index === 0) {\n        this.onListStartApproach.next(this.getId(this.rowAmount, 0) - 1);\n      } else {\n        this.onFocusIdChange.next(index - 1);\n      }\n    }\n  }\n  CalendarService.ɵfac = function CalendarService_Factory(t) {\n    return new (t || CalendarService)(i0.ɵɵinject(i1.RtlService, 8));\n  };\n  CalendarService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CalendarService,\n    factory: CalendarService.ɵfac\n  });\n  return CalendarService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CalendarCloseButtonDirective = /*#__PURE__*/(() => {\n  class CalendarCloseButtonDirective {\n    /** @hidden */\n    get _ariaLabel() {\n      return this._originalAriaLabel || this._calendarI18nLabels.closeCalendarLabel;\n    }\n    /** @hidden */\n    get _title() {\n      return this._originalTitle || this._calendarI18nLabels.closeCalendarLabel;\n    }\n    /** @hidden */\n    constructor(_originalAriaLabel, _originalTitle, _calendarI18nLabels) {\n      this._originalAriaLabel = _originalAriaLabel;\n      this._originalTitle = _originalTitle;\n      this._calendarI18nLabels = _calendarI18nLabels;\n    }\n  }\n  CalendarCloseButtonDirective.ɵfac = function CalendarCloseButtonDirective_Factory(t) {\n    return new (t || CalendarCloseButtonDirective)(i0.ɵɵinjectAttribute('aria-label'), i0.ɵɵinjectAttribute('title'), i0.ɵɵdirectiveInject(CalendarI18nLabels));\n  };\n  CalendarCloseButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CalendarCloseButtonDirective,\n    selectors: [[\"\", \"fd-calendar-close-button\", \"\"]],\n    hostAttrs: [1, \"fd-calendar__close-button\"],\n    hostVars: 2,\n    hostBindings: function CalendarCloseButtonDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx._ariaLabel)(\"title\", ctx._title);\n      }\n    }\n  });\n  return CalendarCloseButtonDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Internal use only.\n * Header of the calendar component.\n */\nlet CalendarHeaderComponent = /*#__PURE__*/(() => {\n  class CalendarHeaderComponent {\n    /**\n     * Object to customize year grid\n     */\n    set calendarYearGrid(yearGrid) {\n      this._amountOfYearsPerPeriod = yearGrid.cols * yearGrid.rows - 1;\n      this._calculateSelectAggregatedYearLabel();\n    }\n    /** Get information is calendar is on aggregated years view */\n    get isOnAggregatedYearsView() {\n      return this.activeView === 'aggregatedYear';\n    }\n    /** Get information is calendar is on year view */\n    get isOnYearView() {\n      return this.activeView === 'year';\n    }\n    /** Get information is calendar is on month view */\n    get isOnMonthView() {\n      return this.activeView === 'month';\n    }\n    /** Get information is calendar is on day view */\n    get isOnDayView() {\n      return this.activeView === 'day';\n    }\n    /**\n     * Component id\n     */\n    get viewId() {\n      return this.id + '-header';\n    }\n    /**\n     * @hidden\n     * Previous button id\n     */\n    get _prevButtonId() {\n      return this.viewId + '-left-arrow';\n    }\n    /**\n     * @hidden\n     * Next button id\n     */\n    get _nextButtonId() {\n      return this.viewId + '-right-arrow';\n    }\n    /**\n     * @hidden\n     * Month label id\n     */\n    get _monthButtonLabelId() {\n      return this.viewId + '-month-label';\n    }\n    /**\n     * @hidden\n     * Select month aria label id\n     */\n    get _selectMonthButtonAriaLabelId() {\n      return this.viewId + '-select-month-aria-label';\n    }\n    /**\n     * @hidden\n     * Year label id\n     */\n    get _yearButtonLabelId() {\n      return this.viewId + '-year-label';\n    }\n    /**\n     * @hidden\n     * Select year aria label id\n     */\n    get _selectYearButtonAriaLabelId() {\n      return this.viewId + '-select-year-aria-label';\n    }\n    /**\n     * @hidden\n     * Years range label id\n     */\n    get _yearsRangeButtonLabelId() {\n      return this.viewId + '-years-range-label';\n    }\n    /**\n     * @hidden\n     * Select years range aria label id\n     */\n    get _selectYearsRangeButtonAriaLabelId() {\n      return this.viewId + '-select-years-range-aria-label';\n    }\n    /** @hidden */\n    constructor(_calendarI18nLabels, _changeDetRef, _calendarService, _dateTimeAdapter) {\n      this._calendarI18nLabels = _calendarI18nLabels;\n      this._changeDetRef = _changeDetRef;\n      this._calendarService = _calendarService;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      /** Whether close button should be shown */\n      this.mobileLandscape = false;\n      /** Event emitted when the active view should change. */\n      this.activeViewChange = new EventEmitter();\n      /** Event emitted when the previous button is clicked. */\n      this.previousClicked = new EventEmitter();\n      /** Event emitted when the next button is clicked. */\n      this.nextClicked = new EventEmitter();\n      /** Event thrown, when the close button is clicked */\n      this.closeClicked = new EventEmitter();\n      /** An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)  */\n      this._onDestroy$ = new Subject();\n      /** Month names */\n      this._monthNames = [];\n      /** Get information about amount of years displayed at once on year view  */\n      this._amountOfYearsPerPeriod = 1;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (changes.currentlyDisplayed && !changes.currentlyDisplayed.firstChange || changes.activeView && !changes.activeView.firstChange) {\n        this._calculateLabels();\n        this._calculateAriaLabels();\n      }\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._calendarService.leftArrowId = this._prevButtonId;\n      this._calculateMonthNames();\n      this._calculateLabels();\n      this._calculateAriaLabels();\n      this._listenToLocaleChanges();\n      this._listenToCalendarLabelsChanges();\n    }\n    /**\n     * Focus on focusable control within the header\n     */\n    focus() {\n      this._prevButtonComponent.nativeElement?.focus();\n    }\n    /** @hidden */\n    _processViewChange(type, event) {\n      if (event) {\n        event.stopPropagation();\n      }\n      this.activeView = type === this.activeView ? 'day' : type;\n      this.activeViewChange.emit(this.activeView);\n    }\n    /** @hidden */\n    _emitClose() {\n      this.closeClicked.emit();\n    }\n    /** @hidden */\n    _listenToLocaleChanges() {\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._calculateMonthNames();\n        this._calculateLabels();\n        this._changeDetRef.markForCheck();\n      });\n    }\n    /** @hidden */\n    _listenToCalendarLabelsChanges() {\n      this._calendarI18nLabels.labelsChange.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._calculateAriaLabels();\n        this._changeDetRef.markForCheck();\n      });\n    }\n    /** @hidden */\n    _calculateAriaLabels() {\n      this._calculatePreviousAriaLabel();\n      this._calculateNextAriaLabel();\n      this._calculateSelectMonthAriaLabel();\n      this._calculateSelectYearAriaLabel();\n      this._calculateSelectAggregatedYearAriaLabel();\n    }\n    /** @hidden */\n    _calculateLabels() {\n      this._calculateSelectMonthLabel();\n      this._calculateSelectYearLabel();\n      this._calculateSelectAggregatedYearLabel();\n    }\n    /** @hidden */\n    _calculatePreviousAriaLabel() {\n      this.previousAriaLabel = this.isOnDayView ? this._calendarI18nLabels.previousMonthLabel : this._calendarI18nLabels.previousYearLabel;\n    }\n    /** @hidden */\n    _calculateNextAriaLabel() {\n      this.nextAriaLabel = this.isOnDayView ? this._calendarI18nLabels.nextMonthLabel : this._calendarI18nLabels.nextYearLabel;\n    }\n    /** @hidden */\n    _calculateSelectMonthAriaLabel() {\n      this.selectMonthAriaLabel = this.isOnMonthView ? this._calendarI18nLabels.dateSelectionLabel : this._calendarI18nLabels.monthSelectionLabel;\n    }\n    /** @hidden */\n    _calculateSelectYearAriaLabel() {\n      this.selectYearAriaLabel = this._calendarI18nLabels.yearSelectionLabel;\n    }\n    /** @hidden */\n    _calculateSelectAggregatedYearAriaLabel() {\n      this.selectAggregatedYearAriaLabel = this.isOnAggregatedYearsView ? this._calendarI18nLabels.dateSelectionLabel : this._calendarI18nLabels.yearsRangeSelectionLabel;\n    }\n    /** @hidden */\n    _calculateSelectMonthLabel() {\n      this.selectMonthLabel = this._monthNames[this.currentlyDisplayed.month - 1];\n    }\n    /** @hidden */\n    _calculateSelectYearLabel() {\n      this.selectYearLabel = this._getYearName(this.currentlyDisplayed.year);\n    }\n    /** @hidden */\n    _calculateSelectAggregatedYearLabel() {\n      this.selectAggregatedYearLabel = `${this._getYearName(this.currentlyDisplayed.year)}-${this._getYearName(this.currentlyDisplayed.year + this._amountOfYearsPerPeriod)}`;\n    }\n    /** @hidden */\n    _calculateMonthNames() {\n      this._monthNames = this._dateTimeAdapter.getMonthNames('long');\n    }\n    /** @hidden */\n    _getYearName(year) {\n      return this._dateTimeAdapter.getYearName(this._dateTimeAdapter.createDate(year, 1, 1));\n    }\n  }\n  CalendarHeaderComponent.ɵfac = function CalendarHeaderComponent_Factory(t) {\n    return new (t || CalendarHeaderComponent)(i0.ɵɵdirectiveInject(CalendarI18nLabels), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CalendarService), i0.ɵɵdirectiveInject(i2.DatetimeAdapter));\n  };\n  CalendarHeaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CalendarHeaderComponent,\n    selectors: [[\"fd-calendar-header\"]],\n    viewQuery: function CalendarHeaderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._prevButtonComponent = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function CalendarHeaderComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.viewId);\n      }\n    },\n    inputs: {\n      activeView: \"activeView\",\n      currentlyDisplayed: \"currentlyDisplayed\",\n      previousButtonDisabled: \"previousButtonDisabled\",\n      nextButtonDisabled: \"nextButtonDisabled\",\n      calendarYearGrid: \"calendarYearGrid\",\n      id: \"id\",\n      mobileLandscape: \"mobileLandscape\"\n    },\n    outputs: {\n      activeViewChange: \"activeViewChange\",\n      previousClicked: \"previousClicked\",\n      nextClicked: \"nextClicked\",\n      closeClicked: \"closeClicked\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 17,\n    vars: 19,\n    consts: [[1, \"fd-calendar__header\"], [1, \"fd-calendar__navigation\"], [1, \"fd-calendar__action\", \"fd-calendar__action--arrow-left\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"glyph\", \"slim-arrow-left\", \"type\", \"button\", 3, \"disabled\", \"ariaLabel\", \"click\"], [\"prevButton\", \"\"], [4, \"ngIf\"], [1, \"fd-calendar__action\", \"fd-calendar__action--arrow-right\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"glyph\", \"slim-arrow-right\", \"type\", \"button\", 3, \"disabled\", \"ariaLabel\", \"click\"], [\"fd-button\", \"\", \"fd-calendar-close-button\", \"\", \"class\", \"fd-calendar__close-button--navigation\", \"type\", \"button\", \"glyph\", \"decline\", \"fdType\", \"transparent\", 3, \"click\", 4, \"ngIf\"], [\"hidden\", \"\", \"aria-hidden\", \"true\"], [1, \"fd-calendar__action\"], [\"fd-button\", \"\", \"type\", \"button\", \"fdType\", \"transparent\", 3, \"click\"], [\"aria-live\", \"polite\", 1, \"fd-calendar__action\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"type\", \"button\", 3, \"click\"], [\"fd-button\", \"\", \"fd-calendar-close-button\", \"\", \"type\", \"button\", \"glyph\", \"decline\", \"fdType\", \"transparent\", 1, \"fd-calendar__close-button--navigation\", 3, \"click\"]],\n    template: function CalendarHeaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"header\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"button\", 3, 4);\n        i0.ɵɵlistener(\"click\", function CalendarHeaderComponent_Template_button_click_3_listener() {\n          return ctx.previousClicked.emit();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(5, CalendarHeaderComponent_ng_container_5_Template, 9, 8, \"ng-container\", 5);\n        i0.ɵɵtemplate(6, CalendarHeaderComponent_ng_container_6_Template, 5, 3, \"ng-container\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function CalendarHeaderComponent_Template_button_click_8_listener() {\n          return ctx.nextClicked.emit();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(9, CalendarHeaderComponent_button_9_Template, 1, 0, \"button\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\");\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"fd-calendar__navigation--main\", ctx.mobileLandscape);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.previousButtonDisabled)(\"ariaLabel\", ctx.previousAriaLabel);\n        i0.ɵɵattribute(\"id\", ctx._prevButtonId)(\"title\", ctx.previousAriaLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOnDayView || ctx.isOnMonthView);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOnAggregatedYearsView || ctx.isOnYearView);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.nextButtonDisabled)(\"ariaLabel\", ctx.nextAriaLabel);\n        i0.ɵɵattribute(\"id\", ctx._nextButtonId)(\"title\", ctx.nextAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.mobileLandscape);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._selectMonthButtonAriaLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.selectMonthAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._selectYearButtonAriaLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.selectYearAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._selectYearsRangeButtonAriaLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.selectAggregatedYearAriaLabel);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ButtonComponent, CalendarCloseButtonDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarHeaderComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** A class representing a range of dates. */\nclass DateRange {\n  /**\n   * Date range.\n   * @param start\n   * @param end\n   */\n  constructor( /** The start date of the range. */\n  start, /** The end date of the range. */\n  end) {\n    this.start = start;\n    this.end = end;\n  }\n}\n\n/**\n * Calendar active cell strategy\n */\nclass AbstractCalendarActiveCellStrategy {}\nclass DefaultCalendarActiveCellStrategy extends AbstractCalendarActiveCellStrategy {\n  /**\n   * Calculate which table cell should be active\n   */\n  getActiveCell(cells) {\n    const selected = cells.find(cell => cell.selected);\n    if (selected) {\n      return selected;\n    }\n    const current = cells.find(cell => cell.current);\n    if (current) {\n      return current;\n    }\n    return cells[0] || null;\n  }\n}\n\n/**\n * Active Calendar Day cell strategy\n */\nclass ActiveCalendarDayCellStrategy extends AbstractCalendarActiveCellStrategy {\n  /**\n   * Calculate which table cell should be active\n   */\n  getActiveCell(cells) {\n    const selected = cells.find(cell => cell.selected);\n    if (selected) {\n      return selected;\n    }\n    const current = cells.find(cell => cell.current);\n    if (current) {\n      return current;\n    }\n    const fistDayInMonth = cells.find(cell => cell.monthStatus === 'current');\n    if (fistDayInMonth) {\n      return fistDayInMonth;\n    }\n    return cells[0] || null;\n  }\n}\n\n/** Component representing the day view of the calendar. */\nlet CalendarDayViewComponent = /*#__PURE__*/(() => {\n  class CalendarDayViewComponent {\n    /** Currently displayed month and year for days */\n    set currentlyDisplayed(currentlyDisplayed) {\n      if (!equal(currentlyDisplayed, this._currentlyDisplayed)) {\n        this._currentlyDisplayed = currentlyDisplayed;\n        this._buildDayViewGrid();\n      }\n    }\n    get currentlyDisplayed() {\n      return this._currentlyDisplayed;\n    }\n    /** The currently selected date model in single mode. */\n    set selectedDate(date) {\n      this._selectedDate = date;\n      if (this._dayViewGrid) {\n        const dayFromDate = this._calendarDayList.find(day => this._dateTimeAdapter.datesEqual(day.date, date));\n        this._changeSelectedSingleDay(dayFromDate, this._calendarDayList);\n      }\n    }\n    get selectedDate() {\n      return this._selectedDate;\n    }\n    /** The currently selected FdDates model start and end in range mode. */\n    set selectedRangeDate(dateRange) {\n      if (dateRange && this.selectedRangeDate && this._dateTimeAdapter.datesEqual(dateRange.start, this.selectedRangeDate.start) && this._dateTimeAdapter.datesEqual(dateRange.end, this.selectedRangeDate.end)) {\n        return;\n      }\n      this._selectedRangeDate = dateRange;\n      if (this._dayViewGrid) {\n        this._changeSelectedRangeDays(dateRange, this._calendarDayList);\n      }\n    }\n    get selectedRangeDate() {\n      return this._selectedRangeDate;\n    }\n    /** @hidden */\n    constructor(eRef, changeDetRef, calendarService, _dateTimeFormats, _dateTimeAdapter, _calendarI18nLabels) {\n      this.eRef = eRef;\n      this.changeDetRef = changeDetRef;\n      this.calendarService = calendarService;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._calendarI18nLabels = _calendarI18nLabels;\n      /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n      this.calType = 'single';\n      /**\n       * Whether user wants to mark day cells on hover.\n       * Works only on range mode, when start date is selected.\n       */\n      this.rangeHoverEffect = false;\n      /**\n       * Whether user wants to mark sunday/saturday with `fd-calendar__item--weekend` class\n       */\n      this.markWeekends = false;\n      /**\n       * Whether user wants to show week numbers next to days\n       */\n      this.showWeekNumbers = true;\n      /**\n       * Special days mark, it can be used by passing array of object with\n       * Special day number, list 1-20 [class:`fd-calendar__special-day--{{number}}`] is available there:\n       * https://sap.github.io/fundamental-styles/components/calendar.html calendar special days section\n       * Rule accepts method with date object as a parameter. ex:\n       * `rule: (date: D) => this.dateAdapter.getDay(date) === 1`, which will mark all sundays as special day.\n       */\n      this.specialDaysRules = [];\n      /** Event emitted always, when model is changed in range mode */\n      this.selectedRangeDateChange = new EventEmitter();\n      /** Event emitted always, when next month is selected, by focus */\n      this.nextMonthSelect = new EventEmitter();\n      /** Event emitted always, when previous month is selected, by focus */\n      this.previousMonthSelect = new EventEmitter();\n      /** Event emitted always, when model is changed in single mode */\n      this.selectedDateChange = new EventEmitter();\n      /**\n       * @hidden\n       * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)\n       */\n      this._onDestroy$ = new Subject();\n      /**\n       * @hidden\n       * Days per week\n       */\n      this._amountOfCols = 7;\n      /** @hidden */\n      this._isOnRangePick = false;\n      /** @hidden */\n      this._isInitiated = false;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._isInitiated = true;\n      this._setupKeyboardService();\n      this._refreshShortWeekDays();\n      this._buildDayViewGrid();\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._refreshShortWeekDays();\n        this._buildDayViewGrid();\n        this.changeDetRef.markForCheck();\n      });\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      /** Changes of those properties are done inside its setters */\n      if (!changes['selectedDate'] && !changes['selectedRangeDate'] && !changes['currentlyDisplayed']) {\n        this._buildDayViewGrid();\n      }\n      if (changes['startingDayOfWeek']) {\n        this._refreshShortWeekDays();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /**\n     * Function for selecting a date on the calendar. Typically called when a date is clicked, but can also be called programmatically.\n     * @param day CalendarDay object to be selected.\n     */\n    selectDate(day, event) {\n      if (event) {\n        /**\n         * There are some problems with popup integration. After clicking inside day component, the popover closes.\n         */\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      if (!day.disabled && !day.blocked) {\n        if (this.calType === 'single') {\n          /** Remove selections from other day and put selection to chosen day */\n          this._calendarDayList.forEach(_day => _day.selected = false);\n          day.selected = true;\n          this._selectedDate = day.date;\n          this.selectedDateChange.emit(day.date);\n        } else {\n          if (this._selectCounter === 0 || this._selectCounter === 2) {\n            this._selectedRangeDate = {\n              start: day.date,\n              end: null\n            };\n            this.selectedRangeDateChange.emit(this.selectedRangeDate);\n          } else if (this._selectCounter === 1) {\n            // Check if date picked is higher than already chosen, otherwise just reverse them\n            if (this._dateTimeAdapter.compareDate(this.selectedRangeDate.start, day.date) < 0) {\n              this._selectedRangeDate = {\n                start: this.selectedRangeDate.start,\n                end: day.date\n              };\n            } else {\n              this._selectedRangeDate = {\n                start: day.date,\n                end: this.selectedRangeDate.start\n              };\n            }\n            this.selectedRangeDateChange.emit(this.selectedRangeDate);\n          }\n          this._changeSelectedRangeDays(this._selectedRangeDate, this._calendarDayList);\n        }\n      }\n      if (this.calType === 'range' && this.rangeHoverEffect && this._selectCounter === 1 && event) {\n        this._isOnRangePick = !this._isOnRangePick;\n      } else {\n        this._isOnRangePick = false;\n      }\n      this.changeDetRef.markForCheck();\n    }\n    /**\n     * Set focus on default focusable cell\n     */\n    setFocusOnCell() {\n      const cellToFocus = new ActiveCalendarDayCellStrategy().getActiveCell(this._calendarDayList);\n      if (!cellToFocus?.index && cellToFocus?.index !== 0) {\n        return;\n      }\n      this.focusOnCellByIndex(cellToFocus.index);\n    }\n    /** @hidden */\n    _refreshHoverRange(day) {\n      const start = this.selectedRangeDate?.start;\n      if (this._isOnRangePick && start) {\n        if (this._dateTimeAdapter.compareDate(day.date, start) < 0) {\n          this._calendarDayList.forEach(_day => {\n            _day.hoverRange = this._dateTimeAdapter.compareDate(_day.date, day.date) > 0 && this._dateTimeAdapter.compareDate(_day.date, start) < 0;\n          });\n        } else {\n          this._calendarDayList.forEach(_day => {\n            _day.hoverRange = this._dateTimeAdapter.compareDate(_day.date, day.date) < 0 && this._dateTimeAdapter.compareDate(_day.date, start) > 0;\n          });\n        }\n      }\n    }\n    /**\n     * @hidden\n     *  Amount of selected days\n     *  0, when there is no day selected, or start date is invalid,\n     *  1, when there is only valid start date, or end date is same as start date,\n     *  2, when both dates are valid\n     */\n    get _selectCounter() {\n      if (!this.selectedRangeDate || !this._dateTimeAdapter.isValid(this.selectedRangeDate.start)) {\n        return 0;\n      }\n      if (this.selectedRangeDate.start && (!this._dateTimeAdapter.isValid(this.selectedRangeDate.end) || this._dateTimeAdapter.datesEqual(this.selectedRangeDate.start, this.selectedRangeDate.end))) {\n        return 1;\n      }\n      if (this._dateTimeAdapter.isValid(this.selectedRangeDate.start) && this._dateTimeAdapter.isValid(this.selectedRangeDate.end)) {\n        return 2;\n      }\n      return 0;\n    }\n    /**\n     * @hidden\n     * Method that returns short weekday name.\n     * Can be changed by user by providing other class which implements DatetimeAdapter\n     */\n    get shortWeekDays() {\n      return this._shortWeekDays;\n    }\n    /**\n     * @hidden\n     * Method that returns weekday name.\n     * Can be changed by user by providing other class which implements DatetimeAdapter\n     */\n    get longWeekDays() {\n      return this._longWeekDays;\n    }\n    /**\n     * @hidden\n     * Function that gives array of all displayed CalendarDays\n     */\n    get _calendarDayList() {\n      return this._dayViewGrid.reduce((totalCalendarRows, calendarRow) => {\n        if (!calendarRow) {\n          calendarRow = [];\n        }\n        return totalCalendarRows.concat(calendarRow);\n      });\n    }\n    /**\n     * @hidden\n     * Today cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _todayAriaLabel() {\n      return this._calendarI18nLabels.todayLabel;\n    }\n    /**\n     * @hidden\n     * Selected date cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _selectedDateAriaLabel() {\n      return this._calendarI18nLabels.dateSelectedLabel;\n    }\n    /**\n     * @hidden\n     * column label\n     */\n    get _weekColumnLabelAriaLabel() {\n      return this._calendarI18nLabels.weekColumnLabel;\n    }\n    /**\n     * @hidden\n     * Range start label\n     */\n    get _rangeStartAriaLabel() {\n      return this._calendarI18nLabels.rangeStartLabel;\n    }\n    /**\n     * @hidden\n     * Range end label\n     */\n    get _rangeEndAriaLabel() {\n      return this._calendarI18nLabels.rangeEndLabel;\n    }\n    /**\n     * @hidden\n     * Date in past label\n     */\n    get _dateInPastAriaLabel() {\n      return this._calendarI18nLabels.dayInPastLabel;\n    }\n    /**\n     * @hidden\n     * View description\n     */\n    get _viewRoleDescription() {\n      return this._calendarI18nLabels.calendarDayViewDescription;\n    }\n    /**\n     * View ID\n     */\n    get viewId() {\n      return this.id + '-day-view';\n    }\n    /**\n     * @hidden\n     * Week column header ID\n     */\n    get _weekNumbersColumnHeaderId() {\n      return this.viewId + '-week-column-header';\n    }\n    /**\n     * @hidden\n     * Today cell label ID\n     */\n    get _todayLabelId() {\n      return this.viewId + '-today-label';\n    }\n    /**\n     * @hidden\n     * Selected date label ID\n     */\n    get _selectedDateLabelId() {\n      return this.viewId + '-selected-date-label';\n    }\n    /**\n     * @hidden\n     * Date range start date label ID\n     */\n    get _dateRangeStartLabelId() {\n      return this.viewId + '-range-start-date-label';\n    }\n    /**\n     * @hidden\n     * Date range end date label ID\n     */\n    get _dateRangeEndLabelId() {\n      return this.viewId + '-range-end-date-label';\n    }\n    /**\n     * @hidden\n     * Date in past label ID\n     */\n    get _dateInPastLabelId() {\n      return this.viewId + '-day-in-past-label';\n    }\n    /**\n     * @hidden\n     * Method that handles day cells keydown events,\n     * @param event KeyboardEvent\n     * @param cell CalendarDay\n     * @param grid with specified column and row as a x and y\n     */\n    _onKeydownDayHandler(event, cell, index) {\n      if (event.key === 'Tab' && !event.shiftKey) {\n        if (this.focusEscapeFunction) {\n          this.focusEscapeFunction(event);\n        }\n      } else {\n        this.calendarService.onKeydownHandler(event, index);\n      }\n    }\n    /**\n     * @hidden\n     *  Method that allow to focus elements inside this component\n     */\n    _focusElementBySelector(elementSelector) {\n      const elementToFocus = this.eRef.nativeElement.querySelector(elementSelector);\n      if (elementToFocus?.focus) {\n        elementToFocus.focus();\n      }\n    }\n    /**\n     * @hidden\n     * Standardized method to calculate grid [x][y] to index number of flatten list\n     */\n    _getIndex(rowIndex, colIndex) {\n      return this.calendarService.getId(rowIndex, colIndex);\n    }\n    /**\n     * @hidden\n     * Method that selects previous month\n     * Triggered only when the month is changed during changing focus\n     * Also triggers event to parent calendar component and rebuilds day view grid\n     */\n    _selectPreviousMonth() {\n      this._currentlyDisplayed = this._getPreviousMonth();\n      this._buildDayViewGrid();\n      this.previousMonthSelect.emit();\n    }\n    /**\n     * @hidden\n     * Method that selects next month\n     * Triggered only when the month is changed during changing focus\n     * Also triggers event to parent calendar component and rebuilds day view grid\n     */\n    _selectNextMonth() {\n      this._currentlyDisplayed = this._getNextMonth();\n      this._buildDayViewGrid();\n      this.nextMonthSelect.emit();\n    }\n    /**\n     * @hidden\n     * Method that creates array of CalendarDay models which will be shown on day grid,\n     * depending on current month and year.\n     */\n    _populateCalendar() {\n      let calendar = [];\n      calendar = this._getPreviousMonthDays(calendar);\n      calendar = calendar.concat(this._getCurrentMonthDays());\n      calendar = this._getNextMonthDays(calendar);\n      calendar.forEach((call, index) => {\n        call.id = this._getCellIdByIndex(index);\n        call.index = index;\n      });\n      if (this.calType === 'single' && this._selectedDate) {\n        const _day = calendar.find(day => this._dateTimeAdapter.datesEqual(day.date, this._selectedDate));\n        this._changeSelectedSingleDay(_day, calendar);\n      }\n      if (this.calType === 'range' && this._selectedRangeDate) {\n        this._changeSelectedRangeDays(this._selectedRangeDate, calendar);\n      }\n      return calendar;\n    }\n    /**\n     * @hidden\n     * Method that builds 2 dimensions day view grid, also sets up currently displayed month, or year,\n     * when there is not any.\n     */\n    _buildDayViewGrid() {\n      if (!this._isInitiated) {\n        return;\n      }\n      if (!this.currentlyDisplayed) {\n        if (this.selectedDate) {\n          this._currentlyDisplayed = {\n            month: this._dateTimeAdapter.getMonth(this.selectedDate),\n            year: this._dateTimeAdapter.getYear(this.selectedDate)\n          };\n        } else {\n          const today = this._dateTimeAdapter.today();\n          this._currentlyDisplayed = {\n            month: this._dateTimeAdapter.getMonth(today),\n            year: this._dateTimeAdapter.getYear(today)\n          };\n        }\n      }\n      const calendarDays = this._populateCalendar();\n      const dayViewGrid = [];\n      while (calendarDays.length > 0) {\n        dayViewGrid.push(calendarDays.splice(0, this._amountOfCols));\n      }\n      this.calendarService.rowAmount = dayViewGrid.length;\n      this._dayViewGrid = dayViewGrid;\n      this._weeks = this._refreshWeekCount();\n    }\n    /**\n     * @hidden\n     * Get id of calendar's day item\n     */\n    _getCellIdByIndex(index) {\n      return this.viewId + '-day-' + index + '';\n    }\n    /**\n     * @hidden\n     * Method which provides array of CalendarDay,\n     * which contains every single day of currently shown month/year.\n     */\n    _getCurrentMonthDays() {\n      const month = this.currentlyDisplayed.month;\n      const year = this.currentlyDisplayed.year;\n      const calendarDays = [];\n      const amountOfDaysInCurrentMonth = this._dateTimeAdapter.getNumDaysInMonth(this._dateTimeAdapter.createDate(year, month, 1));\n      const today = this._dateTimeAdapter.today();\n      for (let dayNumber = 1; dayNumber <= amountOfDaysInCurrentMonth; dayNumber++) {\n        const date = this._dateTimeAdapter.createDate(year, month, dayNumber);\n        calendarDays.push({\n          ...this._getDay(date),\n          monthStatus: 'current',\n          current: this._dateTimeAdapter.datesEqual(today, date)\n        });\n      }\n      const cell = this._getActiveCell(calendarDays);\n      cell && (cell.isTabIndexed = true);\n      return calendarDays;\n    }\n    /**\n     * @hidden\n     * Method that returns active cell, which means:\n     * if there is any selected day, return selected day\n     * if there is no selected day, but there is today day, return today day\n     * if there is no today, or selected, return first one\n     */\n    _getActiveCell(calendarDays) {\n      return new ActiveCalendarDayCellStrategy().getActiveCell(calendarDays);\n    }\n    /**\n     * @hidden\n     * Method which provides array of CalendarDay,\n     * which contains last 0-6 days of previous month/year. Theses days\n     * fills the gap between starting startingDayOfWeek and first day of current month\n     */\n    _getPreviousMonthDays(calendarDays) {\n      const month = this.currentlyDisplayed.month > 1 ? this.currentlyDisplayed.month - 1 : 12;\n      const year = this.currentlyDisplayed.month > 1 ? this.currentlyDisplayed.year : this.currentlyDisplayed.year - 1;\n      const amountOfDaysInCurrentMonth = this._dateTimeAdapter.getNumDaysInMonth(this._dateTimeAdapter.createDate(year, month, 1));\n      const prevMonthLastDate = this._dateTimeAdapter.createDate(year, month, amountOfDaysInCurrentMonth);\n      const prevMonthLastDay = amountOfDaysInCurrentMonth;\n      let prevMonthLastWeekDay = this._dateTimeAdapter.getDayOfWeek(prevMonthLastDate) - this.startingDayOfWeek;\n      /** Checking if there are some days cut by startingDayOfWeek option\n       *  If yes, there is whole week added, to avoid hiding\n       */\n      if (prevMonthLastWeekDay < 0) {\n        prevMonthLastWeekDay = prevMonthLastWeekDay + 7;\n      }\n      if (prevMonthLastWeekDay < 6) {\n        while (prevMonthLastWeekDay >= 0) {\n          const prevMonthDay = prevMonthLastDay - prevMonthLastWeekDay;\n          const date = this._dateTimeAdapter.createDate(year, month, prevMonthDay);\n          calendarDays.push({\n            ...this._getDay(date),\n            monthStatus: 'previous'\n          });\n          prevMonthLastWeekDay--;\n        }\n      }\n      return calendarDays;\n    }\n    /**\n     * @hidden\n     * Method which provides array of CalendarDay, which contains first days of next month/year. Theses days\n     * fills the gap between last day of current day and end of 6-weeks calendar grid.\n     */\n    _getNextMonthDays(calendarDays) {\n      const month = this.currentlyDisplayed.month < 12 ? this.currentlyDisplayed.month + 1 : 1;\n      const year = this.currentlyDisplayed.month < 12 ? this.currentlyDisplayed.year : this.currentlyDisplayed.year + 1;\n      // The calendar grid can have 5 (35 days) or 6 (42 days) weeks\n      const nextMonthDisplayedDays = (42 - calendarDays.length) % 7;\n      for (let nextD = 1; nextD <= nextMonthDisplayedDays; nextD++) {\n        const date = this._dateTimeAdapter.createDate(year, month, nextD);\n        calendarDays.push({\n          ...this._getDay(date),\n          monthStatus: 'next'\n        });\n      }\n      return calendarDays;\n    }\n    /** @hidden */\n    _isWeekendDay(dayOfWeek) {\n      return dayOfWeek === 1 || dayOfWeek === 7;\n    }\n    /**\n     * @hidden\n     * Method that generates whole day model basing on date, disabling functions, block functions, and actually\n     * chosen range / single date.\n     */\n    _getDay(date) {\n      const weekDay = this._dateTimeAdapter.getDayOfWeek(date);\n      const dayOfMonth = this._dateTimeAdapter.getDate(date);\n      const dateNames = this._dateTimeAdapter.getDateNames();\n      const isPast = this._dateTimeAdapter.compareDate(date, this._dateTimeAdapter.today()) < 0;\n      const day = {\n        date,\n        label: dateNames[dayOfMonth - 1],\n        weekDay,\n        weekend: this._isWeekendDay(weekDay),\n        ariaLabel: this._dateTimeAdapter.format(date, this._dateTimeFormats.display.dateA11yLabel),\n        specialNumber: this._getSpecialDay(date) ?? undefined,\n        past: isPast\n      };\n      /** Apply disabled state to days marked with passed function */\n      if (this.disableFunction) {\n        day.disabled = this.disableFunction(date);\n      }\n      return day;\n    }\n    /**\n     * @hidden\n     * Method that is called to refresh i18n short week days.\n     */\n    _refreshShortWeekDays() {\n      const shortDayOfWeekNames = this._dateTimeAdapter.getDayOfWeekNames('short');\n      const dayOfWeekNames = this._dateTimeAdapter.getDayOfWeekNames('long');\n      this._shortWeekDays = shortDayOfWeekNames.slice(this.startingDayOfWeek - 1).concat(shortDayOfWeekNames.slice(0, this.startingDayOfWeek - 1));\n      this._longWeekDays = dayOfWeekNames.slice(this.startingDayOfWeek - 1).concat(dayOfWeekNames.slice(0, this.startingDayOfWeek - 1));\n      this.changeDetRef.markForCheck();\n    }\n    /**\n     * @hidden\n     * Gets special day number of specified date model\n     */\n    _getSpecialDay(date) {\n      const specialDay = this.specialDaysRules.find(specialDayRule => specialDayRule.rule(date));\n      if (specialDay) {\n        return specialDay.specialDayNumber;\n      }\n      return null;\n    }\n    /**\n     * @hidden\n     * Method that returns array of week's count\n     */\n    _refreshWeekCount() {\n      const calendarDayList = this._calendarDayList;\n      const weekNumbers = [];\n      for (let index = 6; index < calendarDayList.length; index = index + 6) {\n        weekNumbers.push(this._dateTimeAdapter.getWeekName(calendarDayList[index].date));\n      }\n      return weekNumbers;\n    }\n    /**\n     * @hidden\n     * Get year and month for previous year\n     */\n    _getPreviousMonth() {\n      if (this._currentlyDisplayed.month > 1) {\n        return {\n          year: this._currentlyDisplayed.year,\n          month: this._currentlyDisplayed.month - 1\n        };\n      } else {\n        return {\n          year: this._currentlyDisplayed.year - 1,\n          month: 12\n        };\n      }\n    }\n    /**\n     * @hidden\n     * Get year and month for next year\n     */\n    _getNextMonth() {\n      if (this._currentlyDisplayed.month < 12) {\n        return {\n          year: this._currentlyDisplayed.year,\n          month: this._currentlyDisplayed.month + 1\n        };\n      } else {\n        return {\n          year: this._currentlyDisplayed.year + 1,\n          month: 1\n        };\n      }\n    }\n    /**\n     * @hidden\n     * Method to put configuration and listeners on calendar keyboard service\n     */\n    _setupKeyboardService() {\n      this.calendarService.colAmount = this._amountOfCols;\n      this.calendarService.focusEscapeFunction = this.focusEscapeFunction;\n      this.calendarService.onFocusIdChange.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this.focusOnCellByIndex(index);\n      });\n      this.calendarService.onKeySelect.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this.selectDate(this._calendarDayList[index]);\n      });\n      this.calendarService.onListStartApproach.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this._selectPreviousMonth();\n        /**\n         * Calculate focused cell in new grid\n         */\n        const originalMonth = this._getNextMonth(); // month that was before moving back\n        const originalAmountOfWeeks = this._dateTimeAdapter.getAmountOfWeeks(originalMonth.year, originalMonth.month, this.startingDayOfWeek);\n        const prevMonthAmountOfWeeks = this._dateTimeAdapter.getAmountOfWeeks(this._currentlyDisplayed.year, this._currentlyDisplayed.month, this.startingDayOfWeek);\n        // trigger rendering for new grid so focus can be set\n        this.changeDetRef.detectChanges();\n        this.focusOnCellByIndex(index - 7 * (originalAmountOfWeeks - prevMonthAmountOfWeeks));\n      });\n      this.calendarService.onListEndApproach.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this._selectNextMonth();\n        // trigger rendering for new grid so focus can be set\n        this.changeDetRef.detectChanges();\n        this.focusOnCellByIndex(index);\n      });\n    }\n    /**\n     * @hidden\n     * Change selection flag on days to false, besides the selected one\n     */\n    _changeSelectedSingleDay(day, calendar) {\n      calendar.forEach(_day => _day.selected = false);\n      if (day && !day.blocked && !day.disabled) {\n        day.selected = true;\n      }\n      this.refreshTabIndex(calendar);\n    }\n    /**\n     * @hidden\n     * Change properties of range days, this method is called, to not rebuild whole grid from scratch,\n     * it just changes properties of newly selected/unselected days.\n     */\n    _changeSelectedRangeDays(dates, calendar) {\n      /** Pull list of calendar days */\n      const calendarList = calendar;\n      /** Reset changing properties */\n      calendarList.forEach(_day => _day.selectedFirst = _day.selectedLast = _day.selected = _day.isTabIndexed = _day.disabled = _day.hoverRange = _day.selectedRange = false);\n      if (dates) {\n        let startDay;\n        let endDay;\n        if (dates.start) {\n          /** Find start date and mark it as selected */\n          startDay = calendarList.find(_day => this._dateTimeAdapter.datesEqual(_day.date, dates.start));\n          if (startDay && !startDay.blocked && !startDay.disabled && (typeof this.disableRangeStartFunction !== 'function' || !this.disableRangeStartFunction(startDay.date))) {\n            startDay.selected = true;\n            startDay.selectedFirst = true;\n          }\n        }\n        if (dates.end) {\n          /** Find end date and mark it as selected */\n          endDay = calendarList.find(_day => this._dateTimeAdapter.datesEqual(_day.date, dates.end));\n          if (endDay && !endDay.blocked && !endDay.disabled && (typeof this.disableRangeEndFunction !== 'function' || !this.disableRangeEndFunction(endDay.date))) {\n            endDay.selected = true;\n            endDay.selectedLast = true;\n          }\n        }\n        /** Verify if start day and end day is valid, otherwise don't put range selection */\n        if (dates.start && dates.end) {\n          /** Mark all days, which are between start and end date */\n          calendarList.filter(_day => _day.selectedRange = this._dateTimeAdapter.isBetween(_day.date, dates.start, dates.end)).forEach(_day => _day.selectedRange = true);\n        }\n      }\n      this.refreshTabIndex(calendarList);\n      /** Apply disabled state to days marked with passed function */\n      if (this.disableFunction) {\n        calendarList.forEach(_day => _day.disabled = this.disableFunction(_day.date));\n      }\n      if ((this._selectCounter === 0 || this._selectCounter === 2) && this.disableRangeStartFunction) {\n        calendarList.forEach(_day => _day.disabled = _day.disabled || this.disableRangeStartFunction(_day.date));\n      } else if (this._selectCounter === 1 && this.disableRangeEndFunction) {\n        calendarList.forEach(_day => _day.disabled = _day.disabled || this.disableRangeEndFunction(_day.date));\n      }\n    }\n    /** @hidden */\n    refreshTabIndex(calendar) {\n      calendar.forEach(_day => _day.isTabIndexed = false);\n      const cell = this._getActiveCell(calendar.filter(_day => _day.monthStatus === 'current'));\n      cell && (cell.isTabIndexed = true);\n    }\n    /** @hidden */\n    focusOnCellByIndex(index) {\n      this._focusElementBySelector(`#${this._getCellIdByIndex(index)}`);\n    }\n  }\n  CalendarDayViewComponent.ɵfac = function CalendarDayViewComponent_Factory(t) {\n    return new (t || CalendarDayViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CalendarService), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS), i0.ɵɵdirectiveInject(i2.DatetimeAdapter), i0.ɵɵdirectiveInject(CalendarI18nLabels));\n  };\n  CalendarDayViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CalendarDayViewComponent,\n    selectors: [[\"fd-calendar-day-view\"]],\n    hostAttrs: [1, \"fd-calendar__dates\"],\n    hostVars: 1,\n    hostBindings: function CalendarDayViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.viewId);\n      }\n    },\n    inputs: {\n      currentlyDisplayed: \"currentlyDisplayed\",\n      selectedDate: \"selectedDate\",\n      selectedRangeDate: \"selectedRangeDate\",\n      startingDayOfWeek: \"startingDayOfWeek\",\n      calType: \"calType\",\n      id: \"id\",\n      rangeHoverEffect: \"rangeHoverEffect\",\n      markWeekends: \"markWeekends\",\n      showWeekNumbers: \"showWeekNumbers\",\n      focusEscapeFunction: \"focusEscapeFunction\",\n      specialDaysRules: \"specialDaysRules\",\n      disableFunction: \"disableFunction\",\n      disableRangeStartFunction: \"disableRangeStartFunction\",\n      disableRangeEndFunction: \"disableRangeEndFunction\"\n    },\n    outputs: {\n      selectedRangeDateChange: \"selectedRangeDateChange\",\n      nextMonthSelect: \"nextMonthSelect\",\n      previousMonthSelect: \"previousMonthSelect\",\n      selectedDateChange: \"selectedDateChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 20,\n    vars: 16,\n    consts: [[\"role\", \"grid\", 1, \"fd-calendar__table\"], [\"role\", \"rowgroup\", 1, \"fd-calendar__group\"], [\"role\", \"row\", 1, \"fd-calendar__row\"], [\"class\", \"fd-calendar__item fd-calendar__item--side-helper\", \"role\", \"columnheader\", 4, \"ngIf\"], [\"class\", \"fd-calendar__item fd-calendar__item--side-helper\", \"role\", \"columnheader\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"fd-calendar__row\", \"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"fd-calendar__row\", 4, \"ngIf\"], [\"hidden\", \"\", \"aria-hidden\", \"true\"], [\"role\", \"columnheader\", 1, \"fd-calendar__item\", \"fd-calendar__item--side-helper\"], [1, \"fd-calendar__text\"], [\"class\", \"fd-calendar__item fd-calendar__item--side-helper\", \"role\", \"rowheader\", \"scope\", \"row\", 4, \"ngIf\"], [\"class\", \"fd-calendar__item\", \"role\", \"gridcell\", 3, \"is-active\", \"fd-calendar__item--range\", \"fd-calendar__item--current\", \"fd-calendar__item--weekend\", \"fd-calendar__item--other-month\", \"is-disabled\", \"class\", \"click\", \"mouseenter\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"rowheader\", \"scope\", \"row\", 1, \"fd-calendar__item\", \"fd-calendar__item--side-helper\"], [\"class\", \"fd-calendar__text\", 4, \"ngIf\"], [\"role\", \"gridcell\", 1, \"fd-calendar__item\", 3, \"click\", \"mouseenter\", \"keydown\"], [\"role\", \"button\", 1, \"fd-calendar__text\"], [1, \"fd-calendar__row\"], [1, \"fd-calendar__item\", \"hidden-day\"]],\n    template: function CalendarDayViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\", 2);\n        i0.ɵɵtemplate(3, CalendarDayViewComponent_th_3_Template, 1, 2, \"th\", 3);\n        i0.ɵɵtemplate(4, CalendarDayViewComponent_th_4_Template, 3, 2, \"th\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"tbody\", 1);\n        i0.ɵɵtemplate(6, CalendarDayViewComponent_tr_6_Template, 3, 2, \"tr\", 5);\n        i0.ɵɵtemplate(7, CalendarDayViewComponent_tr_7_Template, 2, 0, \"tr\", 6);\n        i0.ɵɵtemplate(8, CalendarDayViewComponent_tr_8_Template, 2, 0, \"tr\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\");\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\");\n        i0.ɵɵtext(17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\");\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-roledescription\", ctx._viewRoleDescription);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.showWeekNumbers);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.shortWeekDays);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx._dayViewGrid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._dayViewGrid.length <= 5);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._dayViewGrid.length === 4);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._todayLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._todayAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._selectedDateLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._selectedDateAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._dateRangeStartLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._rangeStartAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._dateRangeEndLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._rangeEndAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._dateInPastLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._dateInPastAriaLabel);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf],\n    styles: [\".hidden-day{visibility:hidden}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarDayViewComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Component representing the month view of the calendar. */\nlet CalendarMonthViewComponent = /*#__PURE__*/(() => {\n  class CalendarMonthViewComponent {\n    /** @hidden */\n    constructor(_eRef, _changeDetectorRef, _calendarService, _dateTimeFormats, _dateTimeAdapter, _calendarI18nLabels) {\n      this._eRef = _eRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._calendarService = _calendarService;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._calendarI18nLabels = _calendarI18nLabels;\n      /** An event fired when a new month is selected */\n      this.monthClicked = new EventEmitter();\n      /**\n       * @hidden\n       * A number offset used to achieve the 1-12 representation of the calendar\n       */\n      this._monthOffset = 1;\n      /** @hidden */\n      this._amountOfColPerRow = 3;\n      /** @hidden */\n      this._amountOfRows = 4;\n      /**\n       * @hidden\n       * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)\n       */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._initiated = false;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._initiated = true;\n      this._setupKeyboardService();\n      this._constructMonthGrid();\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._constructMonthGrid();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (this._initiated && ('monthSelected' in changes || 'year' in changes || 'id' in changes)) {\n        this._constructMonthGrid();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** Get a number (1-12) representing the current month  */\n    get currentMonth() {\n      return this._dateTimeAdapter.getMonth(this._dateTimeAdapter.today());\n    }\n    /**  Getter for the private class member _monthOffset */\n    get monthOffset() {\n      return this._monthOffset;\n    }\n    /** View ID */\n    get viewId() {\n      return this.id + '-month-view';\n    }\n    /**\n     * @hidden\n     * Today cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _todayAriaLabel() {\n      return this._calendarI18nLabels.todayLabel;\n    }\n    /**\n     * @hidden\n     * Selected date cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _selectedDateAriaLabel() {\n      return this._calendarI18nLabels.dateSelectedLabel;\n    }\n    /**\n     * @hidden\n     * View description\n     */\n    get _viewRoleDescription() {\n      return this._calendarI18nLabels.calendarMonthViewDescription;\n    }\n    /**\n     * @hidden\n     * Today cell label ID\n     */\n    get _todayLabelId() {\n      return this.viewId + '-today-label';\n    }\n    /**\n     * @hidden\n     * Selected date label ID\n     */\n    get _selectedDateLabelId() {\n      return this.viewId + '-selected-date-label';\n    }\n    /** Method for handling the mouse click event when a month is selected  */\n    selectMonth(monthCell, event) {\n      if (event) {\n        event.stopPropagation();\n      }\n      this.monthSelected = monthCell.month;\n      this.monthClicked.emit(this.monthSelected);\n    }\n    /**\n     * Set focus on month cell.\n     * It can be a selected cell, current month cell or first cell in the list\n     */\n    setFocusOnCell() {\n      const cellToFocus = new DefaultCalendarActiveCellStrategy().getActiveCell(this._getMonthList());\n      if (!cellToFocus?.id) {\n        return;\n      }\n      this._focusElementBySelector(`#${cellToFocus.id}`);\n    }\n    /**\n     * @hidden\n     * Method for handling the keyboard events (a11y)\n     */\n    _onKeydownMonthHandler(event, index) {\n      this._calendarService.onKeydownHandler(event, index);\n    }\n    /**\n     * @hidden\n     * Method that allows to focus elements inside this component\n     */\n    _focusElementBySelector(elementSelector) {\n      const elementToFocus = this._eRef.nativeElement.querySelector(elementSelector);\n      if (elementToFocus?.focus) {\n        elementToFocus.focus();\n      }\n    }\n    /**\n     * @hidden\n     * Method returning id of month cell\n     */\n    _getIndex(rowIndex, colIndex) {\n      return this._calendarService.getId(rowIndex, colIndex);\n    }\n    /**\n     * @hidden\n     * @param index month grid cell index\n     */\n    _getId(index) {\n      return this.viewId + '-month-' + index;\n    }\n    /**\n     * @hidden\n     * Method that checks if this is current month\n     */\n    _isCurrent(id) {\n      return id + this._monthOffset === this.currentMonth;\n    }\n    /**\n     * @hidden\n     * Method that check if this is selected month\n     */\n    _isSelected(id) {\n      return id + this._monthOffset === this.monthSelected;\n    }\n    /**\n     * @hidden\n     * Method that create month grid with required meta data\n     */\n    _constructMonthGrid() {\n      const monthNames = this._dateTimeAdapter.getMonthNames('short');\n      const monthList = monthNames.map((monthName, index) => {\n        const month = index + this.monthOffset;\n        return {\n          month,\n          label: monthName,\n          ariaLabel: this._dateTimeAdapter.format(this._dateTimeAdapter.createDate(this.year, month, 1), this._dateTimeFormats.display.monthA11yLabel),\n          index,\n          selected: month === this.monthSelected,\n          current: month === this.currentMonth,\n          tabIndex: month === this.monthSelected ? 0 : -1\n        };\n      });\n      this._calendarMonthListGrid = [];\n      /** Creating 2d grid */\n      while (monthList.length) {\n        this._calendarMonthListGrid.push(monthList.splice(0, this._amountOfColPerRow));\n      }\n      this._calendarMonthListGrid.forEach((row, rowIndex) => {\n        row.forEach((monthCell, colIndex) => {\n          monthCell.id = this._getId(this._getIndex(rowIndex, colIndex));\n        });\n      });\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @hidden\n     * Method to put configuration and listeners on calendar keyboard service\n     */\n    _setupKeyboardService() {\n      this._calendarService.rowAmount = this._amountOfRows;\n      this._calendarService.colAmount = this._amountOfColPerRow;\n      this._calendarService.focusEscapeFunction = this.focusEscapeFunction;\n      this._calendarService.onFocusIdChange.pipe(takeUntil(this._onDestroy$)).subscribe(index => this._focusOnCellByIndex(index));\n      this._calendarService.onKeySelect.pipe(takeUntil(this._onDestroy$)).subscribe(index => this.selectMonth(this._getMonthList()[index]));\n    }\n    /**\n     * @hidden\n     * Returns transformed 1d array from 2d month grid.\n     */\n    _getMonthList() {\n      return [].concat(...this._calendarMonthListGrid);\n    }\n    /** @hidden */\n    _focusOnCellByIndex(index) {\n      this._focusElementBySelector(`#${this._getId(index)}`);\n    }\n  }\n  CalendarMonthViewComponent.ɵfac = function CalendarMonthViewComponent_Factory(t) {\n    return new (t || CalendarMonthViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CalendarService), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS), i0.ɵɵdirectiveInject(i2.DatetimeAdapter), i0.ɵɵdirectiveInject(CalendarI18nLabels));\n  };\n  CalendarMonthViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CalendarMonthViewComponent,\n    selectors: [[\"fd-calendar-month-view\"]],\n    hostVars: 1,\n    hostBindings: function CalendarMonthViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.viewId);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      monthSelected: \"monthSelected\",\n      focusEscapeFunction: \"focusEscapeFunction\",\n      year: \"year\"\n    },\n    outputs: {\n      monthClicked: \"monthClicked\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 6,\n    consts: [[1, \"fd-calendar__months\"], [\"role\", \"grid\", 1, \"fd-calendar__table\"], [\"role\", \"rowgroup\", 1, \"fd-calendar__group\"], [\"class\", \"fd-calendar__row\", \"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"hidden\", \"\", \"aria-hidden\", \"true\"], [\"role\", \"row\", 1, \"fd-calendar__row\"], [\"class\", \"fd-calendar__item\", \"role\", \"gridcell\", 3, \"fd-calendar__item--current\", \"is-active\", \"keydown\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"gridcell\", 1, \"fd-calendar__item\", 3, \"keydown\", \"click\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"tabindex\", \"-1\", 1, \"fd-calendar__item-button\"], [1, \"fd-calendar__text\"]],\n    template: function CalendarMonthViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"tbody\", 2);\n        i0.ɵɵtemplate(3, CalendarMonthViewComponent_tr_3_Template, 2, 1, \"tr\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-roledescription\", ctx._viewRoleDescription);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx._calendarMonthListGrid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._todayLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._todayAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._selectedDateLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._selectedDateAriaLabel);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.ButtonComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarMonthViewComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Component representing the YearView of the Calendar Component. */\nlet CalendarYearViewComponent = /*#__PURE__*/(() => {\n  class CalendarYearViewComponent {\n    /**\n     * @hidden\n     * Today cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _todayAriaLabel() {\n      return this._calendarI18nLabels.todayLabel;\n    }\n    /**\n     * @hidden\n     * Selected date cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _selectedDateAriaLabel() {\n      return this._calendarI18nLabels.dateSelectedLabel;\n    }\n    /**\n     * @hidden\n     * View description\n     */\n    get _viewRoleDescription() {\n      return this._calendarI18nLabels.calendarYearsViewDescription;\n    }\n    /** View ID */\n    get viewId() {\n      return this.id + '-year-view';\n    }\n    /**\n     * @hidden\n     * Today cell label ID\n     */\n    get _todayLabelId() {\n      return this.viewId + '-today-label';\n    }\n    /**\n     * @hidden\n     * Selected date label ID\n     */\n    get _selectedDateLabelId() {\n      return this.viewId + '-selected-date-label';\n    }\n    /** @hidden */\n    constructor(_eRef, _changeDetectorRef, _calendarService, _dateTimeAdapter, _dateTimeFormats, _calendarI18nLabels) {\n      this._eRef = _eRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._calendarService = _calendarService;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._calendarI18nLabels = _calendarI18nLabels;\n      /** Event fired when a year is selected. */\n      this.yearClicked = new EventEmitter();\n      /**\n       * @hidden\n       * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)\n       */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._initiated = false;\n      // default values\n      this._currentYear = _dateTimeAdapter.getYear(_dateTimeAdapter.today());\n      this._firstYearInList = this._currentYear;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._initiated = true;\n      this._setupKeyboardService();\n      this._firstYearInList = this.yearSelected;\n      this._constructYearGrid();\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._constructYearGrid();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (this._initiated && ('yearViewGrid' in changes || 'yearSelected' in changes || 'id' in changes)) {\n        this._constructYearGrid();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** Method used to load the previous {{col * row}} years to be displayed. */\n    loadNextYearList() {\n      this._firstYearInList += this._getAmountOfYearsShownAtOnce();\n      this._constructYearGrid();\n    }\n    /** Method used to load the next {{col * row}} years to be displayed. */\n    loadPreviousYearList() {\n      this._firstYearInList -= this._getAmountOfYearsShownAtOnce();\n      this._constructYearGrid();\n    }\n    /** Method that sends the year to the parent component when it is clicked. */\n    selectYear(selectedYear, event) {\n      if (event) {\n        event.stopPropagation();\n      }\n      this.yearSelected = selectedYear.year;\n      this.yearClicked.emit(this.yearSelected);\n    }\n    /**\n     * Set focus on month cell.\n     * It can be a selected cell, current month cell or first cell in the list\n     */\n    setFocusOnCell() {\n      const cellToFocus = new DefaultCalendarActiveCellStrategy().getActiveCell(this._getYearList());\n      if (!cellToFocus?.id) {\n        return;\n      }\n      this._focusElementBySelector(`#${cellToFocus.id}`);\n    }\n    /**\n     * @hidden\n     * Method for handling the keyboard navigation.\n     */\n    _onKeydownYearHandler(event, index) {\n      this._calendarService.onKeydownHandler(event, index);\n    }\n    /**\n     * @hidden\n     * Method that allows to focus elements inside this component\n     */\n    _focusElementBySelector(elementSelector) {\n      const elementToFocus = this._eRef.nativeElement.querySelector(elementSelector);\n      if (elementToFocus?.focus) {\n        elementToFocus.focus();\n      }\n    }\n    /**\n     * @hidden\n     * Standardized method to calculate grid [x][y] to index number of flatten list\n     */\n    _getIndex(rowIndex, colIndex) {\n      return this._calendarService.getId(rowIndex, colIndex);\n    }\n    /**\n     * @hidden\n     * Get grid cell id be index\n     * @param index\n     */\n    _getId(index) {\n      return this.viewId + '-year-' + index;\n    }\n    /**\n     * @hidden\n     * Method that returns active cell, which means:\n     * if there is any selected year, return selected year\n     * if there is no selected year, but there is current year, return current year\n     * if there is no current year, or selected, return first one\n     */\n    _getActiveYear() {\n      const selectedYearCell = this._getYearList().find(({\n        year\n      }) => year === this.yearSelected);\n      if (selectedYearCell) {\n        return selectedYearCell.year;\n      }\n      const currentYearCell = this._getYearList().find(({\n        year\n      }) => year === this._currentYear);\n      if (currentYearCell) {\n        return currentYearCell.year;\n      }\n      return this._calendarYearListGrid[0][0].year;\n    }\n    /** @hidden */\n    _constructYearGrid() {\n      const displayedYearsAmount = this.yearViewGrid.cols * this.yearViewGrid.rows;\n      const calendarYearList = [];\n      this._calendarYearListGrid = [];\n      for (let x = 0; x < displayedYearsAmount; ++x) {\n        const year = this._firstYearInList + x;\n        calendarYearList.push({\n          year,\n          label: this._getYearName(year),\n          ariaLabel: this._getAriaYearName(year),\n          selected: year === this.yearSelected,\n          current: year === this._currentYear,\n          index: x\n        });\n      }\n      /** Creating 2d grid */\n      while (calendarYearList.length) {\n        this._calendarYearListGrid.push(calendarYearList.splice(0, this.yearViewGrid.cols));\n      }\n      this._activeYear = this._getActiveYear();\n      this._calendarYearListGrid.forEach((row, rowIndex) => {\n        row.forEach((cell, colIndex) => {\n          cell.id = this._getId(this._getIndex(rowIndex, colIndex));\n          cell.tabIndex = cell.year === this._activeYear ? 0 : -1;\n        });\n      });\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @hidden\n     * Returns year name as a string.\n     */\n    _getYearName(year) {\n      const formatted = this._dateTimeAdapter.getYearName(this._dateTimeAdapter.createDate(year, 1, 1));\n      return this._getYearString(year, formatted);\n    }\n    /**\n     * @hidden\n     * Returns aria year name as a string.\n     */\n    _getAriaYearName(year) {\n      const formatted = this._dateTimeAdapter.format(this._dateTimeAdapter.createDate(year, 1, 1), this._dateTimeFormats.display.yearA11yLabel);\n      return this._getYearString(year, formatted);\n    }\n    /**\n     * @hidden\n     * Returns year name taking into account yearMapping.\n     */\n    _getYearString(year, defaultStr) {\n      if (typeof this.yearViewGrid.yearMapping === 'function') {\n        return this.yearViewGrid.yearMapping(year);\n      }\n      return defaultStr;\n    }\n    /**\n     * @hidden\n     * Returns transformed 1d array from 2d year grid.\n     */\n    _getYearList() {\n      return [].concat(...this._calendarYearListGrid);\n    }\n    /**\n     * @hidden\n     * Amount of years displayed in year view\n     */\n    _getAmountOfYearsShownAtOnce() {\n      return this.yearViewGrid.rows * this.yearViewGrid.cols;\n    }\n    /**\n     * @hidden\n     * Method to put configuration and listeners on calendar keyboard service\n     */\n    _setupKeyboardService() {\n      this._calendarService.colAmount = this.yearViewGrid.cols;\n      this._calendarService.rowAmount = this.yearViewGrid.rows;\n      this._calendarService.focusEscapeFunction = this.focusEscapeFunction;\n      this._calendarService.onFocusIdChange.pipe(takeUntil(this._onDestroy$)).subscribe(index => this._focusOnCellByIndex(index));\n      this._calendarService.onKeySelect.pipe(takeUntil(this._onDestroy$)).subscribe(index => this.selectYear(this._getYearList()[index]));\n      this._calendarService.onListStartApproach.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this.loadPreviousYearList();\n        this._changeDetectorRef.detectChanges();\n        this._focusOnCellByIndex(index);\n      });\n      this._calendarService.onListEndApproach.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this.loadNextYearList();\n        this._changeDetectorRef.detectChanges();\n        this._focusOnCellByIndex(index);\n      });\n    }\n    /** @hidden */\n    _focusOnCellByIndex(index) {\n      this._focusElementBySelector(`#${this._getId(index)}`);\n    }\n  }\n  CalendarYearViewComponent.ɵfac = function CalendarYearViewComponent_Factory(t) {\n    return new (t || CalendarYearViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CalendarService), i0.ɵɵdirectiveInject(i2.DatetimeAdapter), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS), i0.ɵɵdirectiveInject(CalendarI18nLabels));\n  };\n  CalendarYearViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CalendarYearViewComponent,\n    selectors: [[\"fd-calendar-year-view\"]],\n    hostVars: 1,\n    hostBindings: function CalendarYearViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.viewId);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      focusEscapeFunction: \"focusEscapeFunction\",\n      yearSelected: \"yearSelected\",\n      yearViewGrid: \"yearViewGrid\"\n    },\n    outputs: {\n      yearClicked: \"yearClicked\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 6,\n    consts: [[1, \"fd-calendar__years\"], [\"role\", \"grid\", 1, \"fd-calendar__table\"], [\"role\", \"rowgroup\", 1, \"fd-calendar__group\"], [\"class\", \"fd-calendar__row\", \"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"hidden\", \"\", \"aria-hidden\", \"true\"], [\"role\", \"row\", 1, \"fd-calendar__row\"], [\"class\", \"fd-button fd-button--transparent fd-calendar__item\", \"role\", \"gridcell\", 3, \"fd-calendar__item--current\", \"is-active\", \"keydown\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"gridcell\", 1, \"fd-button\", \"fd-button--transparent\", \"fd-calendar__item\", 3, \"keydown\", \"click\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"tabindex\", \"-1\", 1, \"fd-calendar__item-button\"], [1, \"fd-calendar__text\"]],\n    template: function CalendarYearViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"tbody\", 2);\n        i0.ɵɵtemplate(3, CalendarYearViewComponent_tr_3_Template, 2, 1, \"tr\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-roledescription\", ctx._viewRoleDescription);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx._calendarYearListGrid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._todayLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._todayAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._selectedDateLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._selectedDateAriaLabel);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.ButtonComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarYearViewComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Create an Error to be thrown when attempting to use an invalid date implementation. */\nfunction createMissingDateImplementationError(provider) {\n  return Error(`Calendar: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: FdDatetimeModule, or provide a ` + `custom implementation.`);\n}\nlet CalendarAggregatedYearViewComponent = /*#__PURE__*/(() => {\n  class CalendarAggregatedYearViewComponent {\n    /**\n     * @hidden\n     * Today cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _todayAriaLabel() {\n      return this._calendarI18nLabels.todayLabel;\n    }\n    /**\n     * @hidden\n     * Selected date cell label.\n     * Is used in conjunction with cell date itself\n     */\n    get _selectedDateAriaLabel() {\n      return this._calendarI18nLabels.dateSelectedLabel;\n    }\n    /**\n     * @hidden\n     * View description\n     */\n    get _viewRoleDescription() {\n      return this._calendarI18nLabels.calendarYearsRangeViewDescription;\n    }\n    /**\n     * View ID\n     */\n    get viewId() {\n      return this.id + '-years-range-view';\n    }\n    /**\n     * @hidden\n     * Today cell label ID\n     */\n    get _todayLabelId() {\n      return this.viewId + '-today-label';\n    }\n    /**\n     * @hidden\n     * Selected date label ID\n     */\n    get _selectedDateLabelId() {\n      return this.viewId + '-selected-date-label';\n    }\n    /** @hidden */\n    constructor(_eRef, _changeDetectorRef, _calendarService, _dateTimeAdapter, _dateTimeFormats, _calendarI18nLabels) {\n      this._eRef = _eRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._calendarService = _calendarService;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._calendarI18nLabels = _calendarI18nLabels;\n      /** Event fired when a year is selected. */\n      this.yearsClicked = new EventEmitter();\n      /**\n       * @hidden\n       * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)\n       */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._initiated = false;\n      // default values\n      this._currentYear = _dateTimeAdapter.getYear(_dateTimeAdapter.today());\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._initiated = true;\n      this._setupKeyboardService();\n      this._firstYearInList = this.yearSelected - this._yearsInOnePeriod();\n      this._constructYearsGrid();\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._constructYearsGrid();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (this._initiated && ('yearSelected' in changes || 'aggregatedYearsViewGrid' in changes || 'yearViewGrid' in changes || 'id' in changes)) {\n        this._constructYearsGrid();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** Method that sends the year to the parent component when it is clicked. */\n    selectYear(selectedYear, event) {\n      if (event) {\n        event.stopPropagation();\n      }\n      this._yearsSelected = selectedYear.years;\n      this.yearsClicked.emit(this._yearsSelected);\n    }\n    /** Method used to load the previous 12 years to be displayed. */\n    loadNextYearsList() {\n      this._firstYearInList += this._periodsAmount() * this._yearsInOnePeriod();\n      this._constructYearsGrid();\n    }\n    /** Method used to load the next 12 years to be displayed. */\n    loadPreviousYearsList() {\n      this._firstYearInList -= this._periodsAmount() * this._yearsInOnePeriod();\n      this._constructYearsGrid();\n    }\n    /**\n     * Set focus on month cell.\n     * It can be a selected cell, current month cell or first cell in the list\n     */\n    setFocusOnCell() {\n      const cellToFocus = new DefaultCalendarActiveCellStrategy().getActiveCell(this._getYearsList());\n      if (!cellToFocus?.id) {\n        return;\n      }\n      this._focusElementBySelector(`#${cellToFocus.id}`);\n    }\n    /** Method for handling the keyboard navigation. */\n    _onKeydownYearHandler(event, index) {\n      this._calendarService.onKeydownHandler(event, index);\n    }\n    /**\n     * @hidden\n     * Method that allows to focus elements inside this component\n     */\n    _focusElementBySelector(elementSelector) {\n      const elementToFocus = this._eRef.nativeElement.querySelector(elementSelector);\n      if (elementToFocus?.focus) {\n        elementToFocus.focus();\n      }\n    }\n    /**\n     * @hidden\n     * Method returning index of aggregated year index cell\n     */\n    _getIndex(rowIndex, colIndex) {\n      return this._calendarService.getId(rowIndex, colIndex);\n    }\n    /**\n     * @hidden\n     * Get id of calendar's aggregated year item\n     */\n    _getId(index) {\n      return this.viewId + '-aggregated-years-' + index;\n    }\n    /**\n     * @hidden\n     * Check if specified year is between start year and end year)\n     */\n    _isBetween(aggregatedYear, yearToCheck) {\n      return aggregatedYear.endYear >= yearToCheck && aggregatedYear.startYear <= yearToCheck;\n    }\n    /** @hidden */\n    _constructYearsGrid() {\n      const displayedYearsAmount = this.aggregatedYearsViewGrid.cols * this.aggregatedYearsViewGrid.rows;\n      const calendarYearList = [];\n      this._calendarYearListGrid = [];\n      for (let index = 0; index < displayedYearsAmount; ++index) {\n        /**\n         * Generates object with certain period of years,\n         * which depends on amount of years displayed in year view\n         */\n        const years = {\n          startYear: this._firstYearInList + this._yearsInOnePeriod() * index,\n          endYear: this._firstYearInList + this._yearsInOnePeriod() * (index + 1) - 1\n        };\n        calendarYearList.push({\n          years,\n          label: this._getYearsName(years),\n          ariaLabel: this._getAriaYearsName(years),\n          selected: this._isBetween(years, this.yearSelected),\n          current: this._isBetween(years, this._currentYear),\n          index\n        });\n      }\n      /** Creating 2d grid */\n      while (calendarYearList.length) {\n        this._calendarYearListGrid.push(calendarYearList.splice(0, this.aggregatedYearsViewGrid.cols));\n      }\n      const yearsCellSelected = calendarYearList.find(cell => this._isBetween(cell.years, this.yearSelected));\n      this._yearsSelected = yearsCellSelected ? yearsCellSelected.years : null;\n      this._activeYear = this._getActiveYear();\n      this._calendarYearListGrid.forEach((row, rowIndex) => {\n        row.forEach((cell, colIndex) => {\n          cell.id = this._getId(this._getIndex(rowIndex, colIndex));\n          cell.tabIndex = cell.years === this._activeYear ? 0 : -1;\n        });\n      });\n      this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * @hidden\n     * Returns year name as a string.\n     */\n    _getYearsName(years) {\n      const startYearFormatted = this._dateTimeAdapter.getYearName(this._dateTimeAdapter.createDate(years.startYear, 1, 1));\n      const endYearFormatted = this._dateTimeAdapter.getYearName(this._dateTimeAdapter.createDate(years.endYear, 1, 1));\n      return `${this._getYearString(years.startYear, startYearFormatted)} - ${this._getYearString(years.endYear, endYearFormatted)}`;\n    }\n    /**\n     * @hidden\n     * Returns aria year name as a string.\n     */\n    _getAriaYearsName(years) {\n      const startYearFormatted = this._dateTimeAdapter.format(this._dateTimeAdapter.createDate(years.startYear, 1, 1), this._dateTimeFormats.display.yearA11yLabel);\n      const endYearFormatted = this._dateTimeAdapter.format(this._dateTimeAdapter.createDate(years.endYear, 1, 1), this._dateTimeFormats.display.yearA11yLabel);\n      return `${this._getYearString(years.startYear, startYearFormatted)} - ${this._getYearString(years.endYear, endYearFormatted)}`;\n    }\n    /**\n     * @hidden\n     * Returns year name taking into account yearMapping.\n     */\n    _getYearString(year, defaultStr) {\n      if (typeof this.aggregatedYearsViewGrid.yearMapping === 'function') {\n        return this.aggregatedYearsViewGrid.yearMapping(year);\n      }\n      return defaultStr;\n    }\n    /**\n     * @hidden\n     * Amount of years displayed in year view\n     */\n    _yearsInOnePeriod() {\n      if (this.yearViewGrid) {\n        return this.yearViewGrid.cols * this.yearViewGrid.rows;\n      } else {\n        return 12;\n      }\n    }\n    /**\n     * @hidden\n     * Amount of years displayed in aggregated year view\n     */\n    _periodsAmount() {\n      return this.aggregatedYearsViewGrid.cols * this.aggregatedYearsViewGrid.rows;\n    }\n    /**\n     * @hidden\n     * Method that returns active cell, which means:\n     * if there is any selected year, return selected year\n     * if there is no selected year, but there is current year, return current year\n     * if there is no current year, or selected, return first one\n     */\n    _getActiveYear() {\n      const selectedYearCell = this._getYearsList().find(({\n        years\n      }) => this._isBetween(years, this.yearSelected));\n      if (selectedYearCell) {\n        return selectedYearCell.years;\n      }\n      const currentYearCell = this._getYearsList().find(({\n        years\n      }) => this._isBetween(years, this._currentYear));\n      if (currentYearCell) {\n        return currentYearCell.years;\n      }\n      return this._calendarYearListGrid[0][0].years;\n    }\n    /**\n     * @hidden\n     * Returns transformed 1d array from 2d year grid.\n     */\n    _getYearsList() {\n      return [].concat(...this._calendarYearListGrid);\n    }\n    /**\n     * @hidden\n     * Method to put configuration and listeners on calendar keyboard service\n     */\n    _setupKeyboardService() {\n      this._calendarService.rowAmount = this.aggregatedYearsViewGrid.rows;\n      this._calendarService.colAmount = this.aggregatedYearsViewGrid.cols;\n      this._calendarService.focusEscapeFunction = this.focusEscapeFunction;\n      this._calendarService.onFocusIdChange.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this._focusOnCellByIndex(index);\n      });\n      this._calendarService.onKeySelect.pipe(takeUntil(this._onDestroy$)).subscribe(index => this.selectYear(this._getYearsList()[index]));\n      this._calendarService.onListStartApproach.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this.loadPreviousYearsList();\n        this._changeDetectorRef.detectChanges();\n        this._focusOnCellByIndex(index);\n      });\n      this._calendarService.onListEndApproach.pipe(takeUntil(this._onDestroy$)).subscribe(index => {\n        this.loadNextYearsList();\n        this._changeDetectorRef.detectChanges();\n        this._focusOnCellByIndex(index);\n      });\n    }\n    /** @hidden */\n    _focusOnCellByIndex(index) {\n      this._focusElementBySelector(`#${this._getId(index)}`);\n    }\n  }\n  CalendarAggregatedYearViewComponent.ɵfac = function CalendarAggregatedYearViewComponent_Factory(t) {\n    return new (t || CalendarAggregatedYearViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CalendarService), i0.ɵɵdirectiveInject(i2.DatetimeAdapter), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS), i0.ɵɵdirectiveInject(CalendarI18nLabels));\n  };\n  CalendarAggregatedYearViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CalendarAggregatedYearViewComponent,\n    selectors: [[\"fd-calendar-aggregated-year-view\"]],\n    hostVars: 1,\n    hostBindings: function CalendarAggregatedYearViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.viewId);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      focusEscapeFunction: \"focusEscapeFunction\",\n      yearSelected: \"yearSelected\",\n      aggregatedYearsViewGrid: \"aggregatedYearsViewGrid\",\n      yearViewGrid: \"yearViewGrid\"\n    },\n    outputs: {\n      yearsClicked: \"yearsClicked\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 6,\n    consts: [[1, \"fd-calendar__years\"], [\"role\", \"grid\", 1, \"fd-calendar__table\"], [\"role\", \"rowgroup\", 1, \"fd-calendar__group\"], [\"class\", \"fd-calendar__row\", 4, \"ngFor\", \"ngForOf\"], [\"hidden\", \"\", \"aria-hidden\", \"true\"], [1, \"fd-calendar__row\"], [\"class\", \"fd-calendar__item\", \"role\", \"gridcell\", 3, \"fd-calendar__item--current\", \"is-active\", \"keydown\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"gridcell\", 1, \"fd-calendar__item\", 3, \"keydown\", \"click\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"tabindex\", \"-1\", 1, \"fd-calendar__item-button\"], [1, \"fd-calendar__text\"]],\n    template: function CalendarAggregatedYearViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"tbody\", 2);\n        i0.ɵɵtemplate(3, CalendarAggregatedYearViewComponent_tr_3_Template, 2, 1, \"tr\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-roledescription\", ctx._viewRoleDescription);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx._calendarYearListGrid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._todayLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._todayAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx._selectedDateLabelId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx._selectedDateAriaLabel);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.ButtonComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarAggregatedYearViewComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet calendarUniqueId = 0;\n/**\n * Months: 1 = January, 12 = december.\n * Days: 1 = Sunday, 7 = Saturday\n *\n * Calendar component used for selecting dates, typically used by the DatePicker and DateTimePicker components.\n * Supports the Angular forms module, enabling form validity, ngModel, etc.\n * ```html\n * <fd-calendar></fd-calendar>\n * ```\n *\n */\nlet CalendarComponent = /*#__PURE__*/(() => {\n  class CalendarComponent {\n    /** @hidden */\n    constructor(_elementRef, _changeDetectorRef, _contentDensityObserver,\n    // Use @Optional to avoid angular injection error message and throw our own which is more precise one\n    _dateTimeAdapter, _dateTimeFormats) {\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._contentDensityObserver = _contentDensityObserver;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._dateTimeFormats = _dateTimeFormats;\n      /**\n       * Whether user wants to mark sunday/saturday with `fd-calendar__item--weekend` class\n       */\n      this.markWeekends = true;\n      /**\n       * Whether user wants to show week numbers next to days\n       */\n      this.showWeekNumbers = false;\n      /** Whether calendar is used inside mobile in landscape mode, it also adds close button on right side */\n      this.mobileLandscape = false;\n      /** Whether calendar is used inside mobile in portrait mode */\n      this.mobilePortrait = false;\n      /** Actually shown active view one of 'day' | 'month' | 'year' */\n      this.activeView = 'day';\n      /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n      this.calType = 'single';\n      /** Id of the calendar. If none is provided, one will be generated. */\n      this.id = 'fd-calendar-' + calendarUniqueId++;\n      /**\n       * Special days mark, it can be used by passing array of object with\n       * Special day number, list 1-20 [class:`fd-calendar__special-day--{{number}}`] is available there:\n       * https://sap.github.io/fundamental-styles/components/calendar.html calendar special days section\n       * Rule accepts method with D object as a parameter. ex:\n       * `rule: (fdDate: D) => fdDate.getDay() === 1`, which will mark all sundays as special day.\n       */\n      this.specialDaysRules = [];\n      /**\n       * Object to customize year grid,\n       * Row, Columns and method to display year can be modified\n       */\n      this.yearGrid = {\n        rows: 4,\n        cols: 5\n      };\n      /**\n       * Object to customize aggregated year grid,\n       * Row, Columns and method to display year can be modified\n       */\n      this.aggregatedYearGrid = {\n        rows: 4,\n        cols: 3\n      };\n      /**\n       * Whether user wants to mark day cells on hover.\n       * Works only on range mode, when start date is selected on Day View.\n       */\n      this.rangeHoverEffect = false;\n      /** Event thrown every time active view is changed */\n      this.activeViewChange = new EventEmitter();\n      /** Event thrown every time selected date in single mode is changed */\n      this.selectedDateChange = new EventEmitter();\n      /** Event thrown every time selected first or last date in range mode is changed */\n      this.selectedRangeDateChange = new EventEmitter();\n      /** Event thrown every time when value is overwritten from outside and throw back isValid */\n      this.isValidDateChange = new EventEmitter();\n      /** Event thrown every time when calendar should be closed */\n      this.closeCalendar = new EventEmitter();\n      /** Event thrown, when close button is clicked */\n      this.closeClicked = new EventEmitter();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** That allows to define function that should happen, when focus should normally escape of component */\n      this.escapeFocusFunction = event => {\n        event?.preventDefault();\n        this._calendarHeaderComponent?.focus();\n      };\n      /**\n       * Function used to disable certain dates in the calendar.\n       * @param date date\n       */\n      this.disableFunction = () => false;\n      /**\n       * Function used to disable certain dates in the calendar for the range start selection.\n       * @param date date\n       */\n      this.disableRangeStartFunction = () => false;\n      /**\n       * Function used to disable certain dates in the calendar for the range end selection.\n       * @param date date\n       */\n      this.disableRangeEndFunction = () => false;\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n      if (!this._dateTimeAdapter) {\n        throw createMissingDateImplementationError('DateTimeAdapter');\n      }\n      if (!this._dateTimeFormats) {\n        throw createMissingDateImplementationError('DATE_TIME_FORMATS');\n      }\n      _contentDensityObserver.subscribe();\n      // set default value\n      this._adapterStartingDayOfWeek = this._dateTimeAdapter.getFirstDayOfWeek() + 1;\n      this.selectedDate = this._dateTimeAdapter.today();\n      this._changeDetectorRef.markForCheck();\n      this._listenToLocaleChanges();\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._prepareDisplayedView();\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if ('nextButtonDisableFunction' in changes || 'previousButtonDisableFunction' in changes || '_currentlyDisplayed' in changes) {\n        this._setNavigationButtonsStates();\n      }\n    }\n    /** @hidden */\n    getWeekStartDay() {\n      return this.startingDayOfWeek === undefined ? this._adapterStartingDayOfWeek : this.startingDayOfWeek;\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms.\n     */\n    writeValue(selected) {\n      let valid = true;\n      if (this.calType === 'single') {\n        selected = selected;\n        valid = this._dateTimeAdapter.isValid(selected);\n        this.selectedDate = selected;\n      }\n      if (this.calType === 'range' && selected) {\n        selected = selected;\n        if (!this._dateTimeAdapter.isValid(selected.start) || !this._dateTimeAdapter.isValid(selected.end)) {\n          valid = false;\n        }\n        this.selectedRangeDate = {\n          start: selected.start,\n          end: selected.end\n        };\n      }\n      if (valid) {\n        this._prepareDisplayedView();\n      }\n      this._changeDetectorRef.detectChanges();\n      this.isValidDateChange.emit(valid);\n    }\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate() {\n      return this.isModelValid() ? null : {\n        dateValidation: {\n          valid: false\n        }\n      };\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Method that handle active view change and throws event.\n     *\n     * Fired by calendar header component.\n     */\n    handleActiveViewChange(activeView) {\n      if (activeView === this.activeView) {\n        return;\n      }\n      this.activeView = activeView;\n      this.activeViewChange.emit(activeView);\n      if (activeView === 'month') {\n        this.onMonthViewSelected();\n      }\n      if (activeView === 'year') {\n        this.onYearViewSelected();\n      }\n      if (activeView === 'aggregatedYear') {\n        this.onYearsRangeViewSelected();\n      }\n      this._setNavigationButtonsStates();\n    }\n    /**\n     * @hidden\n     * Method that is triggered by events from day view component, when there is selected single date changed\n     */\n    selectedDateChanged(date) {\n      this.selectedDate = date;\n      this._setNavigationButtonsStates();\n      this.onChange(date);\n      this.selectedDateChange.emit(date);\n      this.closeCalendar.emit();\n    }\n    /**\n     * @hidden\n     * Method that is triggered by events from day view component, when there is selected range date changed\n     */\n    selectedRangeDateChanged(dates) {\n      if (dates) {\n        this.selectedRangeDate = {\n          start: dates.start,\n          end: dates.end\n        };\n        this.selectedRangeDateChange.emit(this.selectedRangeDate);\n        this.onChange(this.selectedRangeDate);\n        this.closeCalendar.emit();\n      }\n    }\n    /** Function that handles next arrow icon click, depending on current view it changes month, year or list of years */\n    handleNextArrowClick() {\n      switch (this.activeView) {\n        case 'day':\n          this.displayNextMonth();\n          break;\n        case 'month':\n          this.displayNextYear();\n          break;\n        case 'year':\n          this.displayNextYearList();\n          break;\n        case 'aggregatedYear':\n          this.displayNextYearsList();\n          break;\n      }\n      this._setNavigationButtonsStates();\n    }\n    /** Function that handles previous arrow icon click, depending on current view it changes month, year or list of years */\n    handlePreviousArrowClick() {\n      switch (this.activeView) {\n        case 'day':\n          this.displayPreviousMonth();\n          break;\n        case 'month':\n          this.displayPreviousYear();\n          break;\n        case 'year':\n          this.displayPreviousYearList();\n          break;\n        case 'aggregatedYear':\n          this.displayPreviousYearsList();\n          break;\n      }\n      this._setNavigationButtonsStates();\n    }\n    /** Function that allows to switch actual view to next month */\n    displayNextMonth() {\n      if (this._currentlyDisplayed.month === 12) {\n        this._currentlyDisplayed = {\n          year: this._currentlyDisplayed.year + 1,\n          month: 1\n        };\n      } else {\n        this._currentlyDisplayed = {\n          year: this._currentlyDisplayed.year,\n          month: this._currentlyDisplayed.month + 1\n        };\n      }\n    }\n    /** Function that allows to switch actual view to previous month */\n    displayPreviousMonth() {\n      if (this._currentlyDisplayed.month <= 1) {\n        this._currentlyDisplayed = {\n          year: this._currentlyDisplayed.year - 1,\n          month: 12\n        };\n      } else {\n        this._currentlyDisplayed = {\n          year: this._currentlyDisplayed.year,\n          month: this._currentlyDisplayed.month - 1\n        };\n      }\n    }\n    /** Function that allows to switch actual view to next year */\n    displayNextYear() {\n      this._currentlyDisplayed = {\n        month: this._currentlyDisplayed.month,\n        year: this._currentlyDisplayed.year + 1\n      };\n    }\n    /** Function that allows to switch actual view to previous year */\n    displayPreviousYear() {\n      this._currentlyDisplayed = {\n        month: this._currentlyDisplayed.month,\n        year: this._currentlyDisplayed.year - 1\n      };\n    }\n    /** Function that allows to switch actually displayed list of year to next year list*/\n    displayNextYearList() {\n      this._yearViewComponent.loadNextYearList();\n      this._currentlyDisplayed = {\n        month: this._currentlyDisplayed.month,\n        year: this._yearViewComponent._firstYearInList\n      };\n    }\n    /** Function that allows to switch actually displayed list of year to previous year list*/\n    displayPreviousYearList() {\n      this._yearViewComponent.loadPreviousYearList();\n      this._currentlyDisplayed = {\n        month: this._currentlyDisplayed.month,\n        year: this._yearViewComponent._firstYearInList\n      };\n    }\n    /** Function that allows to switch actually displayed list of year to next year list*/\n    displayNextYearsList() {\n      this._aggregatedYearViewComponent.loadNextYearsList();\n    }\n    /** Function that allows to switch actually displayed list of year to previous year list*/\n    displayPreviousYearsList() {\n      this._aggregatedYearViewComponent.loadPreviousYearsList();\n    }\n    /**\n     * Function that allows to change currently displayed month/year configuration,\n     * which are connected to days displayed\n     */\n    setCurrentlyDisplayed(date) {\n      if (this._dateTimeAdapter.isValid(date)) {\n        this._currentlyDisplayed = {\n          month: this._dateTimeAdapter.getMonth(date),\n          year: this._dateTimeAdapter.getYear(date)\n        };\n      }\n    }\n    /**\n     * Set initial focus on one of the calendar's element\n     */\n    initialFocus() {\n      this._getActiveFocusableView()?.setFocusOnCell();\n    }\n    /**\n     * @hidden\n     * Function that handles changes from month view child component, changes actual view and changes currently displayed month\n     */\n    handleMonthViewChange(month) {\n      this._currentlyDisplayed = {\n        month,\n        year: this._currentlyDisplayed.year\n      };\n      this.activeView = 'day';\n      this.onDaysViewSelected();\n      this.activeViewChange.emit(this.activeView);\n    }\n    /** Select year */\n    selectedYear(yearSelected) {\n      this.activeView = 'day';\n      this._currentlyDisplayed.year = yearSelected;\n      this.onDaysViewSelected();\n    }\n    /** Select year range */\n    selectedYears(yearsSelected) {\n      this.activeView = 'year';\n      this._currentlyDisplayed = {\n        ...this._currentlyDisplayed,\n        year: yearsSelected.startYear\n      };\n      this.onYearViewSelected();\n    }\n    /** @hidden */\n    onDaysViewSelected() {\n      this._changeDetectorRef.detectChanges();\n      this._dayViewComponent?.setFocusOnCell();\n    }\n    /** @hidden */\n    onMonthViewSelected() {\n      this._changeDetectorRef.detectChanges();\n      this._monthViewComponent?.setFocusOnCell();\n    }\n    /** @hidden */\n    onYearViewSelected() {\n      this._changeDetectorRef.detectChanges();\n      this._yearViewComponent?.setFocusOnCell();\n    }\n    /** @hidden */\n    onYearsRangeViewSelected() {\n      this._changeDetectorRef.detectChanges();\n      this._aggregatedYearViewComponent?.setFocusOnCell();\n    }\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    isModelValid() {\n      if (this.calType === 'single') {\n        return this._dateTimeAdapter.isValid(this.selectedDate);\n      }\n      if (this.calType === 'range') {\n        return this.selectedRangeDate && this._dateTimeAdapter.isValid(this.selectedRangeDate.start) && this._dateTimeAdapter.isValid(this.selectedRangeDate.end);\n      }\n      return false;\n    }\n    /** @hidden */\n    _listenToLocaleChanges() {\n      this._subscriptions.add(this._dateTimeAdapter.localeChanges.subscribe(() => {\n        this._adapterStartingDayOfWeek = this._dateTimeAdapter.getFirstDayOfWeek() + 1;\n        this._changeDetectorRef.markForCheck();\n      }));\n    }\n    /**\n     * @hidden\n     * Method that sets up the currently displayed variables, like shown month and year.\n     * Day grid is based on currently displayed month and year\n     */\n    _prepareDisplayedView() {\n      if (this.calType === 'single' && this._dateTimeAdapter.isValid(this.selectedDate)) {\n        this._currentlyDisplayed = {\n          year: this._dateTimeAdapter.getYear(this.selectedDate),\n          month: this._dateTimeAdapter.getMonth(this.selectedDate)\n        };\n      } else if (this.selectedRangeDate && this.selectedRangeDate.start) {\n        this._currentlyDisplayed = {\n          year: this._dateTimeAdapter.getYear(this.selectedRangeDate.start),\n          month: this._dateTimeAdapter.getMonth(this.selectedRangeDate.start)\n        };\n      } else if (this.selectedRangeDate && this.selectedRangeDate.end) {\n        this._currentlyDisplayed = {\n          year: this._dateTimeAdapter.getYear(this.selectedRangeDate.end),\n          month: this._dateTimeAdapter.getMonth(this.selectedRangeDate.end)\n        };\n      } else {\n        const today = this._dateTimeAdapter.today();\n        this._currentlyDisplayed = {\n          year: this._dateTimeAdapter.getYear(today),\n          month: this._dateTimeAdapter.getMonth(today)\n        };\n      }\n    }\n    /** @hidden */\n    _getActiveFocusableView() {\n      switch (this.activeView) {\n        case 'day':\n          return this._dayViewComponent;\n        case 'month':\n          return this._monthViewComponent;\n        case 'year':\n          return this._yearViewComponent;\n        case 'aggregatedYear':\n          return this._aggregatedYearViewComponent;\n        default:\n          return null;\n      }\n    }\n    /** @hidden */\n    _setNavigationButtonsStates() {\n      this.previousButtonDisabled = typeof this.previousButtonDisableFunction === 'function' && this.previousButtonDisableFunction(this.selectedDate, this._currentlyDisplayed, this.activeView);\n      this.nextButtonDisabled = typeof this.nextButtonDisableFunction === 'function' && this.nextButtonDisableFunction(this.selectedDate, this._currentlyDisplayed, this.activeView);\n      this._changeDetectorRef.markForCheck();\n    }\n    /** @hidden */\n    _focusOut(event) {\n      if (!this._elementRef.nativeElement.contains(event.relatedTarget)) {\n        this.onTouched();\n      }\n    }\n  }\n  CalendarComponent.ɵfac = function CalendarComponent_Factory(t) {\n    return new (t || CalendarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$1.ContentDensityObserver), i0.ɵɵdirectiveInject(i2.DatetimeAdapter, 8), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS, 8));\n  };\n  CalendarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CalendarComponent,\n    selectors: [[\"fd-calendar\"]],\n    viewQuery: function CalendarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CalendarDayViewComponent, 5);\n        i0.ɵɵviewQuery(CalendarMonthViewComponent, 5);\n        i0.ɵɵviewQuery(CalendarYearViewComponent, 5);\n        i0.ɵɵviewQuery(CalendarAggregatedYearViewComponent, 5);\n        i0.ɵɵviewQuery(CalendarHeaderComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._dayViewComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._monthViewComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._yearViewComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._aggregatedYearViewComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._calendarHeaderComponent = _t.first);\n      }\n    },\n    hostAttrs: [1, \"fd-calendar\", \"fd-has-display-block\"],\n    hostVars: 5,\n    hostBindings: function CalendarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusout\", function CalendarComponent_focusout_HostBindingHandler($event) {\n          return ctx._focusOut($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.id);\n        i0.ɵɵclassProp(\"fd-calendar--mobile-landscape\", ctx.mobileLandscape)(\"fd-calendar--mobile-portrait\", ctx.mobilePortrait);\n      }\n    },\n    inputs: {\n      selectedDate: \"selectedDate\",\n      markWeekends: \"markWeekends\",\n      showWeekNumbers: \"showWeekNumbers\",\n      mobileLandscape: \"mobileLandscape\",\n      mobilePortrait: \"mobilePortrait\",\n      selectedRangeDate: \"selectedRangeDate\",\n      activeView: \"activeView\",\n      startingDayOfWeek: \"startingDayOfWeek\",\n      calType: \"calType\",\n      id: \"id\",\n      specialDaysRules: \"specialDaysRules\",\n      yearGrid: \"yearGrid\",\n      aggregatedYearGrid: \"aggregatedYearGrid\",\n      rangeHoverEffect: \"rangeHoverEffect\",\n      previousButtonDisableFunction: \"previousButtonDisableFunction\",\n      nextButtonDisableFunction: \"nextButtonDisableFunction\",\n      escapeFocusFunction: \"escapeFocusFunction\",\n      disableFunction: \"disableFunction\",\n      disableRangeStartFunction: \"disableRangeStartFunction\",\n      disableRangeEndFunction: \"disableRangeEndFunction\"\n    },\n    outputs: {\n      activeViewChange: \"activeViewChange\",\n      selectedDateChange: \"selectedDateChange\",\n      selectedRangeDateChange: \"selectedRangeDateChange\",\n      isValidDateChange: \"isValidDateChange\",\n      closeCalendar: \"closeCalendar\",\n      closeClicked: \"closeClicked\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CalendarComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => CalendarComponent),\n      multi: true\n    }, CalendarService, contentDensityObserverProviders()]), i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 8,\n    consts: [[3, \"currentlyDisplayed\", \"activeView\", \"id\", \"calendarYearGrid\", \"mobileLandscape\", \"previousButtonDisabled\", \"nextButtonDisabled\", \"closeClicked\", \"nextClicked\", \"previousClicked\", \"activeViewChange\"], [3, \"ngSwitch\", 4, \"ngIf\"], [3, \"ngSwitch\"], [1, \"fd-calendar__content\"], [3, \"selectedDate\", \"showWeekNumbers\", \"markWeekends\", \"selectedRangeDate\", \"currentlyDisplayed\", \"startingDayOfWeek\", \"disableFunction\", \"disableRangeEndFunction\", \"disableRangeStartFunction\", \"calType\", \"id\", \"rangeHoverEffect\", \"specialDaysRules\", \"focusEscapeFunction\", \"selectedDateChange\", \"selectedRangeDateChange\", \"nextMonthSelect\", \"previousMonthSelect\", 4, \"ngSwitchCase\"], [3, \"monthSelected\", \"year\", \"id\", \"focusEscapeFunction\", \"monthClicked\", 4, \"ngSwitchCase\"], [3, \"yearSelected\", \"yearViewGrid\", \"id\", \"focusEscapeFunction\", \"yearClicked\", 4, \"ngSwitchCase\"], [3, \"yearSelected\", \"yearViewGrid\", \"aggregatedYearsViewGrid\", \"id\", \"focusEscapeFunction\", \"yearsClicked\", 4, \"ngSwitchCase\"], [3, \"selectedDate\", \"showWeekNumbers\", \"markWeekends\", \"selectedRangeDate\", \"currentlyDisplayed\", \"startingDayOfWeek\", \"disableFunction\", \"disableRangeEndFunction\", \"disableRangeStartFunction\", \"calType\", \"id\", \"rangeHoverEffect\", \"specialDaysRules\", \"focusEscapeFunction\", \"selectedDateChange\", \"selectedRangeDateChange\", \"nextMonthSelect\", \"previousMonthSelect\"], [3, \"monthSelected\", \"year\", \"id\", \"focusEscapeFunction\", \"monthClicked\"], [3, \"yearSelected\", \"yearViewGrid\", \"id\", \"focusEscapeFunction\", \"yearClicked\"], [3, \"yearSelected\", \"yearViewGrid\", \"aggregatedYearsViewGrid\", \"id\", \"focusEscapeFunction\", \"yearsClicked\"]],\n    template: function CalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"fd-calendar-header\", 0);\n        i0.ɵɵlistener(\"closeClicked\", function CalendarComponent_Template_fd_calendar_header_closeClicked_0_listener() {\n          return ctx.closeClicked.emit();\n        })(\"nextClicked\", function CalendarComponent_Template_fd_calendar_header_nextClicked_0_listener() {\n          return ctx.handleNextArrowClick();\n        })(\"previousClicked\", function CalendarComponent_Template_fd_calendar_header_previousClicked_0_listener() {\n          return ctx.handlePreviousArrowClick();\n        })(\"activeViewChange\", function CalendarComponent_Template_fd_calendar_header_activeViewChange_0_listener($event) {\n          return ctx.handleActiveViewChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(1, CalendarComponent_ng_container_1_Template, 6, 11, \"ng-container\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"currentlyDisplayed\", ctx._currentlyDisplayed)(\"activeView\", ctx.activeView)(\"id\", ctx.id)(\"calendarYearGrid\", ctx.yearGrid)(\"mobileLandscape\", ctx.mobileLandscape)(\"previousButtonDisabled\", ctx.previousButtonDisabled)(\"nextButtonDisabled\", ctx.nextButtonDisabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._currentlyDisplayed);\n      }\n    },\n    dependencies: [i4.NgIf, i4.NgSwitch, i4.NgSwitchCase, CalendarHeaderComponent, CalendarDayViewComponent, CalendarMonthViewComponent, CalendarYearViewComponent, CalendarAggregatedYearViewComponent],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n *//*!\\n.fd-calendar+(--compact, --mobile-landscape, --mobile-portrait)\\n    .fd-calendar__header\\n      .fd-calendar__navigation(--main-navigation)\\n        .fd-calendar__action(+[--arrow-left, --arrow-right])\\n        .fd-calendar__close-button--navigation\\n    .fd-calendar__content(+[--months, --years])\\n        .fd-calendar__table\\n          .fd-calendar__group\\n            .fd-calendar__row\\n              .fd-calendar__item(+[--other-month, --current, --side-helper, --weekend, --range],\\n                                 +[(.is-disabled | [aria-disabled=true]), (.is-focus | [aria-focus=true]), (.is-active | [aria-active=true])])\\n              .fd-calendar__special-day(+[--1, --2, ..., --19, --20])\\n                .fd-calendar__text\\n*/:root{--fdCalendar_Padding:1rem;--fdCalendar_Item_Width:2.125rem;--fdCalendar_Item_Height:2.75rem;--fdCalendar_Action_Padding:.5rem;--fdCalendar_Item_Spacing:.0625rem;--fdCalendar_Button_Horizontal_Space:.25rem;--fdCalendar_Width:20rem;--fdCalendar_Item_Inner_Border_Size:calc(100% - .125rem);--fdCalendar_Action_Width:auto}.fd-calendar .fd-calendar__item{-webkit-box-sizing:border-box;-webkit-box-flex:1;-ms-flex:1 1 .375rem;background-color:var(--sapLegend_WorkingBackground);border:0;border-radius:var(--fdCalendar_Border_Radius);box-sizing:border-box;color:var(--sapTextColor);cursor:pointer;flex:1 1 .375rem;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:var(--fdCalendar_Item_Height);line-height:var(--sapContent_LineHeight);margin:.0625rem;min-width:var(--fdCalendar_Item_Width);overflow:hidden;padding:0;position:relative}.fd-calendar .fd-calendar__item:after,.fd-calendar .fd-calendar__item:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__item:hover,.fd-calendar .is-hover.fd-calendar__item{background-color:var(--sapList_Hover_Background)}.fd-calendar__content--dates .fd-calendar__item--side-helper{align-self:center;background-color:var(--sapList_Background);height:var(--fdCalendar_Item_Side_Helper, 1.875rem);pointer-events:none}.fd-calendar__content--dates .fd-calendar__item--other-month{background-color:var(--sapList_Background)}.fd-calendar__content--dates .fd-calendar__item--other-month:hover,.fd-calendar__content--dates .is-hover.fd-calendar__item--other-month{background-color:var(--sapList_Hover_Background)}.fd-calendar__content--dates .fd-calendar__item--weekend{background-color:var(--sapLegend_NonWorkingBackground)}.fd-calendar__content--dates .fd-calendar__item--weekend:hover,.fd-calendar__content--dates .is-hover.fd-calendar__item--weekend{background-color:var(--sapList_Hover_Background)}.fd-calendar .fd-calendar__item--current,.fd-calendar__content--dates .fd-calendar__item--range.fd-calendar__item--current{border:solid var(--sapLegend_CurrentDateTime)!important}.fd-calendar .fd-calendar__item--current:active:after,.fd-calendar .is-active.fd-calendar__item--current:after,.fd-calendar__content--dates .fd-calendar__item--range.fd-calendar__item--current:active:after,.fd-calendar__content--dates .is-active.fd-calendar__item--range.fd-calendar__item--current:after{border:var(--fdCalendar_Active_Item_Border);border-radius:calc(var(--fdCalendar_Border_Radius) / 2);bottom:.0625rem;content:\\\" \\\";height:var(--fdCalendar_Item_Inner_Border_Size);left:.0625rem;position:absolute;right:auto;width:var(--fdCalendar_Item_Inner_Border_Size)}.fd-calendar .fd-calendar__item--current:active:after[dir=rtl],.fd-calendar .is-active.fd-calendar__item--current:after[dir=rtl],.fd-calendar [dir=rtl] .fd-calendar__item--current:active:after,.fd-calendar [dir=rtl] .is-active.fd-calendar__item--current:after,.fd-calendar__content--dates .fd-calendar__item--range.fd-calendar__item--current:active:after[dir=rtl],.fd-calendar__content--dates .is-active.fd-calendar__item--range.fd-calendar__item--current:after[dir=rtl],.fd-calendar__content--dates [dir=rtl] .fd-calendar__item--range.fd-calendar__item--current:active:after,.fd-calendar__content--dates [dir=rtl] .is-active.fd-calendar__item--range.fd-calendar__item--current:after,[dir=rtl] .fd-calendar .fd-calendar__item--current:active:after,[dir=rtl] .fd-calendar .is-active.fd-calendar__item--current:after,[dir=rtl] .fd-calendar__content--dates .fd-calendar__item--range.fd-calendar__item--current:active:after,[dir=rtl] .fd-calendar__content--dates .is-active.fd-calendar__item--range.fd-calendar__item--current:after{left:auto;right:.0625rem}.fd-calendar__content--dates .fd-calendar__item.is-active,.fd-calendar__content--dates .fd-calendar__item:active{background-color:var(--sapContent_Selected_Background);border:var(--fdCalendar_Active_Item_Border);font-weight:var(--fdCalendar_Active_Item_Font_Weight)}.fd-calendar__content--dates .fd-calendar__item.is-active:hover,.fd-calendar__content--dates .fd-calendar__item:hover:active,.fd-calendar__content--dates .is-hover.fd-calendar__item.is-active,.fd-calendar__content--dates .is-hover.fd-calendar__item:active{background-color:var(--fdCalendar_Item_Active_Background_Hover)}.fd-calendar__content--dates .fd-calendar__item.is-active:focus,.fd-calendar__content--dates .fd-calendar__item:focus:active,.fd-calendar__content--dates .is-focus.fd-calendar__item.is-active,.fd-calendar__content--dates .is-focus.fd-calendar__item:active{box-shadow:none;outline-color:var(--fdCalendar_Active_Focus_Item_Outline_Color);z-index:5}.fd-calendar__content--dates .fd-calendar__item--range{background-color:var(--sapList_SelectionBackgroundColor);border:.0625rem solid var(--sapList_SelectionBorderColor)}.fd-calendar__content--dates .fd-calendar__item--range:hover,.fd-calendar__content--dates .is-hover.fd-calendar__item--range{background-color:var(--sapList_Hover_SelectionBackground)}.fd-calendar__content--dates .fd-calendar__item.is-disabled,.fd-calendar__content--dates .fd-calendar__item:disabled,.fd-calendar__content--dates .fd-calendar__item[aria-disabled=true]{opacity:.4;pointer-events:none}.fd-calendar__content--dates .fd-calendar__item.is-disabled:hover,.fd-calendar__content--dates .fd-calendar__item:hover:disabled,.fd-calendar__content--dates .fd-calendar__item[aria-disabled=true]:hover{cursor:not-allowed}.fd-calendar__content--dates .fd-calendar__item.is-focus,.fd-calendar__content--dates .fd-calendar__item:focus{box-shadow:none;outline:var(--sapContent_FocusColor) var(--sapContent_FocusStyle) var(--sapContent_FocusWidth);outline-offset:-.1875rem}.fd-calendar__text{-webkit-box-sizing:border-box;-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:100%;justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;padding:0;text-shadow:var(--fdCalendar_Text_Shadow)}.fd-calendar__text:after,.fd-calendar__text:before{box-sizing:inherit;font-size:inherit}.fd-calendar{-webkit-box-sizing:border-box;background-color:var(--sapList_Background);border:0;border-radius:var(--fdCalendar_Border_Radius);box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0;padding:var(--fdCalendar_Padding);width:var(--fdCalendar_Width)}.fd-calendar:after,.fd-calendar:before{box-sizing:inherit;font-size:inherit}.fd-calendar__header{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:column;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0;position:relative}.fd-calendar__header:after,.fd-calendar__header:before{box-sizing:inherit;font-size:inherit}.fd-calendar__navigation{-webkit-box-sizing:border-box;-webkit-box-pack:center;-ms-flex-pack:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;padding:0;padding-bottom:var(--fdCalendar_Button_Horizontal_Space);padding-top:var(--fdCalendar_Button_Horizontal_Space);width:100%}.fd-calendar__navigation:after,.fd-calendar__navigation:before{box-sizing:inherit;font-size:inherit}.fd-calendar__action{-webkit-box-sizing:border-box;-webkit-box-flex:1;-ms-flex-positive:1;border:0;box-sizing:border-box;color:var(--sapTextColor);flex-grow:1;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-calendar__action:after,.fd-calendar__action:before{box-sizing:inherit;font-size:inherit}.fd-calendar__action:not(:last-child):not(:first-child){margin-left:.25rem;margin-right:.25rem}.fd-calendar__action:first-child{margin-right:.25rem}.fd-calendar__action:last-child{margin-left:.25rem}.fd-calendar__action>[type=button]{width:100%}.fd-calendar__action--arrow-left,.fd-calendar__action--arrow-right{flex-grow:0;width:var(--fdCalendar_Action_Width)}.fd-calendar__action--arrow-left+.fd-calendar__action--arrow-right{margin-left:auto}.fd-calendar__action--arrow-left+.fd-calendar__action--arrow-right[dir=rtl],[dir=rtl] .fd-calendar__action--arrow-left+.fd-calendar__action--arrow-right{margin-left:0;margin-right:auto}.fd-calendar__action [class*=sap-icon][dir=rtl],[dir=rtl] .fd-calendar__action [class*=sap-icon]{transform:scaleX(-1)}.fd-calendar__content{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-calendar__content:after,.fd-calendar__content:before{box-sizing:inherit;font-size:inherit}.fd-calendar__content--months,.fd-calendar__content--years{padding-top:1.875rem}.fd-calendar__content--months .fd-calendar__item,.fd-calendar__content--years .fd-calendar__item{background-color:transparent;max-height:var(--fdCalendar_Item_Height)}.fd-calendar__content--months .fd-calendar__item-button,.fd-calendar__content--years .fd-calendar__item-button{min-height:100%;min-width:100%;padding:0}.fd-calendar__content--months .fd-calendar__item--current .fd-calendar__item-button,.fd-calendar__content--years .fd-calendar__item--current .fd-calendar__item-button{-webkit-box-shadow:none;border:none;border-radius:var(--fdCalendar_Month_Year_Item_Border_Radius);box-shadow:none}.fd-calendar__content--months .fd-calendar__item .fd-calendar__text,.fd-calendar__content--years .fd-calendar__item .fd-calendar__text{color:inherit}.fd-calendar__content--dates .fd-calendar__item.is-focus,.fd-calendar__content--dates .fd-calendar__item:focus{z-index:5}.fd-calendar__content--dates .fd-calendar__item.is-active .fd-calendar__text,.fd-calendar__content--dates .fd-calendar__item:active .fd-calendar__text{color:var(--sapContent_Selected_TextColor)}.fd-calendar__content--dates .fd-calendar__item--side-helper .fd-calendar__text{color:var(--sapContent_LabelColor);font-size:var(--sapFontSmallSize)}.fd-calendar__content--dates .fd-calendar__item--other-month .fd-calendar__text{color:var(--sapContent_LabelColor)}.fd-calendar__content--screen-reader-only{clip:rect(0 0 0 0);border:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.fd-calendar__table{-webkit-box-sizing:border-box;border:0;border-spacing:0;box-sizing:border-box;color:var(--sapTextColor);display:table;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0;width:100%}.fd-calendar__table:after,.fd-calendar__table:before{box-sizing:inherit;font-size:inherit}.fd-calendar__group{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);display:table-row-group;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-calendar__group:after,.fd-calendar__group:before{box-sizing:inherit;font-size:inherit}.fd-calendar__row{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-calendar__row:after,.fd-calendar__row:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__item{display:inline-block}.fd-calendar .fd-calendar__item--current .fd-calendar__text:before{border:var(--fdCalendar_Item_Current_Border);border-radius:calc(var(--sapElement_BorderCornerRadius) / 2);content:\\\"\\\";inset:0;position:absolute;z-index:1}.fd-calendar__special-day--1 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor1);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor1);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--1.is-active .fd-calendar__text:after,.fd-calendar__special-day--1:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor1),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--1.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--1.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--2 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor2);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor2);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--2.is-active .fd-calendar__text:after,.fd-calendar__special-day--2:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor2),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--2.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--2.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--3 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor3);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor3);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--3.is-active .fd-calendar__text:after,.fd-calendar__special-day--3:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor3),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--3.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--3.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--4 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor4);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor4);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--4.is-active .fd-calendar__text:after,.fd-calendar__special-day--4:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor4),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--4.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--4.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--5 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor5);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor5);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--5.is-active .fd-calendar__text:after,.fd-calendar__special-day--5:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor5),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--5.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--5.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--6 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor6);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor6);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--6.is-active .fd-calendar__text:after,.fd-calendar__special-day--6:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor6),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--6.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--6.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--7 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor7);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor7);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--7.is-active .fd-calendar__text:after,.fd-calendar__special-day--7:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor7),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--7.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--7.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--8 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor8);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor8);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--8.is-active .fd-calendar__text:after,.fd-calendar__special-day--8:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor8),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--8.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--8.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--9 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor9);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor9);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--9.is-active .fd-calendar__text:after,.fd-calendar__special-day--9:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor9),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--9.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--9.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--10 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor10);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor10);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--10.is-active .fd-calendar__text:after,.fd-calendar__special-day--10:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor10),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--10.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--10.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--11 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor11);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor11);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--11.is-active .fd-calendar__text:after,.fd-calendar__special-day--11:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor11),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--11.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--11.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--12 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor12);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor12);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--12.is-active .fd-calendar__text:after,.fd-calendar__special-day--12:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor12),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--12.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--12.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--13 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor13);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor13);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--13.is-active .fd-calendar__text:after,.fd-calendar__special-day--13:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor13),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--13.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--13.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--14 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor14);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor14);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--14.is-active .fd-calendar__text:after,.fd-calendar__special-day--14:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor14),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--14.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--14.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--15 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor15);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor15);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--15.is-active .fd-calendar__text:after,.fd-calendar__special-day--15:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor15),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--15.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--15.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--16 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor16);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor16);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--16.is-active .fd-calendar__text:after,.fd-calendar__special-day--16:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor16),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--16.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--16.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--17 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor17);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor17);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--17.is-active .fd-calendar__text:after,.fd-calendar__special-day--17:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor17),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--17.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--17.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--18 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor18);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor18);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--18.is-active .fd-calendar__text:after,.fd-calendar__special-day--18:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor18),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--18.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--18.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--19 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor19);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor19);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--19.is-active .fd-calendar__text:after,.fd-calendar__special-day--19:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor19),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--19.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--19.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar__special-day--20 .fd-calendar__text:after{-webkit-box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor20);bottom:0;box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor20);content:\\\"\\\";height:var(--fdCalendar_Special_Day_Marker_Height);left:0;position:absolute;right:0}.fd-calendar__special-day--20.is-active .fd-calendar__text:after,.fd-calendar__special-day--20:active .fd-calendar__text:after{box-shadow:inset 0 calc(var(--fdCalendar_Special_Day_Marker_Height) * -1) 0 var(--sapLegendColor20),inset 0 -.33rem 0 var(--fdCalendar_Item_Current_Inner_Border_Color);height:calc(var(--fdCalendar_Special_Day_Marker_Height) + .0625rem)}.fd-calendar__special-day--20.fd-calendar__item--current.is-active .fd-calendar__text:after,.fd-calendar__special-day--20.fd-calendar__item--current:active .fd-calendar__text:after{bottom:var(--fdCalendar_Item_Current_Active_Special_Day_Bottom);height:var(--fdCalendar_Item_Current_Active_Special_Day_Height);left:var(--fdCalendar_Item_Current_Active_Special_Day_Left);right:var(--fdCalendar_Item_Current_Active_Special_Day_Right);width:var(--fdCalendar_Item_Current_Active_Special_Day_Width)}.fd-calendar .fd-calendar__close-button--navigation{-webkit-transform:translateY(-50%);position:absolute;right:0;top:50%;transform:translateY(-50%)}.fd-calendar .fd-calendar__close-button--navigation[dir=rtl],[dir=rtl] .fd-calendar .fd-calendar__close-button--navigation{left:0;right:auto}.fd-calendar[class*=-compact],.fd-calendar[class*=-condensed],[class*=-compact] .fd-calendar:not([class*=-cozy]),[class*=-condensed] .fd-calendar:not([class*=-cozy]){--fdCalendar_Width:17rem;--fdCalendar_Padding:.5rem;--fdCalendar_Item_Height:1.875rem;--fdCalendar_Button_Horizontal_Space:.1875rem;--fdCalendar_Action_Width:1.875rem;--fdCalendar_Item_Width:1.875rem;--fdCalendar_Item_Inner_Border_Size:calc(100% - .125rem)}.fd-calendar--mobile-landscape,.fd-calendar--mobile-portrait{height:100%;width:100%}.fd-calendar--mobile-landscape{--fdCalendar_Padding:0;--fdCalendar_Item_Side_Helper:1.625rem}.fd-calendar--mobile-landscape .fd-calendar__navigation--main{max-width:20rem}.fd-calendar--mobile-portrait{--fdCalendar_Padding:1rem 0 0 0}.fd-has-display-block{display:block}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedCalendarContentDensityDirective = /*#__PURE__*/(() => {\n  class DeprecatedCalendarContentDensityDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-calendar');\n    }\n  }\n  DeprecatedCalendarContentDensityDirective.ɵfac = function DeprecatedCalendarContentDensityDirective_Factory(t) {\n    return new (t || DeprecatedCalendarContentDensityDirective)();\n  };\n  DeprecatedCalendarContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedCalendarContentDensityDirective,\n    selectors: [[\"fd-calendar\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedCalendarContentDensityDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedCalendarContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CalendarModule = /*#__PURE__*/(() => {\n  class CalendarModule {}\n  CalendarModule.ɵfac = function CalendarModule_Factory(t) {\n    return new (t || CalendarModule)();\n  };\n  CalendarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CalendarModule\n  });\n  CalendarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule, ButtonModule, ContentDensityModule, ContentDensityModule]\n  });\n  return CalendarModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CalendarAggregatedYearViewComponent, CalendarCloseButtonDirective, CalendarComponent, CalendarDayViewComponent, CalendarHeaderComponent, CalendarI18nLabels, CalendarModule, CalendarMonthViewComponent, CalendarService, CalendarYearViewComponent, DateRange, DeprecatedCalendarContentDensityDirective };\n//# sourceMappingURL=fundamental-ngx-core-calendar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}