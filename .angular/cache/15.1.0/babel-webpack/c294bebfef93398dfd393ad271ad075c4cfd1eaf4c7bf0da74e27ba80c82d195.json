{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { TemplateRef, isDevMode, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@fundamental-ngx/core/popover';\nimport { BasePopoverClass, PopoverService, PopoverModule } from '@fundamental-ngx/core/popover';\nimport { FD_ICON_COMPONENT } from '@fundamental-ngx/core/icon';\n\n/* eslint-disable @angular-eslint/no-input-rename */\nconst INLINE_HELP_CLASS = 'fd-popover__body--inline-help fd-inline-help__content';\nconst INLINE_HELP_ICON_CLASS = 'fd-popover__body--inline-help-icon';\n/**\n * The component that represents an inline-help.\n * Inline help is used to display help text in a popover, often inline with headers, body text and form labels.\n */\nlet InlineHelpDirective = /*#__PURE__*/(() => {\n  class InlineHelpDirective extends BasePopoverClass {\n    /** Inline help text to display inside generated popover */\n    set inlineHelpContent(content) {\n      const {\n        text,\n        template\n      } = {\n        text: typeof content === 'string' ? content : null,\n        template: content instanceof TemplateRef ? content : null\n      };\n      this._popoverService.updateContent(text, template);\n    }\n    /**\n     * Inline help template to display inside generated popover\n     * @deprecated Use `fd-inline-help` instead\n     * */\n    set inlineHelpTemplate(template) {\n      if (isDevMode()) {\n        console.warn('[fd-inline-help-template] is deprecated and will be removed in the future, use [fd-inline-help] instead.');\n      }\n      this._popoverService.updateContent(null, template);\n    }\n    /** @hidden */\n    constructor(_popoverService, _elementRef, _icon) {\n      super();\n      this._popoverService = _popoverService;\n      this._elementRef = _elementRef;\n      this._icon = _icon;\n      /** The trigger events that will open/close the inline help component.\n       *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n      this.triggers = [{\n        trigger: 'mouseenter',\n        openAction: true,\n        closeAction: false\n      }, {\n        trigger: 'mouseleave',\n        openAction: false,\n        closeAction: true\n      }, {\n        trigger: 'focusin',\n        openAction: true,\n        closeAction: false\n      }, {\n        trigger: 'focusout',\n        openAction: false,\n        closeAction: true\n      }];\n      /** Whether the popover should have an arrow. */\n      this.noArrow = false;\n      /** Whether the popover should close when the escape key is pressed. */\n      this.closeOnEscapeKey = false;\n      /** Whether the popover should close when a click is made outside its boundaries. */\n      this.closeOnOutsideClick = false;\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if ('additionalBodyClass' in changes) {\n        this._applyAdditionalInlineHelpClass();\n      }\n      this._popoverService.refreshConfiguration(this);\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._applyAdditionalInlineHelpClass();\n      this._popoverService.initialise(this._elementRef, this);\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._popoverService.onDestroy();\n    }\n    /** @hidden */\n    _applyAdditionalInlineHelpClass() {\n      this.additionalBodyClass = INLINE_HELP_CLASS + ' ' + this.additionalBodyClass;\n      // If connected to the icon, but not button, then apply additional class\n      // That will change the arrow's position a bit\n      if (this._icon) {\n        this.additionalBodyClass += ' ' + INLINE_HELP_ICON_CLASS;\n      }\n    }\n  }\n  InlineHelpDirective.ɵfac = function InlineHelpDirective_Factory(t) {\n    return new (t || InlineHelpDirective)(i0.ɵɵdirectiveInject(i1.PopoverService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FD_ICON_COMPONENT, 10));\n  };\n  InlineHelpDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: InlineHelpDirective,\n    selectors: [[\"\", \"fd-inline-help\", \"\", 3, \"fd-inline-help-template\", \"\"], [\"\", \"fd-inline-help-template\", \"\", 3, \"fd-inline-help\", \"\"]],\n    hostVars: 2,\n    hostBindings: function InlineHelpDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-inline-help__trigger\", true);\n      }\n    },\n    inputs: {\n      triggers: \"triggers\",\n      noArrow: \"noArrow\",\n      closeOnEscapeKey: \"closeOnEscapeKey\",\n      closeOnOutsideClick: \"closeOnOutsideClick\",\n      inlineHelpContent: [\"fd-inline-help\", \"inlineHelpContent\"],\n      inlineHelpTemplate: [\"fd-inline-help-template\", \"inlineHelpTemplate\"]\n    },\n    features: [i0.ɵɵProvidersFeature([PopoverService]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  return InlineHelpDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InlineHelpModule = /*#__PURE__*/(() => {\n  class InlineHelpModule {}\n  InlineHelpModule.ɵfac = function InlineHelpModule_Factory(t) {\n    return new (t || InlineHelpModule)();\n  };\n  InlineHelpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: InlineHelpModule\n  });\n  InlineHelpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, PopoverModule]\n  });\n  return InlineHelpModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InlineHelpDirective, InlineHelpModule };\n//# sourceMappingURL=fundamental-ngx-core-inline-help.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}