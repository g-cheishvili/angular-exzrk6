{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, HostBinding, Output, ViewChild, HostListener, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { __decorate, __metadata } from 'tslib';\nimport { getRandomColorAccent, ANY_LANGUAGE_LETTERS_REGEX, applyCssClass } from '@fundamental-ngx/cdk/utils';\nconst _c0 = [\"content\"];\nfunction AvatarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.abbreviate);\n  }\n}\nfunction AvatarComponent_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 5);\n    i0.ɵɵlistener(\"mousedown\", function AvatarComponent_i_1_Template_i_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.zoomClicked($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.zoomGlyph ? \"sap-icon--\" + ctx_r1.zoomGlyph : \"\");\n  }\n}\nfunction AvatarComponent_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.glyph ? \"sap-icon--\" + ctx_r2.glyph : \"sap-icon--person-placeholder\");\n  }\n}\nconst _c1 = [\"*\"];\nconst FD_AVATAR_COMPONENT = new InjectionToken('FdAvatarComponent');\nlet avatarUniqueId = 0;\nconst ALTER_ICON_OPTIONS = {\n  CONTENT: 'content',\n  ALT: 'alt',\n  BACKUP: 'backup',\n  DEFAULT_ICON: 'default-icon'\n};\nlet AvatarComponent = /*#__PURE__*/(() => {\n  class AvatarComponent {\n    /** Localized text for label */\n    set label(value) {\n      this.ariaLabel = value || null;\n      this.abbreviate = this._getAbbreviate(value);\n    }\n    /**\n     * @deprecated\n     * Deprecated according to Rename `backgroundImage` to `image`\n     * */\n    /** Background image url. */\n    set backgroundImage(value) {\n      this._setImage(value);\n    }\n    /** Background image resource: url or base64. */\n    set image(value) {\n      this._setImage(value);\n    }\n    get image() {\n      return this._image;\n    }\n    /** Backup options to use when image hasn't been loaded successfully.\n     * Options separated with \"|\" symbol.\n     * Possible options: content, alt, backup, default-icon\n     */\n    set alterIcon(value) {\n      this._alterIcon = value;\n    }\n    get alterIcon() {\n      return this._alterIcon;\n    }\n    /** Backup image to load when image hasn't been loaded successfully.\n     * Only applicable when using alterIcon input property.\n     */\n    set backupImage(value) {\n      this._backupImage = value;\n    }\n    get backupImage() {\n      return this._backupImage;\n    }\n    /**\n     * @hidden\n     */\n    set bgImage(image) {\n      this._bgImage = image;\n      this._renderer.setStyle(this._elementRef.nativeElement, 'background-image', image);\n    }\n    get bgImage() {\n      return this._bgImage;\n    }\n    /** @hidden */\n    get role() {\n      return this.zoomGlyph ? 'button' : 'img';\n    }\n    /** @hidden */\n    set content(value) {\n      this._content = value;\n    }\n    /** @hidden */\n    get _tabindex() {\n      if (this.hostTabindex != null) {\n        return this.hostTabindex;\n      }\n      return this.clickable ? 0 : null;\n    }\n    /** If a default placeholder should be displayed */\n    get showDefault() {\n      return !this.abbreviate && !this._image && !this.glyph;\n    }\n    /** @hidden */\n    constructor(_elementRef, _cdr, _renderer, hostTabindex) {\n      this._elementRef = _elementRef;\n      this._cdr = _cdr;\n      this._renderer = _renderer;\n      this.hostTabindex = hostTabindex;\n      /** Id of the Avatar. */\n      this.id = `fd-avatar-${avatarUniqueId++}`;\n      /** Aria-label for Avatar. */\n      this.ariaLabel = null;\n      /** Aria-Labelledby for element describing Avatar. */\n      this.ariaLabelledby = null;\n      /** The size of the Avatar. Options include: *xs*, *s*, *m*, *l* and *xl*. */\n      this.size = 'l';\n      /** The glyph name. */\n      this.glyph = null;\n      /** The glyph name for zoom icon. */\n      this.zoomGlyph = null;\n      /** Whether to apply a circle style to the Avatar. */\n      this.circle = false;\n      /** Whether to apply a transparent style to the Avatar. */\n      this.transparent = false;\n      /** Whether to apply background size contain style to the Avatar */\n      this.contain = false;\n      /** Whether to apply a placeholder background style to the Avatar. */\n      this.placeholder = false;\n      /** Whether to apply a tile background style to the Avatar. */\n      this.tile = false;\n      /** Whether to apply a border to the Avatar. */\n      this.border = false;\n      /** A number from 1 to 10 representing the background color of the Avatar. */\n      this.colorAccent = null;\n      /** Whether to apply random background color to the Avatar. */\n      this.random = false;\n      /** Whether component should be focusable & clicable */\n      this.clickable = false;\n      /** Event emitted when avatar clicked. Only fires if clickable input property set to true. */\n      this.avatarClicked = new EventEmitter();\n      /** Event emitted when zoom icon clicked. Only fires if zoomGlyph input property is set. */\n      this.zoomGlyphClicked = new EventEmitter();\n      /** @hidden */\n      this.abbreviate = null;\n      /** @hidden */\n      this._image = null;\n      /** @hidden */\n      this._alterIcon = null;\n      /** @hidden */\n      this._content = null;\n      /** @hidden */\n      this._backupImage = null;\n      /** @hidden */\n      this._bgImage = null;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this.buildComponentCssClass();\n    }\n    /** @hidden */\n    ngOnChanges() {\n      if (this.zoomGlyph) {\n        this.clickable = true;\n      }\n      this.buildComponentCssClass();\n    }\n    /** @hidden\n     * CssClassBuilder interface implementation\n     * function must return single string\n     * function is responsible for order which css classes are applied\n     */\n    buildComponentCssClass() {\n      return ['fd-avatar', this.size ? `fd-avatar--${this.size}` : '', this.colorAccent && !this.random ? `fd-avatar--accent-color-${this.colorAccent}` : '', this.random ? `fd-avatar--accent-color-${getRandomColorAccent()}` : '', this.circle ? 'fd-avatar--circle' : '', this.border ? 'fd-avatar--border' : '', this.transparent ? 'fd-avatar--transparent' : '', this.contain ? 'fd-avatar--background-contain' : '', this.placeholder ? 'fd-avatar--placeholder' : '', this.tile ? 'fd-avatar--tile' : '', this.class];\n    }\n    /** @hidden */\n    elementRef() {\n      return this._elementRef;\n    }\n    /** @hidden */\n    _onClick(event) {\n      if (this.clickable) {\n        event.preventDefault();\n        this.avatarClicked.emit(event);\n        if (this.zoomGlyph) {\n          this.zoomGlyphClicked.next();\n        }\n      }\n    }\n    /** @hidden */\n    zoomClicked(event) {\n      event.preventDefault();\n      this._elementRef.nativeElement.focus();\n      this.zoomGlyphClicked.next();\n    }\n    /** @hidden Get an abbreviate from the label or return null if not fit requirements */\n    _getAbbreviate(label) {\n      if (!label || this._image) {\n        return null;\n      }\n      return this._generateAbbreviation(label);\n    }\n    /** @hidden Get the abbreviation string */\n    _generateAbbreviation(label) {\n      if (!label) {\n        return null;\n      }\n      const maxLettersCount = 3;\n      const firstLetters = label.split(' ').map(word => word.charAt(0));\n      const abbreviate = firstLetters.join('');\n      if (firstLetters.length > maxLettersCount || !abbreviate.match(ANY_LANGUAGE_LETTERS_REGEX)) {\n        return null;\n      }\n      return abbreviate;\n    }\n    /** @hidden */\n    _setImage(value) {\n      this._image = value;\n      if (value) {\n        this._verifyImageUrl(value, () => {}, this._onErrorCallback);\n      } else {\n        this.bgImage = null;\n      }\n    }\n    /** @hidden */\n    _verifyImageUrl(srcValue, onLoadCallback, onErrorCallback) {\n      // Don't load the same image all the time check happens\n      if (srcValue === this.bgImage) {\n        return;\n      }\n      const img = new Image();\n      img.onload = onLoadCallback.bind(this);\n      img.onerror = onErrorCallback.bind(this);\n      img.src = srcValue;\n      this._assignBgImage(srcValue);\n    }\n    /** @hidden */\n    _assignBgImage(srcValue) {\n      this.bgImage = srcValue ? `url(${srcValue})` : null;\n    }\n    /** @hidden */\n    _onErrorCallback() {\n      if (!this._alterIcon) {\n        this._showDefaultIcon();\n        return;\n      }\n      const options = this._alterIcon.split('|');\n      for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        if (option === ALTER_ICON_OPTIONS.CONTENT) {\n          const contentValue = this._content?.nativeElement.textContent;\n          if (contentValue) {\n            this.abbreviate = this._generateAbbreviation(contentValue);\n            break;\n          }\n          continue;\n        }\n        if (option === ALTER_ICON_OPTIONS.ALT) {\n          const altValue = this._elementRef.nativeElement.getAttribute('alt');\n          if (altValue) {\n            this.abbreviate = this._generateAbbreviation(altValue);\n            break;\n          }\n          continue;\n        }\n        if (option === ALTER_ICON_OPTIONS.BACKUP) {\n          if (this._backupImage && this._backupImage !== '') {\n            // Check if backupImage can be loaded successfully\n            // If not, set default user icon\n            this._verifyImageUrl(this._backupImage, () => {\n              this._assignBgImage(this._backupImage);\n            }, () => {\n              this._showDefaultIcon();\n            });\n            break;\n          }\n          continue;\n        }\n        if (option === ALTER_ICON_OPTIONS.DEFAULT_ICON) {\n          this._showDefaultIcon();\n          break;\n        }\n        this._showDefaultIcon();\n      }\n    }\n    /** @hidden */\n    _showDefaultIcon() {\n      this.abbreviate = null;\n      this._image = null;\n      this.glyph = null;\n      this._cdr.markForCheck();\n    }\n  }\n  AvatarComponent.ɵfac = function AvatarComponent_Factory(t) {\n    return new (t || AvatarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵinjectAttribute('tabindex'));\n  };\n  AvatarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: AvatarComponent,\n    selectors: [[\"fd-avatar\"]],\n    viewQuery: function AvatarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function AvatarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function AvatarComponent_click_HostBindingHandler($event) {\n          return ctx._onClick($event);\n        })(\"keydown.enter\", function AvatarComponent_keydown_enter_HostBindingHandler($event) {\n          return ctx._onClick($event);\n        })(\"keydown.space\", function AvatarComponent_keydown_space_HostBindingHandler($event) {\n          return ctx._onClick($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx._tabindex)(\"id\", ctx.id)(\"aria-label\", ctx.ariaLabel)(\"alt\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"role\", ctx.role);\n      }\n    },\n    inputs: {\n      class: \"class\",\n      id: \"id\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledby: \"ariaLabelledby\",\n      label: \"label\",\n      size: \"size\",\n      glyph: \"glyph\",\n      zoomGlyph: \"zoomGlyph\",\n      circle: \"circle\",\n      transparent: \"transparent\",\n      contain: \"contain\",\n      placeholder: \"placeholder\",\n      tile: \"tile\",\n      border: \"border\",\n      colorAccent: \"colorAccent\",\n      random: \"random\",\n      clickable: \"clickable\",\n      backgroundImage: \"backgroundImage\",\n      image: \"image\",\n      alterIcon: \"alterIcon\",\n      backupImage: \"backupImage\"\n    },\n    outputs: {\n      avatarClicked: \"avatarClicked\",\n      zoomGlyphClicked: \"zoomGlyphClicked\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: FD_AVATAR_COMPONENT,\n      useExisting: AvatarComponent\n    }]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"role\", \"presentation\", \"class\", \"fd-avatar__zoom-icon\", 3, \"class\", \"mousedown\", 4, \"ngIf\"], [\"class\", \"fd-avatar__icon\", \"role\", \"presentation\", 3, \"class\", 4, \"ngIf\"], [2, \"display\", \"none\"], [\"content\", \"\"], [\"role\", \"presentation\", 1, \"fd-avatar__zoom-icon\", 3, \"mousedown\"], [\"role\", \"presentation\", 1, \"fd-avatar__icon\"]],\n    template: function AvatarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, AvatarComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, AvatarComponent_i_1_Template, 1, 2, \"i\", 1);\n        i0.ɵɵtemplate(2, AvatarComponent_i_2_Template, 1, 2, \"i\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3, 4);\n        i0.ɵɵprojection(5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.abbreviate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.zoomGlyph);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.glyph || ctx.showDefault);\n      }\n    },\n    dependencies: [i1.NgIf],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-avatar{--fdAvatarZoomIconPosition:0;-webkit-box-sizing:border-box;background-color:var(--fdAvatar_BackgroundColor);background-position:50%;background-repeat:no-repeat;background-size:cover;border:0;border:var(--fdAvatar_Border);border-radius:var(--sapElement_BorderCornerRadius);box-sizing:border-box;color:var(--sapTextColor);color:var(--sapContent_ContrastTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0;position:relative;text-shadow:var(--fdAvatar_Text_Shadow);vertical-align:middle}.fd-avatar:after,.fd-avatar:before{box-sizing:inherit;font-size:inherit}.fd-avatar.is-focus,.fd-avatar:focus{outline:none}.fd-avatar.is-focus:after,.fd-avatar:focus:after{border-color:var(--sapContent_FocusColor);border-radius:var(--fdAvatar_Focus_Outline_Radius);border-style:var(--sapContent_FocusStyle);border-width:var(--sapContent_FocusWidth);bottom:var(--fdAvatar_Focus_Outline_Offset);content:\\\"\\\";left:var(--fdAvatar_Focus_Outline_Offset);pointer-events:none;position:absolute;right:var(--fdAvatar_Focus_Outline_Offset);top:var(--fdAvatar_Focus_Outline_Offset)}.fd-avatar[tabindex=\\\"0\\\"]{cursor:pointer}.fd-avatar__zoom-icon [class*=sap-icon],.fd-avatar__zoom-icon[class*=sap-icon]{-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;background:inherit;background-color:var(--sapButton_Emphasized_Background);border:.0625rem solid var(--sapButton_Emphasized_BorderColor);border-radius:inherit;border-radius:50%;color:inherit;color:var(--sapButton_Emphasized_TextColor);display:flex;font-size:inherit;justify-content:center;line-height:1;position:absolute}.fd-avatar__zoom-icon [class*=sap-icon] [class*=sap-icon],.fd-avatar__zoom-icon [class*=sap-icon][class*=sap-icon],.fd-avatar__zoom-icon[class*=sap-icon] [class*=sap-icon],.fd-avatar__zoom-icon[class*=sap-icon][class*=sap-icon]{bottom:var(--fdAvatarZoomIconPosition);right:var(--fdAvatarZoomIconPosition)}.fd-avatar__zoom-icon [class*=sap-icon] [class*=sap-icon][dir=rtl],.fd-avatar__zoom-icon [class*=sap-icon][class*=sap-icon][dir=rtl],.fd-avatar__zoom-icon[class*=sap-icon] [class*=sap-icon][dir=rtl],.fd-avatar__zoom-icon[class*=sap-icon][class*=sap-icon][dir=rtl],[dir=rtl] .fd-avatar__zoom-icon [class*=sap-icon] [class*=sap-icon],[dir=rtl] .fd-avatar__zoom-icon [class*=sap-icon][class*=sap-icon],[dir=rtl] .fd-avatar__zoom-icon[class*=sap-icon] [class*=sap-icon],[dir=rtl] .fd-avatar__zoom-icon[class*=sap-icon][class*=sap-icon]{left:var(--fdAvatarZoomIconPosition);right:auto}.fd-avatar__icon [class*=sap-icon],.fd-avatar__icon[class*=sap-icon]{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-box-align:center;-ms-flex-align:center;align-content:center;align-items:center;background:inherit;border-radius:inherit;color:inherit;display:flex;font-size:inherit;justify-content:center;line-height:1}.fd-avatar--circle{border-radius:50%}.fd-avatar--circle.is-focus,.fd-avatar--circle:focus{outline:none}.fd-avatar--circle.is-focus:after,.fd-avatar--circle:focus:after{border-color:var(--sapContent_FocusColor);border-radius:var(--fdAvatar_Focus_Outline_Radius_Circle);border-style:var(--sapContent_FocusStyle);border-width:var(--sapContent_FocusWidth);bottom:var(--fdAvatar_Focus_Outline_Offset);content:\\\"\\\";left:var(--fdAvatar_Focus_Outline_Offset);pointer-events:none;position:absolute;right:var(--fdAvatar_Focus_Outline_Offset);top:var(--fdAvatar_Focus_Outline_Offset)}.fd-avatar--transparent{background-color:var(--fdAvatar_Transparent_BackgroundColor);color:var(--sapContent_IconColor)}.fd-avatar--background-contain{background-size:contain}.fd-avatar--placeholder{background-color:var(--sapContent_ImagePlaceholderBackground)}.fd-avatar--tile{background-color:var(--fdAvatar_Tile_BackgroundColor)}.fd-avatar--border{border:.0625rem solid var(--sapGroup_ContentBorderColor)}.fd-avatar--accent-color-1{background-color:var(--fdAvatar_Accent_Color_1);border:var(--fdAvatar_Accent_Color_1_Border);color:var(--fdAvatar_Accent_Color_1_Text)}.fd-avatar--accent-color-2{background-color:var(--fdAvatar_Accent_Color_2);border:var(--fdAvatar_Accent_Color_2_Border);color:var(--fdAvatar_Accent_Color_2_Text)}.fd-avatar--accent-color-3{background-color:var(--fdAvatar_Accent_Color_3);border:var(--fdAvatar_Accent_Color_3_Border);color:var(--fdAvatar_Accent_Color_3_Text)}.fd-avatar--accent-color-4{background-color:var(--fdAvatar_Accent_Color_4);border:var(--fdAvatar_Accent_Color_4_Border);color:var(--fdAvatar_Accent_Color_4_Text)}.fd-avatar--accent-color-5{background-color:var(--fdAvatar_Accent_Color_5);border:var(--fdAvatar_Accent_Color_5_Border);color:var(--fdAvatar_Accent_Color_5_Text)}.fd-avatar--accent-color-6{background-color:var(--fdAvatar_Accent_Color_6);border:var(--fdAvatar_Accent_Color_6_Border);color:var(--fdAvatar_Accent_Color_6_Text)}.fd-avatar--accent-color-7{background-color:var(--fdAvatar_Accent_Color_7);border:var(--fdAvatar_Accent_Color_7_Border);color:var(--fdAvatar_Accent_Color_7_Text)}.fd-avatar--accent-color-8{background-color:var(--fdAvatar_Accent_Color_8);border:var(--fdAvatar_Accent_Color_8_Border);color:var(--fdAvatar_Accent_Color_8_Text)}.fd-avatar--accent-color-9{background-color:var(--fdAvatar_Accent_Color_9);border:var(--fdAvatar_Accent_Color_9_Border);color:var(--fdAvatar_Accent_Color_9_Text)}.fd-avatar--accent-color-10{background-color:var(--fdAvatar_Accent_Color_10);border:var(--fdAvatar_Accent_Color_10_Border);color:var(--fdAvatar_Accent_Color_10_Text)}.fd-avatar--xs{--fdAvatarZoomIconOffset:-.125rem;font-size:1rem;font-stretch:condensed;height:2rem;max-height:2rem;max-width:2rem;min-height:2rem;min-width:2rem;width:2rem}.fd-avatar--xs .fd-avatar__zoom-icon [class*=sap-icon],.fd-avatar--xs .fd-avatar__zoom-icon[class*=sap-icon]{font-size:.75rem;height:1.125rem;min-width:1.125rem;width:1.125rem}.fd-avatar--s{--fdAvatarZoomIconOffset:-.125rem;font-size:1.125rem;font-stretch:condensed;height:3rem;max-height:3rem;max-width:3rem;min-height:3rem;min-width:3rem;width:3rem}.fd-avatar--s .fd-avatar__zoom-icon [class*=sap-icon],.fd-avatar--s .fd-avatar__zoom-icon[class*=sap-icon]{font-size:.75rem;height:1.125rem;min-width:1.125rem;width:1.125rem}.fd-avatar--m{--fdAvatarZoomIconOffset:-.125rem;font-size:1.5rem;font-stretch:normal;height:4rem;max-height:4rem;max-width:4rem;min-height:4rem;min-width:4rem;width:4rem}.fd-avatar--m .fd-avatar__zoom-icon [class*=sap-icon],.fd-avatar--m .fd-avatar__zoom-icon[class*=sap-icon]{font-size:.75rem;height:1.125rem;min-width:1.125rem;width:1.125rem}.fd-avatar--l{--fdAvatarZoomIconOffset:-.1875rem;font-size:2.25rem;font-stretch:normal;height:5rem;max-height:5rem;max-width:5rem;min-height:5rem;min-width:5rem;width:5rem}.fd-avatar--l .fd-avatar__zoom-icon [class*=sap-icon],.fd-avatar--l .fd-avatar__zoom-icon[class*=sap-icon]{font-size:.875rem;height:1.25rem;min-width:1.25rem;width:1.25rem}.fd-avatar--xl{--fdAvatarZoomIconOffset:-.25rem;font-size:3rem;font-stretch:normal;height:7rem;max-height:7rem;max-width:7rem;min-height:7rem;min-width:7rem;width:7rem}.fd-avatar--xl .fd-avatar__zoom-icon [class*=sap-icon],.fd-avatar--xl .fd-avatar__zoom-icon[class*=sap-icon]{font-size:1rem;height:1.75rem;min-width:1.75rem;width:1.75rem}.fd-avatar--accent-color-1.fd-avatar--shell,.fd-avatar--accent-color-10.fd-avatar--shell,.fd-avatar--accent-color-2.fd-avatar--shell,.fd-avatar--accent-color-3.fd-avatar--shell,.fd-avatar--accent-color-4.fd-avatar--shell,.fd-avatar--accent-color-5.fd-avatar--shell,.fd-avatar--accent-color-6.fd-avatar--shell,.fd-avatar--accent-color-7.fd-avatar--shell,.fd-avatar--accent-color-8.fd-avatar--shell,.fd-avatar--accent-color-9.fd-avatar--shell{border:.0625rem solid var(--sapShell_InteractiveBorderColor)}.fd-avatar--l,.fd-avatar--m,.fd-avatar--s,.fd-avatar--xl,.fd-avatar--xs{-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;display:inline-flex;justify-content:center;margin:0;padding:0}.fd-avatar--l:not(.fd-avatar--circle),.fd-avatar--m:not(.fd-avatar--circle),.fd-avatar--s:not(.fd-avatar--circle),.fd-avatar--xl:not(.fd-avatar--circle),.fd-avatar--xs:not(.fd-avatar--circle){--fdAvatarZoomIconPosition:var(--fdAvatarZoomIconOffset)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  __decorate([applyCssClass, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", Array)], AvatarComponent.prototype, \"buildComponentCssClass\", null);\n  return AvatarComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AvatarModule = /*#__PURE__*/(() => {\n  class AvatarModule {}\n  AvatarModule.ɵfac = function AvatarModule_Factory(t) {\n    return new (t || AvatarModule)();\n  };\n  AvatarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AvatarModule\n  });\n  AvatarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return AvatarModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AvatarComponent, AvatarModule, FD_AVATAR_COMPONENT };\n//# sourceMappingURL=fundamental-ngx-core-avatar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}