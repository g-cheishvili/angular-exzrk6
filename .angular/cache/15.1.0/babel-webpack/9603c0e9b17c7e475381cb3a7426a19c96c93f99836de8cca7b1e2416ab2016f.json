{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\n\n/**\n * Tool directive used to achieve the infinite scroll mechanism.\n */\nlet InfiniteScrollDirective = /*#__PURE__*/(() => {\n  class InfiniteScrollDirective {\n    /** @hidden */\n    constructor(_element) {\n      this._element = _element;\n      /** Scroll percentage at which the onScrollAction event is fired. */\n      this.scrollPercent = 75;\n      /** Scroll PX at which the onScrollAction event is fired. */\n      this.scrollOffset = null;\n      /** Event emitted when the scrollPercent threshold is met. */\n      // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n      this.onScrollAction = new EventEmitter();\n      /** @hidden */\n      this._subscription = new Subscription();\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._listenOnScroll();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n    /** @hidden */\n    shouldTriggerAction() {\n      const element = this._element.nativeElement;\n      const offset = element.scrollTop + element.offsetHeight;\n      if (this.scrollOffset) {\n        return offset > element.scrollHeight - this.scrollOffset;\n      } else {\n        return offset / element.scrollHeight > this.scrollPercent / 100;\n      }\n    }\n    /** @hidden */\n    _listenOnScroll() {\n      this._subscription.add(fromEvent(this._element.nativeElement, 'scroll').pipe(debounceTime(50), filter(() => this.shouldTriggerAction())).subscribe(() => this.onScrollAction.emit()));\n    }\n  }\n  InfiniteScrollDirective.ɵfac = function InfiniteScrollDirective_Factory(t) {\n    return new (t || InfiniteScrollDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  InfiniteScrollDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: InfiniteScrollDirective,\n    selectors: [[\"\", \"fdInfiniteScroll\", \"\"]],\n    inputs: {\n      scrollPercent: \"scrollPercent\",\n      scrollOffset: \"scrollOffset\"\n    },\n    outputs: {\n      onScrollAction: \"onScrollAction\"\n    }\n  });\n  return InfiniteScrollDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InfiniteScrollModule = /*#__PURE__*/(() => {\n  class InfiniteScrollModule {}\n  InfiniteScrollModule.ɵfac = function InfiniteScrollModule_Factory(t) {\n    return new (t || InfiniteScrollModule)();\n  };\n  InfiniteScrollModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: InfiniteScrollModule\n  });\n  InfiniteScrollModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return InfiniteScrollModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteScrollDirective, InfiniteScrollModule };\n//# sourceMappingURL=fundamental-ngx-core-infinite-scroll.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}