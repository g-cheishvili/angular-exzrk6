{"ast":null,"code":"import * as i3 from '@angular/cdk/drag-drop';\nimport { CdkDrag, DragDropModule } from '@angular/cdk/drag-drop';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Directive, Input, EventEmitter, ViewEncapsulation, Optional, Output, ContentChildren, ViewChildren, ViewChild, HostListener, NgModule } from '@angular/core';\nimport * as i1 from '@fundamental-ngx/cdk/utils';\nimport { getDocumentFontSize, resizeObservable, DragAndDropModule } from '@fundamental-ngx/cdk/utils';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Subscription, Subject } from 'rxjs';\nimport { takeUntil, debounceTime, filter, skip } from 'rxjs/operators';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"*\"];\nconst _c1 = [\"layout\"];\nfunction FixedCardLayoutComponent_div_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction FixedCardLayoutComponent_div_2_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction FixedCardLayoutComponent_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, FixedCardLayoutComponent_div_2_div_4_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"margin-bottom\", +ctx_r6._placeholderMargin, \"rem\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (card_r3 == null ? null : card_r3.template) || null);\n  }\n}\nfunction FixedCardLayoutComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"cdkDropListEntered\", function FixedCardLayoutComponent_div_2_Template_div_cdkDropListEntered_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9._onDropListEntered($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵlistener(\"cdkDragStarted\", function FixedCardLayoutComponent_div_2_Template_div_cdkDragStarted_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11._onDragStarted($event));\n    })(\"cdkDragDropped\", function FixedCardLayoutComponent_div_2_Template_div_cdkDragDropped_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12._onDragDropped($event));\n    });\n    i0.ɵɵelementStart(2, \"fd-fixed-card-layout-item\");\n    i0.ɵɵtemplate(3, FixedCardLayoutComponent_div_2_ng_container_3_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, FixedCardLayoutComponent_div_2_div_4_Template, 2, 3, \"div\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const card_r3 = ctx.$implicit;\n    const cardIndex_r4 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"min-width\", ctx_r1._columnsWidth.get(card_r3.fdCardDef), \"px\")(\"max-width\", ctx_r1._columnsWidth.get(card_r3.fdCardDef), \"px\")(\"display\", ctx_r1._hiddenCard === card_r3 ? \"none\" : \"block\");\n    i0.ɵɵclassProp(\"fd-fixed-card-layout__card--single\", ctx_r1._singleItemColumns.has(card_r3.fdCardDef));\n    i0.ɵɵproperty(\"cdkDropListData\", cardIndex_r4)(\"cdkDropListSortPredicate\", ctx_r1._sortPredicateFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkDragData\", card_r3)(\"cdkDragStartDelay\", ctx_r1.dragStartDelay)(\"itemIndex\", ctx_r1._itemIndexes.get(card_r3.fdCardDef))(\"groupIndex\", ctx_r1._groupIndexes.get(card_r3.fdCardDef));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (card_r3 == null ? null : card_r3.template) || null);\n  }\n}\nfunction FixedCardLayoutComponent_ng_container_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 10);\n  }\n  if (rf & 2) {\n    const index_r15 = i0.ɵɵnextContext().index;\n    i0.ɵɵstyleProp(\"order\", index_r15 + 1);\n  }\n}\nfunction FixedCardLayoutComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FixedCardLayoutComponent_ng_container_3_div_1_Template, 1, 2, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const last_r14 = ctx.last;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !last_r14);\n  }\n}\nlet FixedCardLayoutItemComponent = /*#__PURE__*/(() => {\n  class FixedCardLayoutItemComponent {\n    /** @hidden */\n    constructor(_elementRef) {\n      this._elementRef = _elementRef;\n    }\n    /** Set focus on the element. */\n    focus() {\n      const header = this._elementRef.nativeElement.querySelector('.fd-card__header');\n      if (header) {\n        header.focus();\n      }\n    }\n  }\n  FixedCardLayoutItemComponent.ɵfac = function FixedCardLayoutItemComponent_Factory(t) {\n    return new (t || FixedCardLayoutItemComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  FixedCardLayoutItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FixedCardLayoutItemComponent,\n    selectors: [[\"fd-fixed-card-layout-item\"]],\n    hostAttrs: [2, \"display\", \"block\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function FixedCardLayoutItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FixedCardLayoutItemComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst REM_IN_PX = getDocumentFontSize();\nconst CARD_MINIMUM_WIDTH = REM_IN_PX * 20; // 20rem\nconst CARD_GAP_WIDTH = REM_IN_PX; // 1rem\nconst DRAG_START_DELAY = 200; // in ms\nconst MAX_COLUMNS = 10;\nlet cardRank = 1;\nlet CardDefinitionDirective = /*#__PURE__*/(() => {\n  class CardDefinitionDirective {\n    /**\n     * Behaves like rank of card.\n     * Useful in creating layout again after drag and drop.\n     */\n    set fdCardDef(value) {\n      if (!value) {\n        return;\n      }\n      this._fdCardDef = coerceNumberProperty(value);\n    }\n    get fdCardDef() {\n      return this._fdCardDef;\n    }\n    /** @hidden */\n    constructor(template) {\n      this.template = template;\n      /** @hidden */\n      this._fdCardDef = cardRank++;\n    }\n  }\n  CardDefinitionDirective.ɵfac = function CardDefinitionDirective_Factory(t) {\n    return new (t || CardDefinitionDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n  CardDefinitionDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CardDefinitionDirective,\n    selectors: [[\"\", \"fdCardDef\", \"\"]],\n    inputs: {\n      fdCardDef: \"fdCardDef\"\n    }\n  });\n  return CardDefinitionDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FixedCardLayoutComponent = /*#__PURE__*/(() => {\n  class FixedCardLayoutComponent {\n    /** Card's minimum width in pixels. */\n    set cardMinimumWidth(value) {\n      const coercedValue = coerceNumberProperty(value);\n      if (coercedValue < CARD_MINIMUM_WIDTH) {\n        return;\n      }\n      this._cardMinimumWidth = coercedValue;\n    }\n    get cardMinimumWidth() {\n      return this._cardMinimumWidth;\n    }\n    /** @hidden Return available width for fixed card layout */\n    get _availableWidth() {\n      return this._layout.nativeElement.getBoundingClientRect().width;\n    }\n    /** @hidden */\n    constructor(_changeDetector, _rtlService) {\n      this._changeDetector = _changeDetector;\n      this._rtlService = _rtlService;\n      /** Drag start delay in milliseconds, default to 200ms for safe scrolling on mobile with touchscreen */\n      this.dragStartDelay = DRAG_START_DELAY;\n      /** Limit the number of columns. Default is 10. */\n      this.maxColumns = MAX_COLUMNS;\n      /** Event to emit, when layout changes */\n      this.layoutChange = new EventEmitter();\n      /** Event to emit on Card dragged and dropped */\n      this.cardDraggedDropped = new EventEmitter();\n      /** @hidden*/\n      this._containerHeight = 0;\n      /** @hidden handles rtl service */\n      this._dir = 'ltr';\n      /** @hidden first number is the CardDefinition rank, i.e. id */\n      this._groupIndexes = new Map();\n      /** @hidden first number is the CardDefinition rank, i.e. id */\n      this._itemIndexes = new Map();\n      /** @hidden first number is the CardDefinition rank, i.e. id */\n      this._singleItemColumns = new Set();\n      /** @hidden */\n      this._columnsWidth = new Map();\n      /** @hidden */\n      this._listenResize = true;\n      /** @hidden */\n      this._cardMinimumWidth = CARD_MINIMUM_WIDTH;\n      /** @hidden */\n      this._cardsSizeChangeSubscription = new Subscription();\n      /** @hidden An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)  */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._sortPredicateFn = index => index === 0;\n      /** @hidden For the keyboard drag&drop directive */\n      this._customMoveFn = (group, indexFrom, indexTo) => {\n        const movedCard = group[indexFrom];\n        const replacedCard = group[indexTo];\n        const indexFromArray = this._cardsArray.findIndex(card => card.fdCardDef === movedCard.fdCardDef);\n        const indexToArray = this._cardsArray.findIndex(card => card.fdCardDef === replacedCard.fdCardDef);\n        this._processDragDrop(indexFromArray, indexToArray, movedCard, replacedCard);\n      };\n      /** @hidden For the keyboard drag&drop directive */\n      this._customTransferFn = (prevGroup, nextGroup, indexFrom, indexTo) => {\n        const movedCard = prevGroup[indexFrom];\n        const replacedCard = nextGroup[indexTo];\n        const indexFromArray = this._cardsArray.findIndex(card => card.fdCardDef === movedCard.fdCardDef);\n        const indexToArray = this._cardsArray.findIndex(card => card.fdCardDef === replacedCard.fdCardDef);\n        this._processDragDrop(indexFromArray, indexToArray, movedCard, replacedCard);\n      };\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._subscribeToRtl();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._processCards();\n      this._listenOnResize();\n      this._listenOnCardsChange();\n      this._accessibilitySetup();\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      // Skip all changes unless we don't have initial layout created\n      if (!this._cardsArray) {\n        return;\n      }\n      if ('maxColumns' in changes || 'cardMinimumWidth' in changes) {\n        this.updateLayout();\n      } else if ('columnsWidthConfig' in changes) {\n        this._setCardColumnsWidth();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._cardsSizeChangeSubscription.unsubscribe();\n      this._keyboardEventsManager?.destroy();\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** @hidden */\n    handleKeydown(event) {\n      event.stopImmediatePropagation();\n      if (this._keyboardEventsManager) {\n        this._keyboardEventsManager.onKeydown(event);\n      }\n    }\n    /** Distribute cards on window resize */\n    updateLayout() {\n      this._listenResize = false;\n      if (this._cards.length) {\n        const possibleNumberOfColumns = getNumberOfColumns(this._availableWidth, this.cardMinimumWidth);\n        this._numberOfColumns = Math.min(possibleNumberOfColumns, this._cards.length, this.maxColumns || MAX_COLUMNS, MAX_COLUMNS);\n      } else {\n        this._numberOfColumns = 1;\n      }\n      this.layoutChange.emit({\n        numberOfColumns: this._numberOfColumns,\n        screenSize: this._availableWidth\n      });\n      this._setCardColumns();\n      this._setCardColumnsWidth();\n      this._setContainerHeight();\n      this._listenResize = true;\n    }\n    /** @hidden */\n    _onDragStarted(event) {\n      this._listenResize = false;\n      this._hiddenCard = event.source.data;\n    }\n    /** @hidden */\n    _onDropListEntered(event) {\n      const containerItemCardDef = event.container.getSortedItems()[0].data.fdCardDef;\n      const dragItemCardDef = event.item.data.fdCardDef;\n      this._placeholderMargin = containerItemCardDef !== dragItemCardDef;\n      const columnIndexToAddSpace = this._cardColumns.findIndex(column => column.find(card => event.container.getSortedItems()[0].data === card));\n      const spaceToAdd = event.item.element.nativeElement.getBoundingClientRect().height + (event.container.getSortedItems().length ? REM_IN_PX : 0);\n      // When we move the card into a certain column we should increase the height of that column by the card height\n      this._setContainerHeight(columnIndexToAddSpace, spaceToAdd);\n    }\n    /** @hidden */\n    _onDragDropped(event) {\n      this._hiddenCard = null;\n      if (event.container.data === event.previousContainer.data) {\n        return;\n      }\n      this._placeholderMargin = false;\n      const movedCard = event.previousContainer.getSortedItems()[0].data;\n      const replacedCard = event.container.getSortedItems()[0].data;\n      const movedCardColumn = this._cardColumns.find(column => column.find(card => card.fdCardDef === movedCard.fdCardDef));\n      const replacedCardColumn = this._cardColumns.find(column => column.find(card => card.fdCardDef === replacedCard.fdCardDef));\n      // If we dragged the card from the same column as the column we're dropping into\n      // There may be a situation where the order shouldn't change but since there are a different drop lists it will change\n      // We should prevent this\n      if (movedCardColumn === replacedCardColumn && movedCardColumn?.length === 2) {\n        if (movedCard.fdCardDef < replacedCard.fdCardDef && event.previousContainer.data < event.container.data) {\n          return;\n        }\n        if (movedCard.fdCardDef > replacedCard.fdCardDef && event.previousContainer.data > event.container.data) {\n          return;\n        }\n      }\n      this._processDragDrop(event.previousContainer.data, event.container.data, movedCard, replacedCard);\n    }\n    /** @hidden Arranges cards on drop of dragged card */\n    _processDragDrop(prevIndex, newIndex, prevCard, newCard) {\n      // moveItemInArray from CDK won't work as it changes order of other cards\n      const replacedCard = this._cardsArray[newIndex];\n      this._cardsArray[newIndex] = this._cardsArray[prevIndex];\n      this._cardsArray[prevIndex] = replacedCard;\n      adjustCardRank(prevCard, newCard);\n      this.cardDraggedDropped.emit({\n        previousIndex: prevIndex,\n        currentIndex: newIndex,\n        layoutColumns: this._numberOfColumns,\n        items: this._cards.toArray()\n      });\n      this.updateLayout();\n    }\n    /** @hidden */\n    _accessibilitySetup() {\n      this._keyboardEventsManager?.destroy();\n      this._keyboardEventsManager = new FocusKeyManager(this._cardContainers).withWrap();\n    }\n    /** @hidden Rtl change subscription */\n    _subscribeToRtl() {\n      this._rtlService?.rtl.pipe(takeUntil(this._onDestroy$)).subscribe(isRtl => {\n        this._dir = isRtl ? 'rtl' : 'ltr';\n        this._changeDetector.markForCheck();\n      });\n    }\n    /** @hidden Listen window resize and distribute cards on column change */\n    _listenOnResize() {\n      resizeObservable(this._layout.nativeElement).pipe(debounceTime(20), filter(entries => this._listenResize && !!(entries[0].contentRect.height || entries[0].contentRect.width)), takeUntil(this._onDestroy$)).subscribe(() => this.updateLayout());\n    }\n    /** @hidden Listen card change and distribute cards on column change */\n    _listenOnCardsChange() {\n      this._cards.changes.subscribe(() => {\n        this._processCards();\n        this.updateLayout();\n      });\n    }\n    /** @hidden */\n    _processCards() {\n      this._cardsArray = this._cards.toArray().sort((firstCard, secondCard) => firstCard.fdCardDef - secondCard.fdCardDef);\n    }\n    /** @hidden Distribute cards among columns to arrange them in \"Z\" flow */\n    _setCardColumns() {\n      this._groupIndexes = new Map();\n      this._itemIndexes = new Map();\n      this._singleItemColumns = new Set();\n      const columns = new Array(this._numberOfColumns).fill(0).map(() => new Array(0));\n      this._cardsArray.forEach((card, i) => {\n        const currColumnIndex = i % this._numberOfColumns;\n        const itemIndex = columns[currColumnIndex].length;\n        columns[currColumnIndex].push(card);\n        this._groupIndexes.set(card.fdCardDef, currColumnIndex);\n        this._itemIndexes.set(card.fdCardDef, itemIndex);\n      });\n      this._cardColumns = columns;\n      this._cardColumns.forEach(column => {\n        if (column.length === 1) {\n          this._singleItemColumns.add(column[0].fdCardDef);\n        }\n      });\n      this._listenOnCardsHeightChange();\n    }\n    /** @hidden */\n    _setCardColumnsWidth() {\n      this._columnsWidth = new Map();\n      const configPresent = this.columnsWidthConfig && typeof this.columnsWidthConfig === 'object' && Object.keys(this.columnsWidthConfig).length;\n      if (!configPresent || this._numberOfColumns === 1) {\n        return;\n      }\n      const fixedWidthModifiers = fixWidthModifiers(this.columnsWidthConfig, this._numberOfColumns);\n      const totalWidthModifiers = fixedWidthModifiers.reduce((sum, width) => sum += width, 0);\n      const freeSpace = this._availableWidth - this.cardMinimumWidth * this._numberOfColumns;\n      this._cardColumns.forEach((column, index) => {\n        const columnWidth = Math.round(this.cardMinimumWidth + freeSpace / totalWidthModifiers * fixedWidthModifiers[index]);\n        column.forEach(card => this._columnsWidth.set(card.fdCardDef, columnWidth));\n      });\n    }\n    /**\n     * @hidden\n     * Calculate container height accordingly to the the card columns height\n     * Parameters used to increase the height of the column where drag'n'drop placeholder currently is\n     */\n    _setContainerHeight(columnIndexToAddSpace = -1, spaceToAdd = 0) {\n      this._changeDetector.detectChanges();\n      const cardColumns = this._cardColumns.map(column => column.map(card => this._dragList.find(drag => drag.data === card)).filter(cdkDrag => !cdkDrag?._dragRef.isDragging() && !!cdkDrag?.element?.nativeElement).map(cdkDrag => cdkDrag?.element));\n      const columnsHeights = cardColumns.map(column => column.map(cardElRef => cardElRef?.nativeElement.getBoundingClientRect().height || 0)).map((column, columnIndex) => column.reduce((cardsHeight, height) => cardsHeight += height + REM_IN_PX, 0) + (columnIndex === columnIndexToAddSpace ? spaceToAdd : 0));\n      const prevContainerHeight = this._containerHeight;\n      // +4px because it's the top & bottom borders of card placeholder\n      this._containerHeight = Math.ceil(Math.max(...columnsHeights) + 4);\n      if (this._containerHeight !== prevContainerHeight) {\n        this._changeDetector.detectChanges();\n      }\n    }\n    /** @hidden */\n    _listenOnCardsHeightChange() {\n      this._cardsSizeChangeSubscription.unsubscribe();\n      this._cardsSizeChangeSubscription = new Subscription();\n      this._changeDetector.detectChanges();\n      this._cardColumns.forEach(column => column.map(card => this._dragList.find(wrapper => wrapper.data === card)?.element).filter(v => !!v).forEach(card => {\n        this._cardsSizeChangeSubscription.add(resizeObservable(card.nativeElement).pipe(skip(1), debounceTime(20), filter(() => this._listenResize && !!this._layout.nativeElement.clientHeight)).subscribe(() => this._setContainerHeight()));\n      }));\n    }\n  }\n  FixedCardLayoutComponent.ɵfac = function FixedCardLayoutComponent_Factory(t) {\n    return new (t || FixedCardLayoutComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.RtlService, 8));\n  };\n  FixedCardLayoutComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FixedCardLayoutComponent,\n    selectors: [[\"fd-fixed-card-layout\"]],\n    contentQueries: function FixedCardLayoutComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, CardDefinitionDirective, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._cards = _t);\n      }\n    },\n    viewQuery: function FixedCardLayoutComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(FixedCardLayoutItemComponent, 5);\n        i0.ɵɵviewQuery(CdkDrag, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._layout = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._cardContainers = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._dragList = _t);\n      }\n    },\n    hostAttrs: [1, \"fd-fixed-card-layout\"],\n    hostBindings: function FixedCardLayoutComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function FixedCardLayoutComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeydown($event);\n        });\n      }\n    },\n    inputs: {\n      disableDragDrop: \"disableDragDrop\",\n      dragStartDelay: \"dragStartDelay\",\n      cardMinimumWidth: \"cardMinimumWidth\",\n      columnsWidthConfig: \"columnsWidthConfig\",\n      maxColumns: \"maxColumns\"\n    },\n    outputs: {\n      layoutChange: \"layoutChange\",\n      cardDraggedDropped: \"cardDraggedDropped\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 13,\n    consts: [[\"cdkDropListGroup\", \"\", \"fdDndKeyboardGroup\", \"\", \"orientation\", \"horizontal\", 3, \"groups\", \"customMoveFn\", \"customTransferFn\", \"disableKeyboardDragDrop\", \"cdkDropListGroupDisabled\"], [\"layout\", \"\"], [\"cdkDropList\", \"\", \"class\", \"fd-fixed-card-layout__card\", 3, \"fd-fixed-card-layout__card--single\", \"min-width\", \"max-width\", \"display\", \"cdkDropListData\", \"cdkDropListSortPredicate\", \"cdkDropListEntered\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [\"cdkDropList\", \"\", 1, \"fd-fixed-card-layout__card\", 3, \"cdkDropListData\", \"cdkDropListSortPredicate\", \"cdkDropListEntered\"], [\"cdkDrag\", \"\", \"fdDndKeyboardItem\", \"\", \"tabindex\", \"0\", \"cdkDragPreviewClass\", \"fd-fixed-card-layout__card-preview\", 3, \"cdkDragData\", \"cdkDragStartDelay\", \"itemIndex\", \"groupIndex\", \"cdkDragStarted\", \"cdkDragDropped\"], [4, \"ngTemplateOutlet\"], [\"class\", \"fd-fixed-card-layout__card-placeholder\", 3, \"margin-bottom\", 4, \"cdkDragPlaceholder\"], [1, \"fd-fixed-card-layout__card-placeholder\"], [\"class\", \"fd-fixed-card-layout__clearfix\", 3, \"order\", 4, \"ngIf\"], [1, \"fd-fixed-card-layout__clearfix\"]],\n    template: function FixedCardLayoutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, FixedCardLayoutComponent_div_2_Template, 5, 15, \"div\", 2);\n        i0.ɵɵtemplate(3, FixedCardLayoutComponent_ng_container_3_Template, 2, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"fd-fixed-card-layout__card-layout fd-fixed-card-layout__card-layout--columns-\", ctx._numberOfColumns, \"\");\n        i0.ɵɵstyleProp(\"height\", ctx._containerHeight + \"px\");\n        i0.ɵɵproperty(\"groups\", ctx._cardColumns)(\"customMoveFn\", ctx._customMoveFn)(\"customTransferFn\", ctx._customTransferFn)(\"disableKeyboardDragDrop\", ctx.disableDragDrop)(\"cdkDropListGroupDisabled\", ctx.disableDragDrop);\n        i0.ɵɵattribute(\"dir\", ctx._dir);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx._cardsArray);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx._cardColumns);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i3.CdkDropList, i3.CdkDropListGroup, i3.CdkDrag, i3.CdkDragPlaceholder, i1.DndKeyboardGroupDirective, i1.DndKeyboardItemDirective, FixedCardLayoutItemComponent],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-fixed-card-layout{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-fixed-card-layout:after,.fd-fixed-card-layout:before{box-sizing:inherit;font-size:inherit}.fd-fixed-card-layout__card-layout{-webkit-box-sizing:border-box;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-box-align:center;-ms-flex-align:center;-ms-flex-wrap:wrap;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:column;flex-wrap:wrap;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;justify-content:flex-start;line-height:var(--sapContent_LineHeight);margin:-1rem 0 0 -1rem;padding:0}.fd-fixed-card-layout__card-layout:after,.fd-fixed-card-layout__card-layout:before{box-sizing:inherit;font-size:inherit}.fd-fixed-card-layout__card-layout[dir=rtl],[dir=rtl] .fd-fixed-card-layout__card-layout{margin-left:0;margin-right:-1rem}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-2 .fd-fixed-card-layout__card{width:50%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-2 .fd-fixed-card-layout__card:nth-of-type(2n){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-2 .fd-fixed-card-layout__card:nth-of-type(odd){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-3 .fd-fixed-card-layout__card{width:33.3333333333%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-3 .fd-fixed-card-layout__card:nth-of-type(3n){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-3 .fd-fixed-card-layout__card:nth-of-type(3n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-3 .fd-fixed-card-layout__card:nth-of-type(3n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-4 .fd-fixed-card-layout__card{width:25%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-4 .fd-fixed-card-layout__card:nth-of-type(4n){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-4 .fd-fixed-card-layout__card:nth-of-type(4n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-4 .fd-fixed-card-layout__card:nth-of-type(4n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-4 .fd-fixed-card-layout__card:nth-of-type(4n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-5 .fd-fixed-card-layout__card{width:20%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-5 .fd-fixed-card-layout__card:nth-of-type(5n){order:5}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-5 .fd-fixed-card-layout__card:nth-of-type(5n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-5 .fd-fixed-card-layout__card:nth-of-type(5n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-5 .fd-fixed-card-layout__card:nth-of-type(5n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-5 .fd-fixed-card-layout__card:nth-of-type(5n+4){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card{width:16.6666666667%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card:nth-of-type(6n){order:6}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card:nth-of-type(6n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card:nth-of-type(6n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card:nth-of-type(6n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card:nth-of-type(6n+4){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-6 .fd-fixed-card-layout__card:nth-of-type(6n+5){order:5}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card{width:14.2857142857%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n){order:7}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n+4){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n+5){order:5}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-7 .fd-fixed-card-layout__card:nth-of-type(7n+6){order:6}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card{width:12.5%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n){order:8}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+4){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+5){order:5}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+6){order:6}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-8 .fd-fixed-card-layout__card:nth-of-type(8n+7){order:7}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card{width:11.1111111111%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n){order:9}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+4){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+5){order:5}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+6){order:6}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+7){order:7}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-9 .fd-fixed-card-layout__card:nth-of-type(9n+8){order:8}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card{width:10%}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n){order:10}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+1){order:1}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+2){order:2}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+3){order:3}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+4){order:4}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+5){order:5}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+6){order:6}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+7){order:7}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+8){order:8}.fd-fixed-card-layout__card-layout.fd-fixed-card-layout__card-layout--columns-10 .fd-fixed-card-layout__card:nth-of-type(10n+9){order:9}.fd-fixed-card-layout__card,.fd-fixed-card-layout__card-placeholder{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;min-height:.0625rem;min-width:20rem;padding:0}.fd-fixed-card-layout__card-placeholder:after,.fd-fixed-card-layout__card-placeholder:before,.fd-fixed-card-layout__card:after,.fd-fixed-card-layout__card:before{box-sizing:inherit;font-size:inherit}.fd-fixed-card-layout__card{order:1;padding-left:1rem;padding-top:1rem}.fd-fixed-card-layout__card[dir=rtl],[dir=rtl] .fd-fixed-card-layout__card{padding-left:0;padding-right:1rem}.fd-fixed-card-layout__card--single{flex-basis:100%}.fd-fixed-card-layout__card:empty{padding-top:0}.fd-fixed-card-layout__card-placeholder{border:.125rem dashed var(--sapContent_DragAndDropActiveColor);cursor:grabbing;opacity:.3}.fd-fixed-card-layout__card-preview{-webkit-box-sizing:border-box;-webkit-box-shadow:var(--sapContent_Shadow2);border:0;border-radius:var(--sapElement_BorderCornerRadius);box-shadow:var(--sapContent_Shadow2);box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-fixed-card-layout__card-preview:after,.fd-fixed-card-layout__card-preview:before{box-sizing:inherit;font-size:inherit}.fd-fixed-card-layout__clearfix{-webkit-box-sizing:border-box;-ms-flex-preferred-size:100%;border:0;box-sizing:border-box;color:var(--sapTextColor);flex-basis:100%;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0;width:0}.fd-fixed-card-layout__clearfix:after,.fd-fixed-card-layout__clearfix:before{box-sizing:inherit;font-size:inherit}.fd-fixed-card-layout__card{width:100%}.fd-fixed-card-layout__card-layout{align-items:flex-start}.fd-fixed-card-layout__card-placeholder{width:100%;min-width:100%;max-width:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FixedCardLayoutComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @hidden */\nfunction fixWidthModifiers(config, numberOfColumns) {\n  const modifiers = new Array(numberOfColumns).fill(0);\n  return modifiers.map((_, index) => {\n    const columnWidthModifier = config[index + 1];\n    if (!columnWidthModifier || columnWidthModifier < 0) {\n      return 0;\n    }\n    return columnWidthModifier;\n  });\n}\n/** @hidden Returns number of columns that can fit in current available width for fd-card-layout */\nfunction getNumberOfColumns(containerWidth, cardWidth) {\n  containerWidth = containerWidth || 1;\n  cardWidth = cardWidth || 1;\n  const numberOfCardsWithNoGap = Math.max(Math.floor(containerWidth / cardWidth), 1); // Example: 960 / 320 = 3\n  const requiredWidthWithGap = numberOfCardsWithNoGap * cardWidth + (numberOfCardsWithNoGap - 1) * CARD_GAP_WIDTH;\n  const columnCount = requiredWidthWithGap > containerWidth ? numberOfCardsWithNoGap - 1 : numberOfCardsWithNoGap;\n  return Math.max(columnCount, 1);\n}\n/** @hidden Method to update rank after cards are dragged */\nfunction adjustCardRank(draggedCard, replacedCard) {\n  const draggedCardRank = draggedCard.fdCardDef;\n  draggedCard.fdCardDef = replacedCard.fdCardDef;\n  replacedCard.fdCardDef = draggedCardRank;\n}\nlet FixedCardLayoutModule = /*#__PURE__*/(() => {\n  class FixedCardLayoutModule {}\n  FixedCardLayoutModule.ɵfac = function FixedCardLayoutModule_Factory(t) {\n    return new (t || FixedCardLayoutModule)();\n  };\n  FixedCardLayoutModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FixedCardLayoutModule\n  });\n  FixedCardLayoutModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, DragDropModule, DragAndDropModule]\n  });\n  return FixedCardLayoutModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CardDefinitionDirective, FixedCardLayoutComponent, FixedCardLayoutItemComponent, FixedCardLayoutModule };\n//# sourceMappingURL=fundamental-ngx-core-fixed-card-layout.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}