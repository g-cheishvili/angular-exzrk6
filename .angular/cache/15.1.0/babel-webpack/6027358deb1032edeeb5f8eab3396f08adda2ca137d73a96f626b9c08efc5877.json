{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, HostBinding, HostListener, forwardRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { parserFileSize, KeyUtil } from '@fundamental-ngx/cdk/utils';\nimport { Subscription } from 'rxjs';\nimport { registerFormItemControl, FormControlModule } from '@fundamental-ngx/core/form';\nimport { ENTER, SPACE, TAB } from '@angular/cdk/keycodes';\nimport * as i2 from '@fundamental-ngx/core/content-density';\nimport { contentDensityObserverProviders, DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\nimport * as i3 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nconst _c0 = [\"fileInput\"];\nconst _c1 = [\"textInput\"];\nconst _c2 = [[[\"\", \"fd-form-control\", \"\"]]];\nconst _c3 = [\"[fd-form-control]\"];\nlet FileUploaderService = /*#__PURE__*/(() => {\n  class FileUploaderService {\n    /**\n     * Method that validates files passed. It is based on\n     * @param files File[]\n     * @param minFileSize string\n     * @param maxFileSize string\n     * @param acceptedExtensions string\n     */\n    validateFiles(files, minFileSize, maxFileSize, acceptedExtensions) {\n      const maxSize = parserFileSize(maxFileSize);\n      const minSize = parserFileSize(minFileSize);\n      let allowedExtensions = null;\n      if (acceptedExtensions) {\n        allowedExtensions = acceptedExtensions.toLocaleLowerCase().replace(/[\\s.]/g, '').split(',');\n      }\n      const fileUploadOutput = {};\n      fileUploadOutput.validFiles = files.filter(file => this._checkSize(file.size, maxSize, minSize) && this._checkExtension(file, allowedExtensions));\n      fileUploadOutput.invalidFiles = files.filter(file => !this._checkSize(file.size, maxSize, minSize) || !this._checkExtension(file, allowedExtensions));\n      return fileUploadOutput;\n    }\n    /** @hidden */\n    _checkExtension(file, allowedExtensions) {\n      if (!allowedExtensions) {\n        return true;\n      }\n      const extension = file.name.split('.')[file.name.split('.').length - 1].toLocaleLowerCase();\n      return allowedExtensions.lastIndexOf(extension) !== -1;\n    }\n    /** @hidden */\n    _checkSize(fileSize, maxSize, minSize) {\n      if (maxSize && fileSize > maxSize) {\n        return false;\n      }\n      if (minSize && fileSize < minSize) {\n        return false;\n      }\n      return true;\n    }\n  }\n  FileUploaderService.ɵfac = function FileUploaderService_Factory(t) {\n    return new (t || FileUploaderService)();\n  };\n  FileUploaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FileUploaderService,\n    factory: FileUploaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileUploaderService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive tool to facilitate interacting with a native file input element.\n */\nlet FileUploaderSelectDirective = /*#__PURE__*/(() => {\n  class FileUploaderSelectDirective {\n    constructor() {\n      /** Whether the input should accept multiple file selections. */\n      this.multiple = true;\n      /** Event emitted when files are selected. */\n      this.fileSelected = new EventEmitter();\n    }\n    /** @hidden */\n    get multipleBinding() {\n      return this.multiple ? true : undefined;\n    }\n    /** @hidden */\n    onChange(event) {\n      if (event.target instanceof HTMLInputElement) {\n        const elRef = event.target;\n        const files = elRef.files;\n        if (files?.length) {\n          const fileArray = Array.from(files);\n          this.fileSelected.emit(fileArray);\n        }\n      }\n    }\n  }\n  FileUploaderSelectDirective.ɵfac = function FileUploaderSelectDirective_Factory(t) {\n    return new (t || FileUploaderSelectDirective)();\n  };\n  FileUploaderSelectDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FileUploaderSelectDirective,\n    selectors: [[\"\", \"fdFileSelect\", \"\"]],\n    hostVars: 1,\n    hostBindings: function FileUploaderSelectDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function FileUploaderSelectDirective_change_HostBindingHandler($event) {\n          return ctx.onChange($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"multiple\", ctx.multipleBinding);\n      }\n    },\n    inputs: {\n      multiple: \"multiple\"\n    },\n    outputs: {\n      fileSelected: \"fileSelected\"\n    }\n  });\n  return FileUploaderSelectDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive that handles the drag and drop feature of the file input.\n */\nlet FileUploaderDragndropDirective = /*#__PURE__*/(() => {\n  class FileUploaderDragndropDirective {\n    /** @hidden */\n    constructor(_fileUploadService) {\n      this._fileUploadService = _fileUploadService;\n      /** Whether multiple files can be dropped at once. */\n      this.multiple = true;\n      /** Max file size in bytes that the input will accept. */\n      this.maxFileSize = '';\n      /** Min file size in bytes that the input will accept. */\n      this.minFileSize = '';\n      /** Whether selecting of new files is disabled. */\n      this.disabled = false;\n      /** Whether drag and drop is enabled. Disables this directive. */\n      this.dragndrop = true;\n      /** Event emitted when files are dropped. Passes back an array of files. */\n      this.fileChanged = new EventEmitter();\n      /** Event emitted when the dragged file enters the dropzone. */\n      this.dragEntered = new EventEmitter();\n      /** Event emitted when the dragged file exits the dropzone. */\n      this.dragLeave = new EventEmitter();\n      /** @hidden */\n      this.elementStateCounter = 0;\n    }\n    /** @hidden */\n    onDragover(event) {\n      if (this.dragndrop) {\n        this._muteEvent(event);\n      }\n    }\n    /** @hidden */\n    onDragenter() {\n      ++this.elementStateCounter;\n      if (this.dragndrop && this.elementStateCounter === 1) {\n        this.dragEntered.emit();\n      }\n    }\n    /** @hidden */\n    onDragleave(event) {\n      --this.elementStateCounter;\n      if (this.dragndrop && this.elementStateCounter === 0) {\n        this._muteEvent(event);\n        this.dragLeave.emit();\n      }\n    }\n    /** @hidden */\n    onDrop(event) {\n      this.elementStateCounter = 0;\n      if (!this.dragndrop || this.disabled) {\n        return;\n      }\n      this._muteEvent(event);\n      const rawFiles = event.dataTransfer.files;\n      const files = Array.from(rawFiles);\n      if (!this.multiple && files.length > 1) {\n        this.fileChanged.emit({\n          validFiles: [],\n          invalidFiles: files\n        });\n        return;\n      }\n      const fileOutput = this._fileUploadService.validateFiles(files, this.minFileSize, this.maxFileSize, this.accept);\n      this.fileChanged.emit(fileOutput);\n    }\n    /** @hidden */\n    _muteEvent(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  FileUploaderDragndropDirective.ɵfac = function FileUploaderDragndropDirective_Factory(t) {\n    return new (t || FileUploaderDragndropDirective)(i0.ɵɵdirectiveInject(FileUploaderService));\n  };\n  FileUploaderDragndropDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FileUploaderDragndropDirective,\n    selectors: [[\"\", \"fdFileDragnDrop\", \"\"], [\"\", \"fd-file-drag-n-drop\", \"\"]],\n    hostBindings: function FileUploaderDragndropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function FileUploaderDragndropDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragover($event);\n        })(\"dragenter\", function FileUploaderDragndropDirective_dragenter_HostBindingHandler() {\n          return ctx.onDragenter();\n        })(\"dragleave\", function FileUploaderDragndropDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragleave($event);\n        })(\"drop\", function FileUploaderDragndropDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      multiple: \"multiple\",\n      accept: \"accept\",\n      maxFileSize: \"maxFileSize\",\n      minFileSize: \"minFileSize\",\n      disabled: \"disabled\",\n      dragndrop: \"dragndrop\"\n    },\n    outputs: {\n      fileChanged: \"fileChanged\",\n      dragEntered: \"dragEntered\",\n      dragLeave: \"dragLeave\"\n    }\n  });\n  return FileUploaderDragndropDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet fileUploaderInputUniqueId = 0;\n/**\n * Tool to facilitate the input of files from the user.\n * It supports drag and drop, multiple input, max file size and more.\n * The drag events make it very easy to create and style elements like a dropzone.\n */\nlet FileUploaderComponent = /*#__PURE__*/(() => {\n  class FileUploaderComponent {\n    /** @hidden */\n    constructor(_fileUploadService, _changeDetRef, _contentDensityObserver) {\n      this._fileUploadService = _fileUploadService;\n      this._changeDetRef = _changeDetRef;\n      this._contentDensityObserver = _contentDensityObserver;\n      /** Whether the file input is disabled. */\n      this.disabled = false;\n      /** If it is mandatory field */\n      this.required = false;\n      /** Whether the file input should accept multiple files. */\n      this.multiple = true;\n      /** Whether the file input accepts drag and dropped files. */\n      this.dragndrop = true;\n      /** Max file size in bytes that the input will accept. */\n      this.maxFileSize = '';\n      /** Min file size in bytes that the input will accept. */\n      this.minFileSize = '';\n      /** Id for the input element. */\n      this.id = 'fd-file-uploader-input' + fileUploaderInputUniqueId++;\n      /** The field to set state of radio button using:\n       * 'success' | 'error' | 'warning' | 'default' | 'information'\n       * by default value is set to 'default'\n       */\n      this.state = 'default';\n      /** Whether or not to hide the input, leaving only the upload/browse button. */\n      this.inputHidden = false;\n      /** * It stores the valid files  */\n      this.validFiles = [];\n      /** * It stores the invalid files  */\n      this.invalidFiles = [];\n      /** Event fired when files are selected. Passed object is the array of files selected. */\n      this.selectedFilesChanged = new EventEmitter();\n      /** Event fired when some invalid files are selected. Passed object is the array of invalid files. */\n      this.selectedInvalidFiles = new EventEmitter();\n      /** Event fired when the dragged file enters the component boundaries. */\n      this.onDragEnter = new EventEmitter();\n      /** Event fired when the dragged file exits the component boundaries. */\n      this.onDragLeave = new EventEmitter();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetRef.detectChanges();\n    }\n    /** @hidden */\n    writeValue(files) {\n      if (this._isEmpty()) {\n        return;\n      }\n      if (!files) {\n        this.clear();\n      }\n      this._propagateFiles();\n    }\n    /** @hidden */\n    handleDrop(files) {\n      this.validFiles = files.validFiles ?? [];\n      this.invalidFiles = files.invalidFiles ?? [];\n      this._propagateFiles();\n    }\n    /** @hidden */\n    selectHandler(event) {\n      this.validateFiles(event);\n      this._propagateFiles();\n    }\n    /** @hidden */\n    validateFiles(event) {\n      if (this.fileLimit && event.length > this.fileLimit) {\n        throw new Error('FileLimitError - Selected files count is more than specified limit ');\n      }\n      const fileOutput = this._fileUploadService.validateFiles(event, this.minFileSize, this.maxFileSize, this.accept);\n      this.validFiles = fileOutput.validFiles ?? [];\n      this.invalidFiles = fileOutput.invalidFiles ?? [];\n    }\n    /** @hidden */\n    setInputValue(selectedFiles) {\n      let fileName = '';\n      selectedFiles.forEach(file => fileName = fileName.concat(' ' + file.name));\n      if (!this.inputRefText) {\n        return;\n      }\n      this.inputRefText.nativeElement.value = fileName;\n      this.inputRefText.nativeElement.title = fileName;\n      if (fileName) {\n        this.inputRefText.nativeElement.placeholder = fileName;\n      } else {\n        this.inputRefText.nativeElement.placeholder = this.placeholder;\n        this.inputRefText.nativeElement.title = this.placeholder;\n      }\n      this.inputRefText.nativeElement.focus();\n    }\n    /** @hidden */\n    keyDownHandle(event) {\n      if (KeyUtil.isKeyCode(event, [ENTER, SPACE])) {\n        this.open();\n      } else if (KeyUtil.isKeyCode(event, [TAB])) {\n        return;\n      }\n      event.preventDefault();\n    }\n    /**\n     * Opens the file selector.\n     */\n    open() {\n      this.inputRef.nativeElement.click();\n    }\n    /**\n     * Clears the files from the input.\n     */\n    clear() {\n      if (this.inputRef) {\n        this.inputRef.nativeElement.value = '';\n      }\n      if (this.inputRefText) {\n        this.inputRefText.nativeElement.value = '';\n      }\n      this.validFiles = [];\n      this.invalidFiles = [];\n    }\n    /** @hidden */\n    _isEmpty() {\n      return this.validFiles.length === 0 && this.invalidFiles.length === 0;\n    }\n    /** @hidden */\n    _propagateFiles() {\n      this.setInputValue(this.validFiles);\n      this.onChange(this.validFiles);\n      this.selectedFilesChanged.emit(this.validFiles);\n      this.selectedInvalidFiles.emit(this.invalidFiles);\n    }\n  }\n  FileUploaderComponent.ɵfac = function FileUploaderComponent_Factory(t) {\n    return new (t || FileUploaderComponent)(i0.ɵɵdirectiveInject(FileUploaderService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.ContentDensityObserver));\n  };\n  FileUploaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FileUploaderComponent,\n    selectors: [[\"fd-file-uploader\"]],\n    viewQuery: function FileUploaderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRefText = _t.first);\n      }\n    },\n    hostAttrs: [1, \"fd-file-uploader\"],\n    hostBindings: function FileUploaderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"blur\", function FileUploaderComponent_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      required: \"required\",\n      multiple: \"multiple\",\n      accept: \"accept\",\n      dragndrop: \"dragndrop\",\n      maxFileSize: \"maxFileSize\",\n      minFileSize: \"minFileSize\",\n      id: \"id\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      placeholder: \"placeholder\",\n      buttonLabel: \"buttonLabel\",\n      buttonAriaLabel: \"buttonAriaLabel\",\n      state: \"state\",\n      fileLimit: \"fileLimit\",\n      inputHidden: \"inputHidden\",\n      width: \"width\"\n    },\n    outputs: {\n      selectedFilesChanged: \"selectedFilesChanged\",\n      selectedInvalidFiles: \"selectedInvalidFiles\",\n      onDragEnter: \"onDragEnter\",\n      onDragLeave: \"onDragLeave\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FileUploaderComponent),\n      multi: true\n    }, registerFormItemControl(FileUploaderComponent), contentDensityObserverProviders()])],\n    ngContentSelectors: _c3,\n    decls: 7,\n    vars: 24,\n    consts: [[\"fdFileDragnDrop\", \"\", 1, \"fd-file-uploader__container\", 3, \"accept\", \"maxFileSize\", \"minFileSize\", \"dragndrop\", \"disabled\", \"multiple\", \"fileChanged\", \"dragEntered\", \"dragLeave\"], [\"aria-live\", \"polite\", \"autocomplete\", \"off\", \"type\", \"text\", \"tabindex\", \"0\", 1, \"fd-input\", \"fd-file-uploader__input\", 3, \"id\", \"title\", \"placeholder\", \"value\", \"hidden\", \"disabled\", \"click\", \"keydown\"], [\"textInput\", \"\"], [\"fd-button\", \"\", 1, \"file-uploader__button\", 3, \"label\", \"disabled\", \"click\"], [\"fdFileSelect\", \"\", \"type\", \"file\", 1, \"fd-file-uploader__hidden\", 3, \"multiple\", \"disabled\", \"fileSelected\"], [\"fileInput\", \"\"]],\n    template: function FileUploaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"fileChanged\", function FileUploaderComponent_Template_div_fileChanged_0_listener($event) {\n          return ctx.handleDrop($event);\n        })(\"dragEntered\", function FileUploaderComponent_Template_div_dragEntered_0_listener() {\n          return ctx.onDragEnter.emit();\n        })(\"dragLeave\", function FileUploaderComponent_Template_div_dragLeave_0_listener() {\n          return ctx.onDragLeave.emit();\n        });\n        i0.ɵɵelementStart(1, \"input\", 1, 2);\n        i0.ɵɵlistener(\"click\", function FileUploaderComponent_Template_input_click_1_listener() {\n          return ctx.open();\n        })(\"keydown\", function FileUploaderComponent_Template_input_keydown_1_listener($event) {\n          return ctx.keyDownHandle($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function FileUploaderComponent_Template_button_click_3_listener() {\n          return ctx.open();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 4, 5);\n        i0.ɵɵlistener(\"fileSelected\", function FileUploaderComponent_Template_input_fileSelected_5_listener($event) {\n          return ctx.selectHandler($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"accept\", ctx.accept)(\"maxFileSize\", ctx.maxFileSize)(\"minFileSize\", ctx.minFileSize)(\"dragndrop\", ctx.dragndrop)(\"disabled\", ctx.disabled)(\"multiple\", ctx.multiple);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.state ? \" is-\" + ctx.state : \"\");\n        i0.ɵɵstyleProp(\"width\", ctx.width);\n        i0.ɵɵproperty(\"id\", ctx.id)(\"title\", ctx.ariaLabel)(\"placeholder\", ctx.placeholder)(\"hidden\", ctx.inputHidden)(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-required\", ctx.required);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"label\", ctx.buttonLabel)(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-label\", ctx.buttonAriaLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"multiple\", ctx.multiple)(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"accept\", ctx.accept);\n      }\n    },\n    dependencies: [i3.ButtonComponent, FileUploaderSelectDirective, FileUploaderDragndropDirective],\n    styles: [\".fd-input{-webkit-box-sizing:border-box;-webkit-box-shadow:none;-webkit-appearance:none;appearance:none;background:var(--sapField_BackgroundStyle, var(--sapField_BackgroundStyle));background-color:var(--sapField_Background, var(--sapField_Background));border:0;border:var(--sapField_BorderWidth) var(--sapField_BorderStyle) var(--sapField_BorderColor);border-radius:var(--sapField_BorderCornerRadius);box-shadow:none;box-sizing:border-box;color:var(--sapTextColor);color:var(--sapField_TextColor);cursor:text;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:2.25rem;line-height:var(--sapContent_LineHeight);margin:0;margin:var(--fdInput_Field_Margin, .25rem 0);min-height:2.25rem;min-width:var(2.75rem, 2.75rem);outline:none;overflow:hidden;padding:0;padding:var(--fdInput_Field_Padding, 0 .625rem);text-overflow:ellipsis;text-shadow:var(--fdInput_Text_Shadow);white-space:nowrap;width:100%;z-index:1}.fd-input:after,.fd-input:before{box-sizing:inherit;font-size:inherit}.fd-input::placeholder{color:var(--sapField_PlaceholderTextColor);font-style:var(--fdPlaceholder_Font_Style)}.fd-input[dir=rtl]::placeholder,[dir=rtl] .fd-input::placeholder{text-indent:.125rem}.fd-input::selection{background-color:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}.fd-input::-ms-clear{display:none}.fd-input.is-hover,.fd-input:hover{-webkit-box-shadow:var(--fdInput_Box_Shadow_Hover);background:var(--sapField_Hover_BackgroundStyle, var(--sapField_Hover_BackgroundStyle));background-color:var(--sapField_Hover_Background, var(--sapField_Hover_Background));border-color:var(--sapField_Hover_BorderColor);box-shadow:var(--fdInput_Box_Shadow_Hover)}.fd-input.is-focus,.fd-input:focus{-webkit-box-shadow:none;background:var(--sapField_Focus_Background, var(--sapField_Focus_Background));box-shadow:none;outline-color:var(--fdInput_Outline_Color);outline-offset:var(--fdInput_Outline_Offset);outline-style:var(--sapContent_FocusStyle);outline-width:var(--sapContent_FocusWidth);z-index:5}.fd-input[type=search]::-webkit-search-cancel-button,.fd-input[type=search]::-webkit-search-decoration,.fd-input[type=search]::-webkit-search-results-button,.fd-input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}.fd-input[aria-expanded=false]{z-index:0}.fd-input.is-expanded,.fd-input[aria-expanded=true]{z-index:4}.fd-input[class*=-compact],.fd-input[class*=-condensed],[class*=-compact] .fd-input:not([class*=-cozy]),[class*=-condensed] .fd-input:not([class*=-cozy]){box-sizing:border-box;height:1.625rem;margin:var(--fdInput_Field_Compact_Margin, .1875rem 0);min-height:1.625rem;min-width:var(--fdInput_Field_Compact_Min_Width, 2rem);padding:var(--fdInput_Field_Compact_Padding, 0 .5rem)}.fd-input--no-number-spinner{-moz-appearance:textfield}.fd-input--no-number-spinner::-webkit-inner-spin-button,.fd-input--no-number-spinner::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.fd-input.right-align{text-align:right}.fd-input.is-success{background:var(--sapField_SuccessBackgroundStyle);background-color:var(--sapField_SuccessBackground);border:var(--sapField_SuccessColor) var(--sapField_SuccessBorderWidth) var(--sapField_SuccessBorderStyle)}.fd-input.is-success.is-hover,.fd-input.is-success:hover{-webkit-box-shadow:var(--fdInput_Success_Box_Shadow_Hover);background-color:var(--fdInput_Success_Background_Color_Hover);border-color:var(--sapField_SuccessColor);box-shadow:var(--fdInput_Success_Box_Shadow_Hover)}.fd-input.is-success.is-focus,.fd-input.is-success:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Success_Outline_Color);z-index:5}.fd-input.is-success.is-focus.is-hover,.fd-input.is-success.is-focus:hover,.fd-input.is-success:focus.is-hover,.fd-input.is-success:focus:hover{box-shadow:none}.fd-input.is-error{background:var(--sapField_InvalidBackgroundStyle);background-color:var(--sapField_InvalidBackground);border:var(--sapField_InvalidColor) var(--sapField_InvalidBorderWidth) var(--sapField_InvalidBorderStyle)}.fd-input.is-error.is-hover,.fd-input.is-error:hover{-webkit-box-shadow:var(--fdInput_Error_Box_Shadow_Hover);background-color:var(--fdInput_Error_Background_Color_Hover);border-color:var(--sapField_InvalidColor);box-shadow:var(--fdInput_Error_Box_Shadow_Hover)}.fd-input.is-error.is-focus,.fd-input.is-error:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Error_Outline_Color);z-index:5}.fd-input.is-error.is-focus.is-hover,.fd-input.is-error.is-focus:hover,.fd-input.is-error:focus.is-hover,.fd-input.is-error:focus:hover{box-shadow:none}.fd-input.is-warning{background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border:var(--sapField_WarningColor) var(--sapField_WarningBorderWidth) var(--sapField_WarningBorderStyle)}.fd-input.is-warning.is-hover,.fd-input.is-warning:hover{-webkit-box-shadow:var(--fdInput_Warning_Box_Shadow_Hover);background-color:var(--fdInput_Warning_Background_Color_Hover);border-color:var(--sapField_WarningColor);box-shadow:var(--fdInput_Warning_Box_Shadow_Hover)}.fd-input.is-warning.is-focus,.fd-input.is-warning:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Warning_Outline_Color);z-index:5}.fd-input.is-warning.is-focus.is-hover,.fd-input.is-warning.is-focus:hover,.fd-input.is-warning:focus.is-hover,.fd-input.is-warning:focus:hover{box-shadow:none}.fd-input.is-alert{background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border:var(--sapField_WarningColor) var(--sapField_WarningBorderWidth) var(--sapField_WarningBorderStyle)}.fd-input.is-alert.is-hover,.fd-input.is-alert:hover{-webkit-box-shadow:var(--fdInput_Warning_Box_Shadow_Hover);background-color:var(--fdInput_Warning_Background_Color_Hover);border-color:var(--sapField_WarningColor);box-shadow:var(--fdInput_Warning_Box_Shadow_Hover)}.fd-input.is-alert.is-focus,.fd-input.is-alert:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Warning_Outline_Color);z-index:5}.fd-input.is-alert.is-focus.is-hover,.fd-input.is-alert.is-focus:hover,.fd-input.is-alert:focus.is-hover,.fd-input.is-alert:focus:hover{box-shadow:none}.fd-input.is-information{background:var(--sapField_InformationBackgroundStyle);background-color:var(--sapField_InformationBackground);border:var(--sapField_InformationColor) var(--sapField_InformationBorderWidth) var(--sapField_InformationBorderStyle)}.fd-input.is-information.is-hover,.fd-input.is-information:hover{-webkit-box-shadow:var(--fdInput_Information_Box_Shadow_Hover);background-color:var(--fdInput_Information_Background_Color_Hover);border-color:var(--sapField_InformationColor);box-shadow:var(--fdInput_Information_Box_Shadow_Hover)}.fd-input.is-information.is-focus,.fd-input.is-information:focus{background:var(--sapField_Focus_Background);outline-color:var(--fdInput_Information_Outline_Color);z-index:5}.fd-input.is-information.is-focus.is-hover,.fd-input.is-information.is-focus:hover,.fd-input.is-information:focus.is-hover,.fd-input.is-information:focus:hover{box-shadow:none}.fd-input.is-alert,.fd-input.is-error,.fd-input.is-warning{font-style:var(--fdInput_State_Text_Style);font-weight:var(--fdInput_State_Font_Weight)}.fd-input.is-alert::placeholder,.fd-input.is-error::placeholder,.fd-input.is-warning::placeholder{font-weight:var(--fdInput_State_Font_Weight)}.fd-input.is-alert.is-focus,.fd-input.is-alert:focus,.fd-input.is-error.is-focus,.fd-input.is-error:focus,.fd-input.is-information.is-focus,.fd-input.is-information:focus,.fd-input.is-warning.is-focus,.fd-input.is-warning:focus{outline-offset:var(--fdInput_Outline_Offset_States);z-index:5}.fd-input.is-error::placeholder{color:var(--sapField_TextColor)}.fd-input.is-disabled,.fd-input:disabled,.fd-input[aria-disabled=true]{opacity:var(--sapContent_DisabledOpacity);pointer-events:none}.fd-input.is-disabled::placeholder,.fd-input:disabled::placeholder,.fd-input[aria-disabled=true]::placeholder{color:var(--fdInput_Non_Interactive_State_Placeholder_Color)}.fd-input.is-readonly,.fd-input[aria-readonly=true],.fd-input[readonly]{background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor);border-radius:var(--fdInput_ReadOnly_Border_Radius)}.fd-input.is-readonly::placeholder,.fd-input[aria-readonly=true]::placeholder,.fd-input[readonly]::placeholder{color:var(--fdInput_Non_Interactive_State_Placeholder_Color)}.fd-input.is-readonly.is-hover,.fd-input.is-readonly:hover,.fd-input[aria-readonly=true].is-hover,.fd-input[aria-readonly=true]:hover,.fd-input[readonly].is-hover,.fd-input[readonly]:hover{-webkit-box-shadow:none;background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor);border-radius:var(--fdInput_ReadOnly_Border_Radius);box-shadow:none}.fd-input.is-readonly.is-focus,.fd-input.is-readonly:focus,.fd-input[aria-readonly=true].is-focus,.fd-input[aria-readonly=true]:focus,.fd-input[readonly].is-focus,.fd-input[readonly]:focus{background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor);border-radius:var(--fdInput_ReadOnly_Border_Radius);z-index:5}/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-file-uploader{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-file-uploader:after,.fd-file-uploader:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader__container{-webkit-box-sizing:border-box;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;gap:.25rem;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-file-uploader__container:after,.fd-file-uploader__container:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader .fd-file-uploader__input{-webkit-box-flex:1;-ms-flex:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;background-color:var(--sapField_Background);color:transparent;cursor:pointer;flex:1;text-shadow:0 0 0 var(--sapTextColor);user-select:none}.fd-file-uploader .fd-file-uploader__input::placeholder{color:var(--sapTextColor)}.fd-file-uploader__hidden{display:none}.fd-file-uploader__uploaded-files{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-file-uploader__uploaded-files:after,.fd-file-uploader__uploaded-files:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader__label{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);color:var(--sapContent_LabelColor);display:block;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);line-height:1.1875rem;margin:1.5rem 0 0;padding:0}.fd-file-uploader__label:after,.fd-file-uploader__label:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader__list{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);list-style-type:none;margin:0;padding:0}.fd-file-uploader__list:after,.fd-file-uploader__list:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader__list-item{-webkit-box-sizing:border-box;-webkit-box-align:center;-ms-flex-align:center;-webkit-box-pack:justify;-ms-flex-pack:justify;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;gap:calc(1rem + var(--fdFileUploaderButtonsSpacing));justify-content:space-between;line-height:var(--sapContent_LineHeight);margin:.5rem 0 0;padding:0}.fd-file-uploader__list-item:after,.fd-file-uploader__list-item:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader__actions{-webkit-box-sizing:border-box;-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;gap:var(--fdFileUploaderButtonsSpacing);justify-content:center;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-file-uploader__actions:after,.fd-file-uploader__actions:before{box-sizing:inherit;font-size:inherit}.fd-file-uploader{display:flex}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FileUploaderComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedFileUploaderContentDensityDirective = /*#__PURE__*/(() => {\n  class DeprecatedFileUploaderContentDensityDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-file-uploader');\n    }\n  }\n  DeprecatedFileUploaderContentDensityDirective.ɵfac = function DeprecatedFileUploaderContentDensityDirective_Factory(t) {\n    return new (t || DeprecatedFileUploaderContentDensityDirective)();\n  };\n  DeprecatedFileUploaderContentDensityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedFileUploaderContentDensityDirective,\n    selectors: [[\"fd-file-uploader\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedFileUploaderContentDensityDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedFileUploaderContentDensityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FileUploaderModule = /*#__PURE__*/(() => {\n  class FileUploaderModule {}\n  FileUploaderModule.ɵfac = function FileUploaderModule_Factory(t) {\n    return new (t || FileUploaderModule)();\n  };\n  FileUploaderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FileUploaderModule\n  });\n  FileUploaderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, ButtonModule, FormControlModule, ContentDensityModule, ContentDensityModule]\n  });\n  return FileUploaderModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DeprecatedFileUploaderContentDensityDirective, FileUploaderComponent, FileUploaderDragndropDirective, FileUploaderModule, FileUploaderSelectDirective, FileUploaderService };\n//# sourceMappingURL=fundamental-ngx-core-file-uploader.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}