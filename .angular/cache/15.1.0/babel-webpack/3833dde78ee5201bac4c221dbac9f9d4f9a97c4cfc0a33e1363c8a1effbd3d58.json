{"ast":null,"code":"import _asyncToGenerator from \"/home/webpct/angular-exzrk6/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, ElementRef, ChangeDetectorRef, Directive, InjectionToken, Component, Inject, Optional, ViewChild, NgModule, EventEmitter, Injector, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, ContentChildren } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i11 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { ContentDensityObserver, contentDensityObserverProviders, ContentDensityModule } from '@fundamental-ngx/core/content-density';\nimport * as i9 from '@fundamental-ngx/core/form';\nimport { FormModule } from '@fundamental-ngx/core/form';\nimport * as i10 from '@fundamental-ngx/core/list';\nimport { FD_LIST_COMPONENT, ListModule } from '@fundamental-ngx/core/list';\nimport * as i8 from '@fundamental-ngx/core/token';\nimport { TokenizerComponent, TokenModule } from '@fundamental-ngx/core/token';\nimport * as i1$1 from '@fundamental-ngx/cdk/utils';\nimport { isJsObject, isFunction, isString, DestroyedService, RangeSelector, coerceArraySafe, KeyUtil, resizeObservable, TemplateDirective, PipeModule, AutoCompleteModule, DynamicComponentService } from '@fundamental-ngx/cdk/utils';\nimport * as i7 from '@fundamental-ngx/i18n';\nimport { I18nModule } from '@fundamental-ngx/i18n';\nimport * as i5 from '@fundamental-ngx/core/popover';\nimport { PopoverModule } from '@fundamental-ngx/core/popover';\nimport * as i6$1 from '@fundamental-ngx/core/checkbox';\nimport { CheckboxModule } from '@fundamental-ngx/core/checkbox';\nimport * as i7$1 from '@fundamental-ngx/core/input-group';\nimport { InputGroupModule } from '@fundamental-ngx/core/input-group';\nimport { BACKSPACE, ESCAPE, ENTER, CONTROL, TAB, SHIFT, UP_ARROW, RIGHT_ARROW, DOWN_ARROW, LEFT_ARROW, ALT, A, SPACE } from '@angular/cdk/keycodes';\nimport * as i3$1 from '@fundamental-ngx/cdk/data-source';\nimport { MatchingStrategy, DataSourceDirective, BaseDataSource, DataProvider, isDataSource, FD_DATA_SOURCE_TRANSFORMER } from '@fundamental-ngx/cdk/data-source';\nimport * as i2$1 from '@fundamental-ngx/cdk/forms';\nimport { isSelectItem, CvaControl, CvaDirective, isOptionItem, isSelectableOptionItem } from '@fundamental-ngx/cdk/forms';\nimport equal from 'fast-deep-equal';\nimport { BehaviorSubject, Subscription, startWith, takeUntil, skip, timer, isObservable, Subject } from 'rxjs';\nimport { takeUntil as takeUntil$1, debounceTime } from 'rxjs/operators';\nimport * as i1 from '@fundamental-ngx/core/dialog';\nimport { DialogModule } from '@fundamental-ngx/core/dialog';\nimport { MobileModeBase, MobileModeControl, MOBILE_MODE_CONFIG } from '@fundamental-ngx/core/mobile-mode';\nimport * as i3 from '@fundamental-ngx/core/bar';\nimport { BarModule } from '@fundamental-ngx/core/bar';\nimport * as i4 from '@fundamental-ngx/core/title';\nimport * as i6 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\n\n/** @hidden */\nconst _c0 = [\"dialogTemplate\"];\nfunction MobileMultiComboboxComponent_ng_template_0_h1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"h1\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerText\", ctx_r4.mobileConfig.title);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function MobileMultiComboboxComponent_ng_template_0_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.handleDismiss());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"mobile\", true);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_ng_template_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_ng_template_4_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function MobileMultiComboboxComponent_ng_template_0_ng_template_4_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r15.showSelected());\n    });\n    i0.ɵɵpipe(1, \"fdTranslate\");\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"title\", i0.ɵɵpipeBind1(1, 2, \"platformMultiCombobox.mobileShowAllItemsButton\"));\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(2, 4, \"platformMultiCombobox.mobileShowAllItemsButton\"));\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_ng_template_4_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function MobileMultiComboboxComponent_ng_template_0_ng_template_4_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r17.showSelected());\n    });\n    i0.ɵɵpipe(1, \"fdTranslate\");\n    i0.ɵɵpipe(2, \"fdTranslate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"title\", i0.ɵɵpipeBind1(1, 2, \"platformMultiCombobox.mobileShowSelectedItemsButton\"));\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(2, 4, \"platformMultiCombobox.mobileShowSelectedItemsButton\"));\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"fd-bar-element\", 11);\n    i0.ɵɵtemplate(2, MobileMultiComboboxComponent_ng_template_0_ng_template_4_ng_container_2_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵtemplate(3, MobileMultiComboboxComponent_ng_template_0_ng_template_4_button_3_Template, 3, 6, \"button\", 12);\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵtemplate(5, MobileMultiComboboxComponent_ng_template_0_ng_template_4_button_5_Template, 3, 6, \"button\", 13);\n    i0.ɵɵpipe(6, \"async\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"fullWidth\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r6.childContent == null ? null : ctx_r6.childContent.controlTemplate) || null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 4, ctx_r6.selectedShown$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 6, ctx_r6.selectedShown$) === false);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_fd_button_bar_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-button-bar\", 16);\n    i0.ɵɵlistener(\"click\", function MobileMultiComboboxComponent_ng_template_0_fd_button_bar_8_Template_fd_button_bar_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.handleApprove());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"label\", ctx_r8.mobileConfig.approveButtonText);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_fd_button_bar_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-button-bar\", 17);\n    i0.ɵɵlistener(\"click\", function MobileMultiComboboxComponent_ng_template_0_fd_button_bar_9_Template_fd_button_bar_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.handleDismiss());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"label\", ctx_r9.mobileConfig.cancelButtonText);\n  }\n}\nfunction MobileMultiComboboxComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fd-dialog\", 1)(1, \"fd-dialog-header\");\n    i0.ɵɵtemplate(2, MobileMultiComboboxComponent_ng_template_0_h1_2_Template, 1, 1, \"h1\", 2);\n    i0.ɵɵtemplate(3, MobileMultiComboboxComponent_ng_template_0_button_3_Template, 1, 1, \"button\", 3);\n    i0.ɵɵtemplate(4, MobileMultiComboboxComponent_ng_template_0_ng_template_4_Template, 7, 8, \"ng-template\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"fd-dialog-body\");\n    i0.ɵɵtemplate(6, MobileMultiComboboxComponent_ng_template_0_ng_container_6_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"fd-dialog-footer\");\n    i0.ɵɵtemplate(8, MobileMultiComboboxComponent_ng_template_0_fd_button_bar_8_Template, 1, 1, \"fd-button-bar\", 6);\n    i0.ɵɵtemplate(9, MobileMultiComboboxComponent_ng_template_0_fd_button_bar_9_Template, 1, 1, \"fd-button-bar\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const dialog_r2 = ctx.$implicit;\n    const dialogConfig_r3 = ctx.dialogConfig;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"dialogConfig\", dialogConfig_r3)(\"dialogRef\", dialog_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.hasCloseButton);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r1.childContent == null ? null : ctx_r1.childContent.listTemplate) || null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.approveButtonText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mobileConfig == null ? null : ctx_r1.mobileConfig.cancelButtonText);\n  }\n}\nconst _c1 = [\"searchInputElement\"];\nconst _c2 = [\"mobileControlTemplate\"];\nconst _c3 = [\"listTemplate\"];\nconst _c4 = [\"inputGroup\"];\nfunction MultiComboboxComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 9);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n  }\n}\nfunction MultiComboboxComponent_fd_popover_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MultiComboboxComponent_fd_popover_2_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c5 = function () {\n  return [];\n};\nfunction MultiComboboxComponent_fd_popover_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-popover\", 10);\n    i0.ɵɵlistener(\"isOpenChange\", function MultiComboboxComponent_fd_popover_2_Template_fd_popover_isOpenChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16._popoverOpenChangeHandle($event));\n    });\n    i0.ɵɵelementStart(1, \"fd-popover-control\");\n    i0.ɵɵelementContainerStart(2);\n    i0.ɵɵtemplate(3, MultiComboboxComponent_fd_popover_2_ng_container_3_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"fd-popover-body\");\n    i0.ɵɵtemplate(5, MultiComboboxComponent_fd_popover_2_ng_container_5_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵprojection(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    const _r6 = i0.ɵɵreference(8);\n    i0.ɵɵproperty(\"isOpen\", ctx_r1.isOpen)(\"triggers\", i0.ɵɵpureFunction0(8, _c5))(\"disabled\", ctx_r1._cva.disabled)(\"fillControlMode\", ctx_r1.fillControlMode);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", !ctx_r1.autoResize && 100, \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n  }\n}\nfunction MultiComboboxComponent_ng_template_3_fd_tokenizer_5_fd_token_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-token\", 21);\n    i0.ɵɵlistener(\"onCloseClick\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_fd_token_2_Template_fd_token_onCloseClick_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const token_r24 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r25._removeToken(token_r24, $event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const token_r24 = ctx.$implicit;\n    const ctx_r22 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"readOnly\", ctx_r22._cva.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", token_r24.label, \" \");\n  }\n}\nfunction MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-tokenizer\", 16, 17);\n    i0.ɵɵlistener(\"moreClickedEvent\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_fd_tokenizer_moreClickedEvent_0_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r27._moreClicked());\n    });\n    i0.ɵɵtemplate(2, MultiComboboxComponent_ng_template_3_fd_tokenizer_5_fd_token_2_Template, 2, 2, \"fd-token\", 18);\n    i0.ɵɵelementStart(3, \"input\", 19, 20);\n    i0.ɵɵlistener(\"onComplete\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_input_onComplete_3_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29._onCompleteTerm($event));\n    })(\"keydown\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_input_keydown_3_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r30._onInputKeydownHandler($event));\n    })(\"ngModelChange\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_input_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r31 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r31.inputText = $event);\n    })(\"ngModelChange\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_input_ngModelChange_3_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r32 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r32._searchTermChanged());\n    })(\"focus\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_input_focus_3_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const _r21 = i0.ɵɵreference(1);\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      ctx_r33._cva.onTouched();\n      return i0.ɵɵresetView(_r21._showAllTokens());\n    })(\"blur\", function MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template_input_blur_3_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const _r21 = i0.ɵɵreference(1);\n      const ctx_r34 = i0.ɵɵnextContext(2);\n      !ctx_r34.mobile && ctx_r34._onBlur($event);\n      return i0.ɵɵresetView(_r21._hideTokens());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"tokenizerFocusable\", false)(\"compactCollapse\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r19._selectedSuggestions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", ctx_r19._suggestions)(\"inputText\", ctx_r19.inputText)(\"id\", ctx_r19._cva.id)(\"name\", ctx_r19._cva.name)(\"disabled\", ctx_r19._cva.disabled)(\"ngModel\", ctx_r19.inputText)(\"placeholder\", ctx_r19._cva.placeholder)(\"readonly\", ctx_r19._cva.readonly)(\"displayFn\", ctx_r19._displayFn);\n    i0.ɵɵattribute(\"aria-label\", ctx_r19._cva.ariaLabel)(\"aria-labelledby\", ctx_r19._cva.ariaLabelledBy)(\"aria-autocomplete\", ctx_r19.autoComplete && !ctx_r19.mobile ? \"list\" : null)(\"aria-owns\", ctx_r19.autoComplete && !ctx_r19.mobile ? ctx_r19._cva.id + \"-result\" : null)(\"aria-haspopup\", ctx_r19.autoComplete && !ctx_r19.mobile)(\"aria-expanded\", ctx_r19.isOpen)(\"aria-readonly\", ctx_r19._cva.readonly)(\"aria-required\", ctx_r19._cva.required);\n  }\n}\nfunction MultiComboboxComponent_ng_template_3_fd_form_message_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"fd-form-message\", 22);\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"type\", ctx_r20._cva.state)(\"innerHtml\", ctx_r20._cva.stateMessage, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction MultiComboboxComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-form-input-message-group\")(1, \"fd-input-group\", 12, 13);\n    i0.ɵɵlistener(\"addOnButtonClicked\", function MultiComboboxComponent_ng_template_3_Template_fd_input_group_addOnButtonClicked_1_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r35._addOnClicked($event));\n    })(\"click\", function MultiComboboxComponent_ng_template_3_Template_fd_input_group_click_1_listener() {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r37.mobile && !ctx_r37.isOpen && ctx_r37._onPrimaryButtonClick(false));\n    })(\"keydown\", function MultiComboboxComponent_ng_template_3_Template_fd_input_group_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r38._navigateByTokens($event));\n    });\n    i0.ɵɵpipe(3, \"fdTranslate\");\n    i0.ɵɵpipe(4, \"fdTranslate\");\n    i0.ɵɵtemplate(5, MultiComboboxComponent_ng_template_3_fd_tokenizer_5_Template, 5, 20, \"fd-tokenizer\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, MultiComboboxComponent_ng_template_3_fd_form_message_6_Template, 1, 2, \"fd-form-message\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r3._cva.id + \"-input-group-container\")(\"state\", ctx_r3._cva.state)(\"buttonFocusable\", ctx_r3.buttonFocusable)(\"button\", !ctx_r3._cva.readonly)(\"glyph\", !ctx_r3._cva.readonly ? \"navigation-down-arrow\" : \" \")(\"isControl\", true)(\"disabled\", ctx_r3._cva.disabled || ctx_r3._cva.readonly)(\"isExpanded\", !ctx_r3.mobile && ctx_r3.isOpen && ctx_r3._suggestions.length > 0)(\"glyphAriaLabel\", ctx_r3._cva.ariaLabel || i0.ɵɵpipeBind1(3, 14, \"platformMultiCombobox.inputGlyphAriaLabel\"))(\"iconTitle\", ctx_r3.addonIconTitle || i0.ɵɵpipeBind1(4, 16, \"platformMultiCombobox.inputGlyphAriaLabel\"));\n    i0.ɵɵattribute(\"aria-disabled\", ctx_r3._cva.disabled || ctx_r3._cva.readonly)(\"aria-readonly\", ctx_r3._cva.readonly);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3._selectedSuggestions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.mobile && ctx_r3.isOpen ? false : !!ctx_r3._cva.stateMessage);\n  }\n}\nfunction MultiComboboxComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-input-group\", 23)(1, \"input\", 24);\n    i0.ɵɵlistener(\"onComplete\", function MultiComboboxComponent_ng_template_5_Template_input_onComplete_1_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r39._onCompleteTerm($event));\n    })(\"keydown\", function MultiComboboxComponent_ng_template_5_Template_input_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r41._onInputKeydownHandler($event));\n    })(\"ngModelChange\", function MultiComboboxComponent_ng_template_5_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r42 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r42.inputText = $event);\n    })(\"ngModelChange\", function MultiComboboxComponent_ng_template_5_Template_input_ngModelChange_1_listener() {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43._searchTermChanged());\n    })(\"focus\", function MultiComboboxComponent_ng_template_5_Template_input_focus_1_listener() {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r44 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r44._cva.onTouched());\n    })(\"blur\", function MultiComboboxComponent_ng_template_5_Template_input_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r45 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(!ctx_r45.mobile && ctx_r45._onBlur($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r5._cva.id + \"-input-group-container\")(\"state\", ctx_r5._cva.state)(\"buttonFocusable\", false)(\"isControl\", true)(\"disabled\", ctx_r5._cva.disabled || ctx_r5._cva.readonly)(\"isExpanded\", !ctx_r5.mobile && ctx_r5.isOpen && ctx_r5._suggestions.length > 0)(\"glyphAriaLabel\", ctx_r5._cva.ariaLabel);\n    i0.ɵɵattribute(\"aria-disabled\", ctx_r5._cva.disabled || ctx_r5._cva.readonly)(\"aria-readonly\", ctx_r5._cva.readonly);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", ctx_r5._suggestions)(\"inputText\", ctx_r5.inputText)(\"id\", ctx_r5._cva.id)(\"name\", ctx_r5._cva.name)(\"disabled\", ctx_r5._cva.disabled)(\"ngModel\", ctx_r5.inputText)(\"placeholder\", ctx_r5._cva.placeholder)(\"readonly\", ctx_r5._cva.readonly)(\"displayFn\", ctx_r5._displayFn);\n    i0.ɵɵattribute(\"aria-label\", ctx_r5._cva.ariaLabel)(\"aria-labelledby\", ctx_r5._cva.ariaLabelledBy)(\"aria-autocomplete\", ctx_r5.autoComplete && !ctx_r5.mobile ? \"list\" : null)(\"aria-owns\", ctx_r5.autoComplete && !ctx_r5.mobile ? ctx_r5._cva.id + \"-result\" : null)(\"aria-haspopup\", ctx_r5.autoComplete && !ctx_r5.mobile)(\"aria-expanded\", ctx_r5.isOpen)(\"aria-readonly\", ctx_r5._cva.readonly);\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_fd_form_message_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"fd-form-message\", 22);\n  }\n  if (rf & 2) {\n    const ctx_r46 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"type\", ctx_r46._cva.state)(\"innerHtml\", ctx_r46._cva.stateMessage, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 29)(2, \"span\", 30);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const group_r50 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(group_r50.label);\n  }\n}\nconst _c6 = function (a0) {\n  return {\n    label: a0\n  };\n};\nconst _c7 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 31);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const group_r50 = i0.ɵɵnextContext().$implicit;\n    const ctx_r52 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r52.groupItemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c7, i0.ɵɵpureFunction1(2, _c6, group_r50.label)));\n  }\n}\nconst _c8 = function (a0, a1) {\n  return {\n    optionItem: a0,\n    index: a1\n  };\n};\nfunction MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r59 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 32);\n    i0.ɵɵlistener(\"click\", function MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_li_3_Template_li_click_0_listener() {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r58 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(!ctx_r58.mobile && ctx_r58.close());\n    })(\"keyDown\", function MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_li_3_Template_li_keyDown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r59);\n      const i_r57 = restoredCtx.index;\n      const ctx_r60 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r60._onItemKeyDownHandler($event, i_r57));\n    });\n    i0.ɵɵelementStart(1, \"fd-checkbox\", 33);\n    i0.ɵɵlistener(\"click\", function MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_li_3_Template_fd_checkbox_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r59);\n      const i_r57 = restoredCtx.index;\n      const ctx_r61 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r61._onOptionCheckboxClicked($event, i_r57));\n    })(\"ngModelChange\", function MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_li_3_Template_fd_checkbox_ngModelChange_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r59);\n      const optionItem_r56 = restoredCtx.$implicit;\n      const ctx_r62 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r62._toggleSelection(optionItem_r56));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainer(2, 31);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const optionItem_r56 = ctx.$implicit;\n    const i_r57 = ctx.index;\n    i0.ɵɵnextContext(4);\n    const _r8 = i0.ɵɵreference(10);\n    i0.ɵɵproperty(\"tabindex\", 0)(\"selected\", !!optionItem_r56.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", optionItem_r56.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(5, _c8, optionItem_r56, i_r57));\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_ng_container_1_Template, 4, 1, \"ng-container\", 26);\n    i0.ɵɵtemplate(2, MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_ng_container_2_Template, 2, 6, \"ng-container\", 26);\n    i0.ɵɵtemplate(3, MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_li_3_Template, 3, 8, \"li\", 28);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const group_r50 = ctx.$implicit;\n    const ctx_r49 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r49.groupItemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r49.groupItemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", group_r50.children);\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_7_ng_container_3_ng_container_1_Template, 4, 3, \"ng-container\", 27);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r47 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r47._suggestions);\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_ng_container_4_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r67 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 32);\n    i0.ɵɵlistener(\"click\", function MultiComboboxComponent_ng_template_7_ng_container_4_li_1_Template_li_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r67);\n      const i_r65 = restoredCtx.index;\n      const ctx_r66 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(!ctx_r66.mobile && ctx_r66._onOptionClicked($event, i_r65));\n    })(\"keyDown\", function MultiComboboxComponent_ng_template_7_ng_container_4_li_1_Template_li_keyDown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r67);\n      const i_r65 = restoredCtx.index;\n      const ctx_r68 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r68._onItemKeyDownHandler($event, i_r65));\n    });\n    i0.ɵɵelementStart(1, \"fd-checkbox\", 33);\n    i0.ɵɵlistener(\"click\", function MultiComboboxComponent_ng_template_7_ng_container_4_li_1_Template_fd_checkbox_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r67);\n      const i_r65 = restoredCtx.index;\n      const ctx_r69 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r69._onOptionCheckboxClicked($event, i_r65));\n    })(\"ngModelChange\", function MultiComboboxComponent_ng_template_7_ng_container_4_li_1_Template_fd_checkbox_ngModelChange_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r67);\n      const optionItem_r64 = restoredCtx.$implicit;\n      const ctx_r70 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r70._toggleSelection(optionItem_r64));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainer(2, 31);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const optionItem_r64 = ctx.$implicit;\n    const i_r65 = ctx.index;\n    i0.ɵɵnextContext(3);\n    const _r8 = i0.ɵɵreference(10);\n    i0.ɵɵproperty(\"tabindex\", 0)(\"selected\", !!optionItem_r64.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", optionItem_r64.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(5, _c8, optionItem_r64, i_r65));\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_7_ng_container_4_li_1_Template, 3, 8, \"li\", 28);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r48 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r48._suggestions);\n  }\n}\nfunction MultiComboboxComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r72 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 25);\n    i0.ɵɵlistener(\"focusEscapeList\", function MultiComboboxComponent_ng_template_7_Template_ul_focusEscapeList_0_listener($event) {\n      i0.ɵɵrestoreView(_r72);\n      const ctx_r71 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r71._handleListFocusEscape($event));\n    });\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_7_fd_form_message_1_Template, 1, 2, \"fd-form-message\", 15);\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵtemplate(3, MultiComboboxComponent_ng_template_7_ng_container_3_Template, 2, 1, \"ng-container\", 26);\n    i0.ɵɵtemplate(4, MultiComboboxComponent_ng_template_7_ng_container_4_Template, 2, 1, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"max-height\", !ctx_r7.mobile && ctx_r7.maxHeight)(\"min-width\", !ctx_r7.mobile && ctx_r7.minWidth + \"px\")(\"max-width\", ctx_r7.autoResize && ctx_r7.maxWidth + \"px\");\n    i0.ɵɵproperty(\"dropdownMode\", true)(\"id\", ctx_r7._cva.id + \"-result\");\n    i0.ɵɵattribute(\"aria-labelledby\", ctx_r7._cva.id + \"-search\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !!ctx_r7._cva.stateMessage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isGroup);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isGroup);\n  }\n}\nconst _c9 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    index: a1\n  };\n};\nfunction MultiComboboxComponent_ng_template_9_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 31);\n  }\n  if (rf & 2) {\n    const ctx_r77 = i0.ɵɵnextContext();\n    const optionItem_r73 = ctx_r77.optionItem;\n    const index_r74 = ctx_r77.index;\n    const ctx_r75 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r75.selectedItemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c9, optionItem_r73.value, index_r74));\n  }\n}\nconst _c10 = function (a0) {\n  return {\n    optionItem: a0\n  };\n};\nfunction MultiComboboxComponent_ng_template_9_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 31)(2, 31);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r78 = i0.ɵɵnextContext();\n    const optionItem_r73 = ctx_r78.optionItem;\n    const index_r74 = ctx_r78.index;\n    i0.ɵɵnextContext();\n    const _r10 = i0.ɵɵreference(12);\n    const _r12 = i0.ɵɵreference(14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r10)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(4, _c8, optionItem_r73, index_r74));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r12)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(7, _c10, optionItem_r73));\n  }\n}\nfunction MultiComboboxComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MultiComboboxComponent_ng_template_9_ng_container_0_Template, 1, 5, \"ng-container\", 34);\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_9_ng_container_1_Template, 3, 9, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const optionItem_r73 = ctx.optionItem;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", optionItem_r73.selected && !!ctx_r9.selectedItemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(optionItem_r73.selected && ctx_r9.selectedItemTemplate));\n  }\n}\nfunction MultiComboboxComponent_ng_template_11_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 35);\n    i0.ɵɵpipe(2, \"highlight\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const optionItem_r79 = i0.ɵɵnextContext().optionItem;\n    const ctx_r81 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 2, optionItem_r79.label, ctx_r81.inputText), i0.ɵɵsanitizeHtml);\n    i0.ɵɵattribute(\"title\", optionItem_r79.label);\n  }\n}\nfunction MultiComboboxComponent_ng_template_11_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 31);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r84 = i0.ɵɵnextContext();\n    const optionItem_r79 = ctx_r84.optionItem;\n    const index_r80 = ctx_r84.index;\n    const ctx_r82 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r82.optionItemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c9, optionItem_r79.value, index_r80));\n  }\n}\nfunction MultiComboboxComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MultiComboboxComponent_ng_template_11_ng_container_0_Template, 3, 5, \"ng-container\", 26);\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_11_ng_container_1_Template, 2, 5, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r11.optionItemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r11.optionItemTemplate);\n  }\n}\nfunction MultiComboboxComponent_ng_template_13_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 36);\n    i0.ɵɵpipe(2, \"highlight\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const optionItem_r85 = i0.ɵɵnextContext(2).optionItem;\n    const ctx_r87 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"text-align\", ctx_r87.secondaryTextAlignment);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 4, optionItem_r85.secondaryText, ctx_r87.inputText), i0.ɵɵsanitizeHtml);\n    i0.ɵɵattribute(\"title\", optionItem_r85.secondaryText);\n  }\n}\nfunction MultiComboboxComponent_ng_template_13_ng_container_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 31);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const optionItem_r85 = i0.ɵɵnextContext(2).optionItem;\n    const ctx_r88 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r88.secondaryItemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, optionItem_r85.value));\n  }\n}\nfunction MultiComboboxComponent_ng_template_13_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, MultiComboboxComponent_ng_template_13_ng_container_0_ng_container_1_Template, 3, 7, \"ng-container\", 26);\n    i0.ɵɵtemplate(2, MultiComboboxComponent_ng_template_13_ng_container_0_ng_container_2_Template, 2, 4, \"ng-container\", 26);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r86 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r86.secondaryItemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r86.secondaryItemTemplate);\n  }\n}\nfunction MultiComboboxComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MultiComboboxComponent_ng_template_13_ng_container_0_Template, 3, 2, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.showSecondaryText);\n  }\n}\nconst _c11 = [\"*\", \"*\"];\nfunction lookupValue(item, lookupKey) {\n  if (isSelectItem(item)) {\n    return lookupKey && item ? item.value[lookupKey] : item.value;\n  } else {\n    return lookupKey && item ? item[lookupKey] : item;\n  }\n}\n/** @hidden */\nfunction displayValue(item, displayKey) {\n  if (isSelectItem(item)) {\n    return item.label;\n  } else if (isJsObject(item) && displayKey) {\n    const currentItem = objectGet(item, displayKey);\n    return isFunction(currentItem) ? currentItem() : currentItem;\n  } else {\n    return item;\n  }\n}\n/** @hidden */\nfunction objectGet(obj, is) {\n  if (!isJsObject(obj)) {\n    return obj;\n  } else if (isString(is)) {\n    return objectGet(obj, is.split('.'));\n  } else if (!is?.length) {\n    return obj;\n  } else {\n    return objectGet(obj[is[0]], is.slice(1));\n  }\n}\n/** @hidden */\nfunction getSelectItemByInputValue(suggestions, needleValue) {\n  return suggestions.find(value => value.label === needleValue);\n}\n/** @hidden\n *  Map grouped values to array. */\nfunction flattenGroups(items) {\n  return items.reduce((result, item) => result.concat(item.children ?? []), []);\n}\n/** @hidden */\nfunction getTokenIndexByIdlOrValue(item, suggestions) {\n  return suggestions.findIndex(token => token.id === item.id || equal(token.value, item.value));\n}\nclass MultiComboboxSelectionChangeEvent {\n  /**\n   * Multi Combobox selection change event\n   * @param source Multi Combobox component\n   * @param selectedItems Selected items\n   */\n  constructor(source, selectedItems // Contains selected items\n  ) {\n    this.source = source;\n    this.selectedItems = selectedItems;\n  }\n}\n\n// import { PlatformConfig } from '@fundamental-ngx/platform/shared';\n/**\n * Default options for Multi-Combobox\n */\nlet MultiComboboxConfig = /*#__PURE__*/(() => {\n  class MultiComboboxConfig {\n    constructor() {\n      /**\n       * String matching strategy for typeahead list. Default: 'starts with per term'\n       */\n      this.matchingStrategy = MatchingStrategy.STARTS_WITH_PER_TERM;\n      /**\n       * Maps data providers\n       */\n      this.providers = new Map();\n    }\n  }\n  MultiComboboxConfig.ɵfac = function MultiComboboxConfig_Factory(t) {\n    return new (t || MultiComboboxConfig)();\n  };\n  MultiComboboxConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MultiComboboxConfig,\n    factory: MultiComboboxConfig.ɵfac,\n    providedIn: 'root'\n  });\n  return MultiComboboxConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BaseMultiCombobox = /*#__PURE__*/(() => {\n  class BaseMultiCombobox {\n    constructor() {\n      // Injection section\n      /** @hidden */\n      this.cvaControl = inject(CvaControl);\n      /** @hidden */\n      this.dataSourceDirective = inject(DataSourceDirective);\n      /** Control Value Accessor directive for forms support. */\n      this._cva = inject(CvaDirective, {\n        self: true\n      });\n      /** Multi combobox config. */\n      this._multiComboboxConfig = inject(MultiComboboxConfig, {\n        optional: true\n      });\n      /** Content Density Observer */\n      this.contentDensityObserver = inject(ContentDensityObserver);\n      /** @Hidden */\n      this._elmRef = inject(ElementRef);\n      /** @hidden */\n      this._cd = inject(ChangeDetectorRef);\n      /** @hidden */\n      this._mapLimit = inject(FD_MAP_LIMIT);\n      /** @Hidden */\n      this._destroyed$ = inject(DestroyedService);\n      /**\n       * @hidden\n       * List of selected suggestions\n       */\n      this._selectedSuggestions = [];\n      /**\n       * @hidden\n       * Grouped suggestions mapped to array.\n       */\n      this._flatSuggestions = [];\n      /** @hidden */\n      this._fullFlatSuggestions = [];\n      /** @hidden */\n      this.selectedShown$ = new BehaviorSubject(false);\n      /** @hidden */\n      this._matchingStrategy = this._multiComboboxConfig?.matchingStrategy ?? MatchingStrategy.CONTAINS;\n      /** @hidden */\n      this._dsSubscription = null;\n      /** @hidden */\n      this._element = this._elmRef.nativeElement;\n      /**\n       * @hidden\n       * Keys, that won't trigger the popover's open state, when dispatched on search input.\n       */\n      this._nonOpeningKeys = [BACKSPACE, ESCAPE, ENTER, CONTROL, TAB, SHIFT, UP_ARROW, RIGHT_ARROW, DOWN_ARROW, LEFT_ARROW, ALT];\n      /** @hidden */\n      this._rangeSelector = new RangeSelector();\n      /** @hidden */\n      this._dataSourceChanged = false;\n      /** @hidden */\n      this._displayFn = value => displayValue(value, this.displayKey);\n      /** @hidden */\n      this._secondaryFn = value => {\n        if (isOptionItem(value)) {\n          return value.secondaryText ?? '';\n        } else if (isJsObject(value) && this.secondaryKey) {\n          const currentItem = objectGet(value, this.secondaryKey);\n          return isFunction(currentItem) ? currentItem() : currentItem;\n        } else {\n          return value;\n        }\n      };\n    }\n    /** @hidden */\n    writeValue(value) {\n      this.selectedItems = coerceArraySafe(value);\n      this._cva.writeValue(this.selectedItems);\n      this._setSelectedSuggestions();\n      this._emitChangeEvent();\n    }\n    /**\n     * Used to change the value of a control.\n     * @param value the value to be applied\n     * @param emitOnChange whether to emit \"onChange\" event.\n     * Should be \"false\", if the change is made programmatically (internally) by the control, \"true\" otherwise\n     */\n    setValue(value, emitOnChange = true) {\n      this.selectedItems = coerceArraySafe(value);\n      this._cva.setValue(this.selectedItems, emitOnChange);\n      this._setSelectedSuggestions();\n      this._emitChangeEvent();\n    }\n    /**\n     * @hidden\n     * Method to emit change event\n     */\n    _emitChangeEvent() {\n      const event = new MultiComboboxSelectionChangeEvent(this, this.selectedItems);\n      this.selectionChange.emit(event);\n    }\n    /** @hidden */\n    _setSelectedSuggestions() {\n      this._selectedSuggestions = [];\n      if (!this.selectedItems?.length) {\n        return;\n      }\n      for (let i = 0; i <= this.selectedItems.length; i++) {\n        const selectedItem = this.selectedItems[i];\n        const idx = this._fullFlatSuggestions.findIndex(item => item.label === selectedItem || item.value === selectedItem);\n        if (idx !== -1) {\n          this._selectedSuggestions.push(this._fullFlatSuggestions[idx]);\n          this._fullFlatSuggestions[idx].selected = true;\n        }\n      }\n      this._cd.detectChanges();\n    }\n    /**\n     * Convert original data to SelectableOptionItems Interface\n     * @hidden\n     */\n    _convertToOptionItems(items) {\n      const item = items[0];\n      const elementTypeIsOptionItem = isSelectableOptionItem(item);\n      if (elementTypeIsOptionItem) {\n        return items;\n      }\n      const elementTypeIsObject = isJsObject(item);\n      if (elementTypeIsObject) {\n        return this._convertObjectsToOptionItems(items);\n      }\n      const elementTypeIsString = isString(item);\n      if (elementTypeIsString) {\n        return this._convertPrimitiveToOptionItems(items);\n      }\n      return [];\n    }\n    /**\n     * Convert data to SelectableOptionItems Interface\n     * @hidden\n     */\n    _convertObjectsToOptionItems(items) {\n      if (this.isGroup) {\n        return this._convertObjectsToGroupOptionItems(items);\n      } else if (this.showSecondaryText && this.secondaryKey) {\n        return this._convertObjectsToSecondaryOptionItems(items);\n      } else {\n        return this._convertObjectsToDefaultOptionItems(items);\n      }\n    }\n    /**\n     * Convert object[] data to Group OptionItems Interface\n     * @hidden\n     */\n    _convertObjectsToGroupOptionItems(items) {\n      const group = {};\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        const keyValue = item[this.groupKey];\n        if (!keyValue) {\n          continue;\n        }\n        if (!group[keyValue]) {\n          group[keyValue] = [];\n        }\n        group[keyValue].push(item);\n      }\n      return Object.keys(group).map(key => {\n        const selectItem = {\n          label: key,\n          value: null,\n          isGroup: true\n        };\n        const currentGroup = group[key];\n        if (this.showSecondaryText && this.secondaryKey) {\n          selectItem.children = this._convertObjectsToSecondaryOptionItems(currentGroup);\n        } else {\n          selectItem.children = this._convertObjectsToDefaultOptionItems(currentGroup);\n        }\n        return selectItem;\n      });\n    }\n    /**\n     * Convert T[] data to Secondary SelectableOptionItems<T> Interface\n     * @hidden\n     */\n    _convertObjectsToSecondaryOptionItems(items) {\n      const selectItems = [];\n      for (let i = 0; i < items.length; i++) {\n        const value = items[i];\n        selectItems.push({\n          label: displayValue(value, this.displayKey),\n          id: lookupValue(value, this.lookupKey),\n          secondaryText: objectGet(value, this.secondaryKey),\n          value,\n          selected: this.selectedItems?.includes(value) || false\n        });\n      }\n      return selectItems;\n    }\n    /**\n     * Convert Primitive data(Boolean, String, Number) to SelectableOptionItems Interface\n     * @hidden\n     */\n    _convertPrimitiveToOptionItems(items) {\n      const selectItems = [];\n      for (let i = 0; i < items.length; i++) {\n        const value = items[i];\n        selectItems.push({\n          label: value,\n          id: lookupValue(value, this.lookupKey),\n          value,\n          selected: this.selectedItems?.includes(value) || false\n        });\n      }\n      return selectItems;\n    }\n    /**\n     * Convert T[] to SelectableOptionItems<T> Interface (Default)\n     * @hidden\n     */\n    _convertObjectsToDefaultOptionItems(items) {\n      const selectItems = [];\n      for (let i = 0; i < items.length; i++) {\n        const value = items[i];\n        selectItems.push({\n          label: displayValue(value, this.displayKey),\n          id: lookupValue(value, this.lookupKey),\n          value,\n          selected: this.selectedItems?.includes(value) || false\n        });\n      }\n      return selectItems;\n    }\n    /** @hidden */\n    _setInvalidEntry() {\n      if (this._previousState || this._previousStateMessage) {\n        return;\n      }\n      this._previousState = this._cva.state;\n      this._cva.state = 'error';\n      this._previousStateMessage = this._cva.stateMessage;\n      this._cva.stateMessage = this.invalidEntryMessage;\n      this._cd.markForCheck();\n    }\n    /** @hidden */\n    _unsetInvalidEntry() {\n      this._cva.state = this._previousState;\n      this._previousState = undefined;\n      this._cva.stateMessage = this._previousStateMessage;\n      this._previousStateMessage = undefined;\n      this._cd.markForCheck();\n    }\n    /** @hidden */\n    _focusToSearchField() {\n      this.searchInputElement?.nativeElement.focus();\n    }\n    /** @hidden */\n    _mapAndUpdateModel() {\n      const selectedItems = this._selectedSuggestions.map(({\n        value\n      }) => value);\n      const shouldEmitChangeEvent = !equal(this.selectedItems, selectedItems);\n      if (!shouldEmitChangeEvent) {\n        return;\n      }\n      this.writeValue(selectedItems);\n      this._cva.onChange(selectedItems);\n      this._emitChangeEvent();\n    }\n    /**\n     * @hidden\n     * Prepares the data stream and subscribes to it.\n     */\n    _openDataStream() {\n      const dataSourceProvider = this.dataSourceDirective.dataSourceProvider;\n      if (!dataSourceProvider) {\n        throw new Error(`[dataSource] source did not match an array, Observable, or DataSource`);\n      }\n      dataSourceProvider.limitless = this.limitless;\n      dataSourceProvider.dataProvider.setLookupKey(this.lookupKey);\n      const matchingBy = {\n        firstBy: this._displayFn\n      };\n      if (this.secondaryKey) {\n        matchingBy.secondaryBy = this._secondaryFn;\n      }\n      dataSourceProvider.dataProvider.setMatchingBy(matchingBy);\n      dataSourceProvider.dataProvider.setMatchingStrategy(this._matchingStrategy);\n      // initial data fetch\n      const map = new Map();\n      map.set('query', '*');\n      if (!this.limitless) {\n        map.set('limit', this._mapLimit);\n      }\n      dataSourceProvider.match(map);\n      this._dsSubscription = new Subscription();\n      this._dsSubscription.add(this.dataSourceDirective.dataSourceProvider?.dataRequested.subscribe(this.dataRequested));\n      this._dsSubscription.add(this.dataSourceDirective.dataSourceProvider?.dataReceived.subscribe(this.dataReceived));\n      this.dataSourceDirective.dataSourceChanged.pipe(startWith(true), takeUntil(this._destroyed$)).subscribe(() => {\n        this._dataSourceChanged = true;\n      });\n      this.dataSourceDirective.dataChanged$.pipe(skip(0), takeUntil(this._destroyed$)).subscribe(data => {\n        if (data.length === 0) {\n          this._processingEmptyData();\n          return;\n        }\n        this._previousInputText = this.inputText;\n        this._parseDataSourceValue(data);\n        this._cva.stateChanges.next('initDataSource.open().');\n        this._cd.markForCheck();\n      });\n    }\n    /**\n     * Parses the data from the data stream and updates the model if needed.\n     * @param data array of objects from the data stream.\n     */\n    _parseDataSourceValue(data) {\n      this._convertDataSourceSuggestions(data);\n      const selectedSuggestionsLength = this._selectedSuggestions.length;\n      if (selectedSuggestionsLength > 0) {\n        for (let i = 0; i < selectedSuggestionsLength; i++) {\n          const selectedSuggestion = this._selectedSuggestions[i];\n          const idx = this._suggestions.findIndex(item => equal(item.value, selectedSuggestion.value));\n          if (idx !== -1) {\n            this._suggestions[idx].selected = true;\n          }\n        }\n      }\n      if (this._dataSourceChanged) {\n        this._flatSuggestions = this.isGroup ? flattenGroups(this._suggestions) : this._suggestions;\n        this._fullFlatSuggestions = this._flatSuggestions;\n        this._setSelectedSuggestions();\n        this._mapAndUpdateModel();\n        this._dataSourceChanged = false;\n      }\n    }\n    /**\n     * Transforms plain array into `SelectableOptionItem<T>`\n     * @param data\n     */\n    _convertDataSourceSuggestions(data) {\n      this._suggestions = this._convertToOptionItems(data).map(optionItem => {\n        const selectedElement = this._selectedSuggestions.find(selectedItem => selectedItem.id === optionItem.id);\n        if (selectedElement) {\n          optionItem.selected = selectedElement.selected;\n        }\n        return optionItem;\n      });\n    }\n    /** @hidden */\n    _processingEmptyData() {\n      this.inputText = this._previousInputText;\n      this._setInvalidEntry();\n      if (this._timerSub$) {\n        this._timerSub$.unsubscribe();\n      }\n      this._timerSub$ = timer(this.invalidEntryDisplayTime).subscribe(() => this._unsetInvalidEntry());\n      this._cd.detectChanges();\n    }\n  }\n  BaseMultiCombobox.ɵfac = function BaseMultiCombobox_Factory(t) {\n    return new (t || BaseMultiCombobox)();\n  };\n  BaseMultiCombobox.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseMultiCombobox\n  });\n  return BaseMultiCombobox;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst MULTI_COMBOBOX_COMPONENT = new InjectionToken('FdMultiComboboxInterface');\nlet MobileMultiComboboxComponent = /*#__PURE__*/(() => {\n  class MobileMultiComboboxComponent extends MobileModeBase {\n    /** @hidden */\n    constructor(elementRef, dialogService, multiComboboxComponent, mobileModes) {\n      super(elementRef, dialogService, multiComboboxComponent, MobileModeControl.MULTI_COMBOBOX, mobileModes);\n      /** @hidden\n       * For internal usage\n       * Control element, which will be rendered inside dialog.\n       * List element, which will be rendered inside dialog.\n       */\n      this.childContent = null;\n      /** @hidden */\n      this.selectedShown$ = this._component.selectedShown$;\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._listenOnMultiComboboxOpenChange();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      super.onDestroy();\n    }\n    /** @hidden */\n    showSelected() {\n      const isSelectedShown = this.selectedShown$.getValue();\n      if (isSelectedShown) {\n        this._component._searchTermChanged();\n        this.selectedShown$.next(false);\n        return;\n      }\n      this._component._moreClicked();\n    }\n    /** @hidden */\n    handleDismiss() {\n      this.dialogRef.dismiss();\n      this._component._dialogDismiss(this._selectedBackup);\n    }\n    /** @hidden */\n    handleApprove() {\n      this.dialogRef.close();\n      this._component._dialogApprove();\n    }\n    /** @hidden */\n    _toggleDialog(open) {\n      if (!open) {\n        return;\n      }\n      this._selectedBackup = this._component._selectedSuggestions?.length ? [...this._component._selectedSuggestions] : [];\n      if (!this._dialogService.hasOpenDialogs()) {\n        this._open();\n      }\n    }\n    /** @hidden */\n    _listenOnMultiComboboxOpenChange() {\n      this._component.openChange.pipe(takeUntil$1(this._onDestroy$)).subscribe(isOpen => this._toggleDialog(isOpen));\n    }\n    /** @hidden */\n    _open() {\n      this.dialogRef = this._dialogService.open(this.dialogTemplate, {\n        mobile: true,\n        ...this.dialogConfig,\n        backdropClickCloseable: false,\n        escKeyCloseable: false,\n        container: this._elementRef.nativeElement,\n        disablePaddings: true\n      });\n    }\n  }\n  MobileMultiComboboxComponent.ɵfac = function MobileMultiComboboxComponent_Factory(t) {\n    return new (t || MobileMultiComboboxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DialogService), i0.ɵɵdirectiveInject(MULTI_COMBOBOX_COMPONENT), i0.ɵɵdirectiveInject(MOBILE_MODE_CONFIG, 8));\n  };\n  MobileMultiComboboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MobileMultiComboboxComponent,\n    selectors: [[\"fd-mobile-multi-combobox\"]],\n    viewQuery: function MobileMultiComboboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialogTemplate = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"dialogTemplate\", \"\"], [3, \"dialogConfig\", \"dialogRef\"], [\"fd-title\", \"\", \"fd-dialog-title\", \"\", 3, \"innerText\", 4, \"ngIf\"], [\"fd-dialog-close-button\", \"\", 3, \"mobile\", \"click\", 4, \"ngIf\"], [\"fdkTemplate\", \"subheader\"], [4, \"ngTemplateOutlet\"], [\"fdType\", \"emphasized\", 3, \"label\", \"click\", 4, \"ngIf\"], [3, \"label\", \"click\", 4, \"ngIf\"], [\"fd-title\", \"\", \"fd-dialog-title\", \"\", 3, \"innerText\"], [\"fd-dialog-close-button\", \"\", 3, \"mobile\", \"click\"], [\"fd-bar-middle\", \"\"], [3, \"fullWidth\"], [\"fd-button\", \"\", \"glyph\", \"multiselect-all\", \"fdType\", \"emphasized\", \"class\", \"fd-margin-begin--tiny\", 3, \"title\", \"click\", 4, \"ngIf\"], [\"fd-button\", \"\", \"glyph\", \"multiselect-all\", \"fdType\", \"transparent\", \"class\", \"fd-margin-begin--tiny\", 3, \"title\", \"click\", 4, \"ngIf\"], [\"fd-button\", \"\", \"glyph\", \"multiselect-all\", \"fdType\", \"emphasized\", 1, \"fd-margin-begin--tiny\", 3, \"title\", \"click\"], [\"fd-button\", \"\", \"glyph\", \"multiselect-all\", \"fdType\", \"transparent\", 1, \"fd-margin-begin--tiny\", 3, \"title\", \"click\"], [\"fdType\", \"emphasized\", 3, \"label\", \"click\"], [3, \"label\", \"click\"]],\n    template: function MobileMultiComboboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MobileMultiComboboxComponent_ng_template_0_Template, 10, 7, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgTemplateOutlet, i3.BarMiddleDirective, i3.BarElementDirective, i3.ButtonBarComponent, i1.DialogComponent, i1.DialogBodyComponent, i1.DialogFooterComponent, i1.DialogHeaderComponent, i1.DialogCloseButtonComponent, i1.DialogTitleDirective, i4.TitleComponent, i1$1.TemplateDirective, i6.ButtonComponent, i2.AsyncPipe, i7.FdTranslatePipe]\n  });\n  return MobileMultiComboboxComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MobileMultiComboboxModule = /*#__PURE__*/(() => {\n  class MobileMultiComboboxModule {}\n  MobileMultiComboboxModule.ɵfac = function MobileMultiComboboxModule_Factory(t) {\n    return new (t || MobileMultiComboboxModule)();\n  };\n  MobileMultiComboboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MobileMultiComboboxModule\n  });\n  MobileMultiComboboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, BarModule, DialogModule, ButtonModule, CommonModule, I18nModule]\n  });\n  return MobileMultiComboboxModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass FdMultiComboBoxDataSource extends BaseDataSource {\n  /** @hidden */\n  constructor(dataProvider) {\n    super(dataProvider);\n    this.dataProvider = dataProvider;\n    /** @hidden */\n    this.limitless = false;\n  }\n}\nclass ArrayMultiComboBoxDataSource extends FdMultiComboBoxDataSource {\n  /** @hidden */\n  constructor(data) {\n    super(new DataProvider(data));\n  }\n}\nclass ObservableMultiComboBoxDataSource extends FdMultiComboBoxDataSource {\n  /** @hidden */\n  constructor(data) {\n    super(new DataProvider(data));\n  }\n}\nclass MultiComboboxDataSourceParser {\n  /**\n   * Transforms plain array or observable into DataSource class.\n   * @param source\n   */\n  parse(source) {\n    if (isDataSource(source)) {\n      return source;\n    }\n    if (Array.isArray(source)) {\n      return new ArrayMultiComboBoxDataSource(source);\n    }\n    if (isObservable(source)) {\n      return new ObservableMultiComboBoxDataSource(source);\n    }\n    return undefined;\n  }\n}\nconst FD_MAP_LIMIT = new InjectionToken('Map limit≥', {\n  factory: () => 12\n});\nlet MultiComboboxComponent = /*#__PURE__*/(() => {\n  class MultiComboboxComponent extends BaseMultiCombobox {\n    /** Provides selected items. */\n    set selectedItems(value) {\n      this._selectedItems = coerceArraySafe(value);\n    }\n    get selectedItems() {\n      return this._selectedItems;\n    }\n    /** Value of the multi combobox */\n    set value(value) {\n      this.setValue(value, true);\n    }\n    get value() {\n      return this._cva.value;\n    }\n    /** Set the input text of the input. */\n    set inputText(value) {\n      this._inputTextValue = value;\n      this._cva.onTouched();\n    }\n    /** Get the input text of the input. */\n    get inputText() {\n      return this._inputTextValue || '';\n    }\n    /** Is empty search field. */\n    get isEmptyValue() {\n      return this.inputText.trim().length === 0;\n    }\n    /** @hidden */\n    get isGroup() {\n      return !!(this.group && this.groupKey);\n    }\n    /** @hidden */\n    constructor(_injector, _viewContainerRef, _dynamicComponentService) {\n      super();\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._dynamicComponentService = _dynamicComponentService;\n      /** @hidden */\n      this._selectedItems = [];\n      /** Provides maximum height for the optionPanel. */\n      this.maxHeight = '250px';\n      /**\n       * Whether AddOn Button should be focusable\n       * @default false\n       */\n      this.buttonFocusable = false;\n      /** Whether the autocomplete should be enabled; Enabled by default. */\n      this.autoComplete = true;\n      /** Whether the multi-combobox should be built on mobile mode. */\n      this.mobile = false;\n      /** Tells the multi-combobox if we need to group items. */\n      this.group = false;\n      /** Show the second column (applicable for two columns layout). */\n      this.showSecondaryText = false;\n      /** Horizontally align text inside the second column (applicable for two columns layout). */\n      this.secondaryTextAlignment = 'right';\n      /** Turns on/off Adjustable Width feature. */\n      this.autoResize = true;\n      /** Whether to open the dropdown when the addon button is clicked. */\n      this.openDropdownOnAddOnClicked = true;\n      /**\n       * Preset options for the Select body width, whatever is chosen, the body has a 600px limit.\n       * * `at-least` will apply a minimum width to the body equivalent to the width of the control. - Default\n       * * `equal` will apply a width to the body equivalent to the width of the control.\n       * * 'fit-content' will apply width needed to properly display items inside, independent of control.\n       */\n      this.fillControlMode = 'at-least';\n      /** Sets invalid entry message. */\n      this.invalidEntryMessage = 'Invalid entry';\n      /** Time in ms for how long message of invalid entry should be displayed. */\n      this.invalidEntryDisplayTime = 3000;\n      /** Event emitted when item is selected. */\n      this.selectionChange = new EventEmitter();\n      /** @hidden Emits event when the menu is opened/closed. */\n      this.isOpenChange = new EventEmitter();\n      /** Emits event when the addon button is clicked. */\n      this.addOnButtonClicked = new EventEmitter();\n      /** Event emitted when data loading is started. */\n      // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n      this.dataRequested = new EventEmitter();\n      /** Event emitted when data loading is finished. */\n      // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n      this.dataReceived = new EventEmitter();\n      /** @hidden */\n      this._contentDensity = this._multiComboboxConfig?.contentDensity ?? 'cozy';\n      /** Whether the Multi Input is opened. */\n      this.isOpen = false;\n      /**\n       * @hidden\n       * Need for opening mobile version\n       */\n      this.openChange = new Subject();\n      this.contentDensityObserver.subscribe();\n    }\n    /** @hidden */\n    ngOnInit() {\n      this.cvaControl.listenToChanges();\n      this._openDataStream();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.mobile) {\n          yield _this._setUpMobileMode();\n        }\n        _this._assignCustomTemplates();\n        _this._initWindowResize();\n        _this._tokenizer._showOverflowPopover = false;\n      })();\n    }\n    /** @hidden */\n    _toggleSelection(item) {\n      const idx = getTokenIndexByIdlOrValue(item, this._selectedSuggestions);\n      if (idx === -1) {\n        this._selectedSuggestions.push(item);\n      } else {\n        this._selectedSuggestions.splice(idx, 1);\n      }\n      item.selected = !item.selected;\n      this._propagateChange();\n      if (!this._selectedSuggestions.length) {\n        this._focusToSearchField();\n      }\n      this._cd.detectChanges();\n    }\n    /** @hidden */\n    _onOptionCheckboxClicked(event, index) {\n      event.stopPropagation();\n      this._onListElementClicked(event, index);\n    }\n    /** @hidden */\n    _onCompleteTerm(event) {\n      if (event.forceClose) {\n        this._toggleSelectionByInputText(event.term);\n        this.close();\n      }\n    }\n    /** @hidden */\n    _toggleSelectionByInputText(text = this.inputText) {\n      const item = getSelectItemByInputValue(this._fullFlatSuggestions, text);\n      if (item) {\n        this._toggleSelection(item);\n        this.inputText = '';\n      }\n    }\n    /**\n     * @hidden\n     * Method that selects all possible options.\n     * *select* attribute – if *true* select all, if *false* unselect all\n     * */\n    _handleSelectAllItems(select) {\n      this._flatSuggestions.forEach(item => item.selected = select);\n      this._selectedSuggestions = select ? [...this._flatSuggestions] : [];\n      this._rangeSelector.reset();\n      this._propagateChange();\n    }\n    /** @hidden */\n    _navigateByTokens(event) {\n      if (KeyUtil.isKeyCode(event, [DOWN_ARROW, UP_ARROW]) && this.isOpen) {\n        this.listComponent.items?.first.focus();\n      }\n    }\n    /** @hidden */\n    _removeToken(token, event) {\n      if (event) {\n        event.preventDefault();\n      }\n      const optionItem = this._suggestions.find(s => s.value === token.value);\n      if (optionItem) {\n        this._toggleSelection(optionItem);\n        this._rangeSelector.reset();\n      }\n    }\n    /** @hidden */\n    _moreClicked() {\n      this._suggestions = this.isGroup ? this._convertObjectsToGroupOptionItems(this._selectedSuggestions.map(({\n        value\n      }) => value)) : this._suggestions.filter(value => this._selectedSuggestions.some(item => equal(item.value, value.value)));\n      this._showList(true);\n      this.selectedShown$.next(true);\n      this._cd.markForCheck();\n    }\n    /** @hidden */\n    _onBlur(event) {\n      const target = event.relatedTarget;\n      if (target) {\n        const isList = !!target.closest('.fd-multi-combobox__list-container');\n        if (isList) {\n          return;\n        }\n        this._showList(false);\n        this.inputText = '';\n      }\n    }\n    /**\n     * @hidden\n     * Method to set input text as item label.\n     */\n    _setInputTextFromOptionItem(item) {\n      this.inputText = item.label;\n      if (this.mobile) {\n        return;\n      }\n      this._showList(false);\n    }\n    /** @hidden */\n    _onItemKeyDownHandler(event, index) {\n      if (KeyUtil.isKeyCode(event, ESCAPE)) {\n        this._focusToSearchField();\n        this.close();\n      } else if (event.shiftKey && KeyUtil.isKeyCode(event, TAB)) {\n        event.preventDefault();\n        this.listComponent?.setItemActive(index - 1);\n      } else if (KeyUtil.isKeyCode(event, TAB)) {\n        event.preventDefault();\n        this.listComponent?.setItemActive(index + 1);\n      } else if ((event.ctrlKey || event.metaKey) && event.shiftKey && KeyUtil.isKeyCode(event, A)) {\n        event.preventDefault();\n        this._handleSelectAllItems(false);\n      } else if ((event.ctrlKey || event.metaKey) && KeyUtil.isKeyCode(event, A)) {\n        event.preventDefault();\n        this._handleSelectAllItems(true);\n      } else if (KeyUtil.isKeyCode(event, ENTER)) {\n        if (!this.mobile) {\n          this.close();\n        }\n        this._rangeSelector.reset();\n      } else if (KeyUtil.isKeyCode(event, SPACE)) {\n        this._rangeSelector.reset();\n      }\n    }\n    /** @hidden */\n    _onOptionClicked(event, index) {\n      this._onListElementClicked(event, index);\n      this.close();\n    }\n    /**\n     * @hidden\n     * Handle dialog dismissing, closes popover and sets backup data.\n     */\n    _dialogDismiss(backup) {\n      this._selectedSuggestions = [...backup];\n      this.inputText = '';\n      this._showList(false);\n      this.selectedShown$.next(false);\n    }\n    /**\n     * @hidden\n     * Handle dialog approval, closes popover and propagates data changes.\n     */\n    _dialogApprove() {\n      this.inputText = '';\n      this._showList(false);\n      this._propagateChange(true);\n    }\n    /** @hidden */\n    _popoverOpenChangeHandle(isOpen) {\n      this.isOpen = isOpen;\n      this._rangeSelector.reset();\n    }\n    /** Opens the select popover body. */\n    open() {\n      this.isOpen = true;\n      this.isOpenChange.emit(this.isOpen);\n      this._cd.markForCheck();\n    }\n    /** Closes the select popover body. */\n    close() {\n      this._rangeSelector.reset();\n      this.selectedShown$.next(false);\n      this.inputText = '';\n      this._focusToSearchField();\n      this.isOpen = false;\n      this.isOpenChange.emit(this.isOpen);\n      this._cd.markForCheck();\n    }\n    /** @hidden */\n    _showList(isOpen) {\n      if (this.isOpen !== isOpen) {\n        this.isOpen = isOpen;\n        this._cva.onTouched();\n        this.openChange.next(isOpen);\n      }\n      if (!this.isOpen) {\n        this._searchTermChanged('');\n      }\n      this._cd.markForCheck();\n    }\n    /** @hidden */\n    _searchTermChanged(text = this.inputText) {\n      const map = new Map();\n      map.set('query', text);\n      if (!this.limitless) {\n        map.set('limit', this._mapLimit);\n      }\n      this.dataSourceDirective.dataSourceProvider?.match(map);\n      if (text) {\n        this.open();\n      }\n      this._cd.markForCheck();\n    }\n    /**\n     * Handle Click on Button\n     * @hidden\n     */\n    _onPrimaryButtonClick(isOpen) {\n      if (!isOpen) {\n        this._searchTermChanged('');\n      }\n      if (this.openDropdownOnAddOnClicked) {\n        this._showList(!isOpen);\n      } else if (this.isOpen) {\n        this._showList(false);\n      }\n      if (this.isOpen) {\n        this.searchInputElement?.nativeElement.focus();\n      }\n    }\n    /**\n     * Handle Keydown on Input\n     * @hidden\n     */\n    _onInputKeydownHandler(event) {\n      if (this._cva.readonly) {\n        return;\n      }\n      if (KeyUtil.isKeyCode(event, DOWN_ARROW)) {\n        event.preventDefault();\n        if (event.altKey) {\n          this._showList(true);\n        }\n        if (this.isOpen && this.listComponent) {\n          this.listComponent.setItemActive(0);\n        } else if (!this.isOpen) {\n          this._chooseOtherItem(1);\n        }\n      } else if (KeyUtil.isKeyCode(event, UP_ARROW)) {\n        event.preventDefault();\n        this._chooseOtherItem(-1);\n      } else if (KeyUtil.isKeyCode(event, ENTER)) {\n        this._toggleSelectionByInputText();\n      } else if (KeyUtil.isKeyCode(event, ESCAPE)) {\n        event.stopPropagation();\n        this._showList(false);\n      } else if (!KeyUtil.isKeyCode(event, [...this._nonOpeningKeys, CONTROL])) {\n        this._showList(true);\n        const acceptedKeys = !KeyUtil.isKeyType(event, 'alphabetical') && !KeyUtil.isKeyType(event, 'numeric');\n        if (this.isEmptyValue && acceptedKeys) {\n          this.listComponent?.setItemActive(0);\n        }\n      }\n    }\n    /**\n     * @hidden\n     * Method passed to list component.\n     */\n    _handleListFocusEscape(direction) {\n      if (direction === 'up') {\n        this._focusToSearchField();\n      }\n    }\n    /**\n     * @hidden\n     */\n    _addOnClicked($event) {\n      this.addOnButtonClicked.emit($event);\n      if (!this.mobile) {\n        this._onPrimaryButtonClick(this.isOpen);\n      }\n    }\n    /**\n     * @hidden\n     * applying range selection. Note, that this function will be invoked after combobox item's value has been changed\n     */\n    _onListElementClicked(event, index) {\n      // value has been changed at this point, so it can be safely used\n      const selectionState = this._suggestions[index].selected;\n      this._rangeSelector.onRangeElementToggled(index, event);\n      const toRemoveSet = new Set();\n      this._rangeSelector.applyValueToEachInRange(idx => {\n        const current = this._suggestions[idx];\n        if (current.selected !== selectionState) {\n          if (current.selected) {\n            // removing from \"_selectedSuggestions\" list\n            toRemoveSet.add(current.value);\n          } else {\n            // adding current item to \"_selectedSuggestions\"\n            this._selectedSuggestions.push(current);\n          }\n          current.selected = selectionState;\n        }\n      });\n      this._selectedSuggestions = this._selectedSuggestions.filter(s => !toRemoveSet.has(s.value));\n      this._propagateChange();\n      this._tokenizer.onResize();\n      this._tokenizer.tokenizerInnerEl.nativeElement.scrollLeft = this._tokenizer.tokenizerInnerEl.nativeElement.scrollWidth;\n    }\n    /** @hidden */\n    _propagateChange(emitInMobile) {\n      if (!this.mobile || emitInMobile) {\n        this._mapAndUpdateModel();\n      }\n    }\n    /** @hidden */\n    _setUpMobileMode() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const injector = Injector.create({\n          providers: [{\n            provide: MULTI_COMBOBOX_COMPONENT,\n            useValue: _this2\n          }],\n          parent: _this2._injector\n        });\n        yield _this2._dynamicComponentService.createDynamicModule({\n          listTemplate: _this2.listTemplate,\n          controlTemplate: _this2.mobileControlTemplate\n        }, MobileMultiComboboxModule, MobileMultiComboboxComponent, _this2._viewContainerRef, injector);\n      })();\n    }\n    /**\n     * @hidden\n     * Method that picks other value moved from current one by offset, called only when Multi Combobox is closed.\n     */\n    _chooseOtherItem(offset) {\n      if (this._selectedSuggestions?.length === this._flatSuggestions.length) {\n        this.inputText = '';\n        return;\n      }\n      const activeValue = getSelectItemByInputValue(this._fullFlatSuggestions, this.inputText);\n      const index = this._flatSuggestions.findIndex(value => value === activeValue);\n      const position = !this.inputText && offset === -1 ? this._flatSuggestions.length - 1 : index + offset;\n      const item = this._flatSuggestions[position];\n      if (item) {\n        this._setInputTextFromOptionItem(item);\n      }\n      const selectedIndex = this._selectedSuggestions.findIndex(value => value.label === item?.label);\n      if (selectedIndex !== -1) {\n        this._chooseOtherItem(offset);\n      }\n    }\n    /** @hidden */\n    _initWindowResize() {\n      this._getOptionsListWidth();\n      if (!this.autoResize) {\n        return;\n      }\n      resizeObservable(this._inputGroup.nativeElement).pipe(debounceTime(30), takeUntil$1(this._destroyed$)).subscribe(() => this._getOptionsListWidth());\n    }\n    /** @hidden */\n    _getOptionsListWidth() {\n      const body = document.body;\n      const rect = this._inputGroup.nativeElement.getBoundingClientRect();\n      const scrollBarWidth = body.offsetWidth - body.clientWidth;\n      this.maxWidth = this.autoResize ? window.innerWidth - scrollBarWidth - rect.left : this.minWidth;\n      this.minWidth = rect.width - 2;\n      this._cd.detectChanges();\n    }\n    /**\n     * @hidden\n     * Assign custom templates\n     */\n    _assignCustomTemplates() {\n      this.customTemplates.forEach(template => {\n        switch (template.getName()) {\n          case 'optionItemTemplate':\n            this.optionItemTemplate = template.templateRef;\n            break;\n          case 'groupItemTemplate':\n            this.groupItemTemplate = template.templateRef;\n            break;\n          case 'secondaryItemTemplate':\n            this.secondaryItemTemplate = template.templateRef;\n            break;\n          case 'selectedItemTemplate':\n            this.selectedItemTemplate = template.templateRef;\n            break;\n        }\n      });\n    }\n  }\n  MultiComboboxComponent.ɵfac = function MultiComboboxComponent_Factory(t) {\n    return new (t || MultiComboboxComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1$1.DynamicComponentService));\n  };\n  MultiComboboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MultiComboboxComponent,\n    selectors: [[\"fd-multi-combobox\"]],\n    contentQueries: function MultiComboboxComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TemplateDirective, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTemplates = _t);\n      }\n    },\n    viewQuery: function MultiComboboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(FD_LIST_COMPONENT, 5);\n        i0.ɵɵviewQuery(_c1, 5, ElementRef);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(TokenizerComponent, 5);\n        i0.ɵɵviewQuery(_c4, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchInputElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mobileControlTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tokenizer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputGroup = _t.first);\n      }\n    },\n    inputs: {\n      selectedItems: \"selectedItems\",\n      maxHeight: \"maxHeight\",\n      buttonFocusable: \"buttonFocusable\",\n      autoComplete: \"autoComplete\",\n      entityClass: \"entityClass\",\n      mobile: \"mobile\",\n      mobileConfig: \"mobileConfig\",\n      group: \"group\",\n      groupKey: \"groupKey\",\n      secondaryKey: \"secondaryKey\",\n      showSecondaryText: \"showSecondaryText\",\n      secondaryTextAlignment: \"secondaryTextAlignment\",\n      autoResize: \"autoResize\",\n      openDropdownOnAddOnClicked: \"openDropdownOnAddOnClicked\",\n      value: \"value\",\n      fillControlMode: \"fillControlMode\",\n      addonIconTitle: \"addonIconTitle\",\n      invalidEntryMessage: \"invalidEntryMessage\",\n      limitless: \"limitless\",\n      lookupKey: \"lookupKey\",\n      displayKey: \"displayKey\",\n      list: \"list\",\n      invalidEntryDisplayTime: \"invalidEntryDisplayTime\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      isOpenChange: \"isOpenChange\",\n      addOnButtonClicked: \"addOnButtonClicked\",\n      dataRequested: \"dataRequested\",\n      dataReceived: \"dataReceived\"\n    },\n    features: [i0.ɵɵProvidersFeature([CvaControl, contentDensityObserverProviders(), {\n      provide: FD_DATA_SOURCE_TRANSFORMER,\n      useClass: MultiComboboxDataSourceParser\n    }, {\n      provide: MULTI_COMBOBOX_COMPONENT,\n      useExisting: MultiComboboxComponent\n    }, DestroyedService]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵHostDirectivesFeature([{\n      directive: i2$1.CvaDirective,\n      inputs: [\"id\", \"inputId\", \"placeholder\", \"placeholder\", \"state\", \"state\", \"stateMessage\", \"stateMessage\", \"disabled\", \"disabled\", \"readonly\", \"readonly\", \"name\", \"name\"]\n    }, {\n      directive: i3$1.DataSourceDirective,\n      inputs: [\"dataSource\", \"dataSource\"],\n      outputs: [\"dataChanged\", \"dataChanged\"]\n    }])],\n    ngContentSelectors: _c11,\n    decls: 15,\n    vars: 2,\n    consts: [[1, \"fd-multi-combobox\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"additionalBodyClass\", \"fd-popover-custom-list fd-multi-combobox__list-container\", 3, \"isOpen\", \"triggers\", \"disabled\", \"fillControlMode\", \"isOpenChange\", 4, \"ngIf\"], [\"controlTemplate\", \"\"], [\"mobileControlTemplate\", \"\"], [\"listTemplate\", \"\"], [\"listItem\", \"\"], [\"optionItemSource\", \"\"], [\"secondaryTextSource\", \"\"], [3, \"ngTemplateOutlet\"], [\"additionalBodyClass\", \"fd-popover-custom-list fd-multi-combobox__list-container\", 3, \"isOpen\", \"triggers\", \"disabled\", \"fillControlMode\", \"isOpenChange\"], [4, \"ngTemplateOutlet\"], [3, \"id\", \"state\", \"buttonFocusable\", \"button\", \"glyph\", \"isControl\", \"disabled\", \"isExpanded\", \"glyphAriaLabel\", \"iconTitle\", \"addOnButtonClicked\", \"click\", \"keydown\"], [\"inputGroup\", \"\"], [\"class\", \"fd-multi-combobox-tokenizer-custom\", 3, \"tokenizerFocusable\", \"compactCollapse\", \"moreClickedEvent\", 4, \"ngIf\"], [3, \"type\", \"innerHtml\", 4, \"ngIf\"], [1, \"fd-multi-combobox-tokenizer-custom\", 3, \"tokenizerFocusable\", \"compactCollapse\", \"moreClickedEvent\"], [\"tokenizer\", \"\"], [3, \"readOnly\", \"onCloseClick\", 4, \"ngFor\", \"ngForOf\"], [\"fdkAutoComplete\", \"\", \"type\", \"text\", \"role\", \"combobox\", \"autocomplete\", \"off\", \"fd-form-control\", \"\", \"fd-input-group-input\", \"\", \"tabindex\", \"0\", 1, \"fd-tokenizer__input\", 3, \"options\", \"inputText\", \"id\", \"name\", \"disabled\", \"ngModel\", \"placeholder\", \"readonly\", \"displayFn\", \"onComplete\", \"keydown\", \"ngModelChange\", \"focus\", \"blur\"], [\"searchInputElement\", \"\"], [3, \"readOnly\", \"onCloseClick\"], [3, \"type\", \"innerHtml\"], [1, \"fd-multi-combobox-input-group-custom\", 3, \"id\", \"state\", \"buttonFocusable\", \"isControl\", \"disabled\", \"isExpanded\", \"glyphAriaLabel\"], [\"fdkAutoComplete\", \"\", \"type\", \"text\", \"role\", \"combobox\", \"autocomplete\", \"off\", \"fd-form-control\", \"\", \"fd-input-group-input\", \"\", \"tabindex\", \"0\", 3, \"options\", \"inputText\", \"id\", \"name\", \"disabled\", \"ngModel\", \"placeholder\", \"readonly\", \"displayFn\", \"onComplete\", \"keydown\", \"ngModelChange\", \"focus\", \"blur\"], [\"fd-list\", \"\", \"role\", \"listbox\", \"aria-multiselectable\", \"true\", 1, \"fd-multi-combobox__list\", \"fd-list--multi-input\", 3, \"dropdownMode\", \"id\", \"focusEscapeList\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"fd-list-item\", \"\", \"role\", \"option\", 3, \"tabindex\", \"selected\", \"click\", \"keyDown\", 4, \"ngFor\", \"ngForOf\"], [\"fd-list-item\", \"\", \"fd-list-group-header\", \"\", \"role\", \"group\"], [\"fd-list-title\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"fd-list-item\", \"\", \"role\", \"option\", 3, \"tabindex\", \"selected\", \"click\", \"keyDown\"], [3, \"ngModel\", \"click\", \"ngModelChange\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [\"fd-list-title\", \"\", 3, \"innerHTML\"], [\"fd-list-secondary\", \"\", 3, \"innerHTML\"]],\n    template: function MultiComboboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c11);\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, MultiComboboxComponent_ng_container_1_Template, 1, 1, \"ng-container\", 1);\n        i0.ɵɵtemplate(2, MultiComboboxComponent_fd_popover_2_Template, 7, 9, \"fd-popover\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, MultiComboboxComponent_ng_template_3_Template, 7, 18, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(5, MultiComboboxComponent_ng_template_5_Template, 2, 25, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(7, MultiComboboxComponent_ng_template_7_Template, 5, 12, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(9, MultiComboboxComponent_ng_template_9_Template, 2, 2, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(11, MultiComboboxComponent_ng_template_11_Template, 2, 2, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(13, MultiComboboxComponent_ng_template_13_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.mobile);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.mobile);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i5.PopoverControlComponent, i5.PopoverBodyComponent, i5.PopoverComponent, i6$1.CheckboxComponent, i7$1.InputGroupComponent, i7$1.InputGroupInputDirective, i8.TokenComponent, i8.TokenizerComponent, i9.FormControlComponent, i9.InputFormControlDirective, i9.FormMessageComponent, i9.FormInputMessageGroupComponent, i10.ListComponent, i10.ListItemComponent, i10.ListTitleDirective, i10.ListGroupHeaderDirective, i10.ListSecondaryDirective, i11.DefaultValueAccessor, i11.NgControlStatus, i11.NgModel, i1$1.AutoCompleteDirective, i7.FdTranslatePipe, i1$1.SearchHighlightPipe],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-margin--tiny{margin:.5rem!important}.fd-margin--sm{margin:1rem!important}.fd-margin--md{margin:2rem!important}.fd-margin--lg{margin:3rem!important}.fd-margin--none{margin:0!important}.fd-margin-top--tiny{margin-top:.5rem!important}.fd-margin-top--sm{margin-top:1rem!important}.fd-margin-top--md{margin-top:2rem!important}.fd-margin-top--lg{margin-top:3rem!important}.fd-margin-top--none{margin-top:0!important}.fd-margin-end--tiny{margin-right:.5rem!important}.fd-margin-end--tiny[dir=rtl],[dir=rtl] .fd-margin-end--tiny{margin-left:.5rem!important;margin-right:0!important}.fd-margin-end--sm{margin-right:1rem!important}.fd-margin-end--sm[dir=rtl],[dir=rtl] .fd-margin-end--sm{margin-left:1rem!important;margin-right:0!important}.fd-margin-end--md{margin-right:2rem!important}.fd-margin-end--md[dir=rtl],[dir=rtl] .fd-margin-end--md{margin-left:2rem!important;margin-right:0!important}.fd-margin-end--lg{margin-right:3rem!important}.fd-margin-end--lg[dir=rtl],[dir=rtl] .fd-margin-end--lg{margin-left:3rem!important;margin-right:0!important}.fd-margin-end--none{margin-right:0}.fd-margin-end--none[dir=rtl],[dir=rtl] .fd-margin-end--none{margin-left:0!important}.fd-margin-bottom--tiny{margin-bottom:.5rem!important}.fd-margin-bottom--sm{margin-bottom:1rem!important}.fd-margin-bottom--md{margin-bottom:2rem!important}.fd-margin-bottom--lg{margin-bottom:3rem!important}.fd-margin-bottom--none{margin-bottom:0!important}.fd-margin-begin--tiny{margin-left:.5rem!important}.fd-margin-begin--tiny[dir=rtl],[dir=rtl] .fd-margin-begin--tiny{margin-left:0!important;margin-right:.5rem!important}.fd-margin-begin--sm{margin-left:1rem!important}.fd-margin-begin--sm[dir=rtl],[dir=rtl] .fd-margin-begin--sm{margin-left:0!important;margin-right:1rem!important}.fd-margin-begin--md{margin-left:2rem!important}.fd-margin-begin--md[dir=rtl],[dir=rtl] .fd-margin-begin--md{margin-left:0!important;margin-right:2rem!important}.fd-margin-begin--lg{margin-left:3rem!important}.fd-margin-begin--lg[dir=rtl],[dir=rtl] .fd-margin-begin--lg{margin-left:0!important;margin-right:3rem!important}.fd-margin-begin--none{margin-left:0}.fd-margin-begin--none[dir=rtl],[dir=rtl] .fd-margin-begin--none{margin-right:0!important}.fd-margin-top-bottom--tiny{margin-bottom:.5rem!important;margin-top:.5rem!important}.fd-margin-top-bottom--sm{margin-bottom:1rem!important;margin-top:1rem!important}.fd-margin-top-bottom--md{margin-bottom:2rem!important;margin-top:2rem!important}.fd-margin-top-bottom--lg{margin-bottom:3rem!important;margin-top:3rem!important}.fd-margin-begin-end--tiny{margin-left:.5rem!important;margin-right:.5rem!important}.fd-margin-begin-end--sm{margin-left:1rem!important;margin-right:1rem!important}.fd-margin-begin-end--md{margin-left:2rem!important;margin-right:2rem!important}.fd-margin-begin-end--lg{margin-left:3rem!important;margin-right:3rem!important}.fd-margin-responsive--sm{margin:0 0 1rem!important}.fd-margin-responsive--md{margin:1rem!important}.fd-margin-responsive--lg{margin:1rem 2rem!important}.fd-margin-responsive--xl{margin:1rem 3rem!important}.fd-margin-negative-begin-end--tiny{margin:0 -.5rem!important}.fd-margin-negative-begin-end--sm{margin:0 -1rem!important}.fd-margin-negative-begin-end--md{margin:0 -2rem!important}.fd-margin-negative-begin-end--lg{margin:0 -3rem!important}.fd-multi-combobox-tokenizer-custom{width:calc(100% - 2.25rem)}[class*=--compact] .fd-multi-combobox-tokenizer-custom:not([class*=\\\"--cozy\\\"]):not([class*=\\\"--condensed\\\"]),.is-compact .fd-multi-combobox-tokenizer-custom:not(.is-cozy):not(.is-condensed),.fd-multi-combobox-tokenizer-custom[class*=--compact],.fd-multi-combobox-tokenizer-custom.is-compact{width:calc(100% - 2rem)}.fd-multi-combobox-input-group-custom{display:inline-block}.fd-multi-combobox .fd-popover-custom{display:block}.fd-multi-combobox__list-container .fd-list .fd-list__item.fd-list__group-header{padding:0 1rem}.fd-multi-combobox__list-container .fd-list .fd-list__item .fd-list__title{max-width:inherit}.fd-multi-combobox__list-container .fd-list.fd-list--compact .fd-list__item.fd-list__group-header{padding:0 .5rem}.fd-multi-combobox__list-container fd-form-message{max-width:100%;border-radius:0!important}.fd-dialog__body fd-form-message{display:block;max-width:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MultiComboboxComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MultiComboboxModule = /*#__PURE__*/(() => {\n  class MultiComboboxModule {}\n  MultiComboboxModule.ɵfac = function MultiComboboxModule_Factory(t) {\n    return new (t || MultiComboboxModule)();\n  };\n  MultiComboboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MultiComboboxModule\n  });\n  MultiComboboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DynamicComponentService],\n    imports: [CommonModule, I18nModule, PopoverModule, CheckboxModule, InputGroupModule, TokenModule, FormModule, ListModule, FormsModule, PipeModule, AutoCompleteModule, ContentDensityModule]\n  });\n  return MultiComboboxModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayMultiComboBoxDataSource, BaseMultiCombobox, FD_MAP_LIMIT, FdMultiComboBoxDataSource, MULTI_COMBOBOX_COMPONENT, MobileMultiComboboxComponent, MobileMultiComboboxModule, MultiComboboxComponent, MultiComboboxConfig, MultiComboboxDataSourceParser, MultiComboboxModule, MultiComboboxSelectionChangeEvent, ObservableMultiComboBoxDataSource, displayValue, flattenGroups, getSelectItemByInputValue, getTokenIndexByIdlOrValue, lookupValue, objectGet };\n//# sourceMappingURL=fundamental-ngx-core-multi-combobox.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}