{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, Input, ViewChild, ContentChildren, forwardRef, ContentChild, HostBinding, isDevMode, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i5 from '@fundamental-ngx/core/popover';\nimport { PopoverModule } from '@fundamental-ngx/core/popover';\nimport { __decorate, __metadata } from 'tslib';\nimport { DYNAMIC_PAGE_HEADER_TOKEN } from '@fundamental-ngx/core/shared';\nimport * as i2 from '@fundamental-ngx/cdk/utils';\nimport { OVERFLOW_PRIORITY_SCORE, DestroyedService, applyCssClass } from '@fundamental-ngx/cdk/utils';\nimport { of, Subscription, fromEvent, BehaviorSubject } from 'rxjs';\nimport { filter, debounceTime, distinctUntilChanged, takeUntil, delay } from 'rxjs/operators';\nimport { TitleToken } from '@fundamental-ngx/core/title';\nimport * as i1 from '@fundamental-ngx/core/content-density';\nimport { contentDensityObserverProviders, ContentDensityMode, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\nconst _c0 = [\"toolbar\"];\nconst _c1 = [\"overflowBody\"];\nconst _c2 = [\"overflowSpacer\"];\nfunction ToolbarComponent_h4_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.title);\n  }\n}\nfunction ToolbarComponent_ng_container_5_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 12);\n  }\n}\nfunction ToolbarComponent_ng_container_5_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 13);\n  }\n}\nfunction ToolbarComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 5, 6);\n    i0.ɵɵtemplate(3, ToolbarComponent_ng_container_5_span_3_Template, 1, 0, \"span\", 7);\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵelementStart(5, \"fd-popover\", 8)(6, \"fd-popover-control\");\n    i0.ɵɵtemplate(7, ToolbarComponent_ng_container_5_button_7_Template, 1, 0, \"button\", 9);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"fd-popover-body\");\n    i0.ɵɵelement(10, \"div\", 10, 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 3, ctx_r2.overflowVisibility));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"noArrow\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(8, 5, ctx_r2.overflowVisibility));\n  }\n}\nconst _c3 = [\"*\"];\nlet ToolbarItemDirective = /*#__PURE__*/(() => {\n  class ToolbarItemDirective {\n    /** @hidden */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n  }\n  ToolbarItemDirective.ɵfac = function ToolbarItemDirective_Factory(t) {\n    return new (t || ToolbarItemDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  ToolbarItemDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarItemDirective,\n    selectors: [[\"\", \"fd-toolbar-item\", \"\"]]\n  });\n  return ToolbarItemDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ELEMENT_MARGIN = 8;\nconst OVERFLOW_SPACE = 50 + 2 * ELEMENT_MARGIN;\nconst MAX_CONTENT_SIZE = 99999999;\nlet ToolbarComponent = /*#__PURE__*/(() => {\n  class ToolbarComponent {\n    /** @hidden */\n    get _toolbarWidth() {\n      return this.toolbar.nativeElement.clientWidth - OVERFLOW_SPACE;\n    }\n    /** @hidden */\n    get _overflowBody() {\n      return this.overflowBody && this.overflowBody.nativeElement;\n    }\n    /** @hidden */\n    get _toolbar() {\n      return this.toolbar.nativeElement;\n    }\n    /** @hidden */\n    constructor(_cd, _renderer, _contentDensityObserver, _destroy$, _dynamicPageHeader) {\n      this._cd = _cd;\n      this._renderer = _renderer;\n      this._contentDensityObserver = _contentDensityObserver;\n      this._destroy$ = _destroy$;\n      this._dynamicPageHeader = _dynamicPageHeader;\n      /** Determines if overflow button should be visible\n       * Default value: false\n       */\n      this.shouldOverflow = false;\n      /** Determines the type of toolbar\n       * Available options: 'solid' | 'transparent' | 'auto' | 'info'\n       * Default value: 'solid'\n       */\n      this.fdType = 'solid';\n      /** @deprecated */\n      this.hasTitle = false;\n      /** Determines if toolbar should has active state (only when fdType == 'info')\n       * Default value: false\n       */\n      this.active = false;\n      /** Determines if toolbar should clear border bottom\n       * Default value: false\n       */\n      this.clearBorder = false;\n      /** Whether all items should be inside overflow */\n      this.forceOverflow = false;\n      /** Tabindex of the toolbar element, to be used when fdType=\"info\" */\n      this.tabindex = -1;\n      /** @hidden */\n      this.titleComponent = null;\n      /** @hidden */\n      this.overflowVisibility = of(false);\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this._overflowElements = [];\n      /** @hidden */\n      this._normalElements = [];\n      /** @hidden */\n      this._disappearElements = [];\n      /** @hidden */\n      this._initialised = false;\n      _contentDensityObserver.subscribe();\n    }\n    /** @hidden */\n    ngOnInit() {\n      fromEvent(window, 'resize').pipe(filter(() => this.shouldOverflow), debounceTime(50), distinctUntilChanged(), takeUntil(this._destroy$)).subscribe(() => this._onResize());\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      if (this.shouldOverflow) {\n        of(true).pipe(delay(5), takeUntil(this._destroy$)).subscribe(() => this._collapseItems());\n      }\n      this._initialised = true;\n      this._listenForItemChanges();\n      this.buildComponentCssClass();\n    }\n    /** @hidden */\n    ngAfterViewChecked() {\n      this.buildComponentCssClass();\n    }\n    /** @hidden */\n    ngAfterContentInit() {\n      if (this.titleComponent) {\n        this.titleComponent.elementRef?.nativeElement.classList.add('fd-toolbar__title');\n        this.buildComponentCssClass();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n    }\n    /** Change detection reference */\n    detectChanges() {\n      this._cd.detectChanges();\n    }\n    /** @hidden */\n    elementRef() {\n      return this.toolbar;\n    }\n    /** @hidden */\n    buildComponentCssClass() {\n      return ['fd-toolbar', `fd-toolbar--${this.fdType}`, `${this.active && this.fdType === 'info' ? 'fd-toolbar--active' : ''}`, `${this.hasTitle || this.title || this.titleComponent ? 'fd-toolbar--title' : ''}`, `${this.clearBorder ? 'fd-toolbar--clear' : ''}`, `${this._dynamicPageHeader ? 'fd-dynamic-page__toolbar' : ''}`];\n    }\n    /** Method triggering collapsible toolbar  */\n    updateCollapsibleItems() {\n      if (this._initialised) {\n        this._onResize();\n      }\n    }\n    /** @hidden */\n    _onResize() {\n      this._reset();\n      if (this.shouldOverflow) {\n        this._collapseItems();\n      }\n      this._cd.detectChanges();\n    }\n    // shouldOverflow items\n    /** @hidden */\n    _collapseItems() {\n      this._groupedCollection = this._getGroupedCollection();\n      this._groupedCollectionPriority = this._getGroupedCollectionPriority();\n      const _sortedByPriorityAndGroupItems = this._getSortedByPriorityAndGroupItems();\n      _sortedByPriorityAndGroupItems.reduce((_contentWidth, toolbarItem) => {\n        const itemWidth = this._getElementWidthWithMargin(toolbarItem);\n        const itemGroup = this._getElementGroup(toolbarItem);\n        const itemPriority = this._getElementPriority(toolbarItem);\n        const shouldItemBeRemovedByWidth = this._shouldToolbarItemBeRemovedByWidth(itemWidth, _contentWidth);\n        const shouldAlwaysBeInOverflow = itemPriority === \"always\" /* OverflowPriorityEnum.ALWAYS */ || this.forceOverflow;\n        const shouldNeverBeInOverflow = itemPriority === \"never\" /* OverflowPriorityEnum.NEVER */;\n        if (shouldItemBeRemovedByWidth && !shouldNeverBeInOverflow || shouldAlwaysBeInOverflow) {\n          if (itemGroup) {\n            this._hideElementsFromCurrentGroup(itemGroup);\n          } else {\n            this._hideElementWithoutGroup(toolbarItem, itemPriority);\n          }\n          return shouldAlwaysBeInOverflow ? _contentWidth : MAX_CONTENT_SIZE;\n        } else {\n          this._normalElements.push(toolbarItem);\n          return _contentWidth + itemWidth;\n        }\n      }, 0);\n      this._collapseLastSpacerElement(this._overflowElements, this._normalElements);\n      this._addToolbarItemToOverflow(this._overflowElements);\n      this._disappearElements.forEach(this._removeToolbarItemFromDOM.bind(this));\n      this._normalElements = [...this._getOrderedItemsFollowingQuery(this._normalElements)];\n      this._overflowElements = [...this._getOrderedItemsFollowingQuery(this._overflowElements)];\n      this.toolbarItems.forEach(item => this._changeItemVisibilityState(item.elementRef.nativeElement, true));\n      this._changeOverflowVisibleState(this._overflowElements.length > 0);\n      this._cd.markForCheck();\n    }\n    /** @hidden */\n    _shouldToolbarItemBeRemovedByWidth(itemWidth, contentWidth) {\n      return contentWidth + itemWidth > this._toolbarWidth;\n    }\n    /** @hidden */\n    _getElementWidthWithMargin(toolbarItem) {\n      return toolbarItem.elementRef.nativeElement && toolbarItem.elementRef.nativeElement.offsetWidth + ELEMENT_MARGIN;\n    }\n    /** @hidden */\n    _listenForItemChanges() {\n      this.toolbarItems.changes.pipe(filter(() => this.shouldOverflow)).subscribe(() => this._onResize());\n    }\n    /** @hidden */\n    _getElementPriority(toolbarItem) {\n      const priority = toolbarItem.elementRef.nativeElement && toolbarItem.elementRef.nativeElement.attributes.fdOverflowPriority;\n      return priority && priority.value || \"high\" /* OverflowPriorityEnum.HIGH */;\n    }\n    /** @hidden */\n    _getElementGroup(toolbarItem) {\n      const itemGroup = toolbarItem.elementRef.nativeElement && toolbarItem.elementRef.nativeElement.attributes.fdOverflowGroup;\n      return itemGroup && itemGroup.value || 0;\n    }\n    /** @hidden */\n    _hideElementsFromCurrentGroup(itemGroup) {\n      const lowestPriorityFromGroup = this._getLowestPriorityFromGroup(itemGroup);\n      if (!this._groupedCollection || !this._groupedCollectionPriority) {\n        return;\n      }\n      let itemsToRemove = this._groupedCollection[lowestPriorityFromGroup];\n      delete this._groupedCollection[lowestPriorityFromGroup];\n      delete this._groupedCollectionPriority[lowestPriorityFromGroup];\n      if (lowestPriorityFromGroup !== itemGroup) {\n        itemsToRemove = [...itemsToRemove, ...this._groupedCollection[itemGroup]];\n        delete this._groupedCollection[itemGroup];\n        delete this._groupedCollectionPriority[itemGroup];\n      }\n      itemsToRemove?.forEach(item => {\n        this._removeItemFromArray(this._normalElements, item);\n        const isDisappear = this._getElementPriority(item) === \"disappear\" /* OverflowPriorityEnum.DISAPPEAR */;\n        if (isDisappear) {\n          this._disappearElements.push(item);\n        }\n        if (this._overflowElements.indexOf(item) === -1 && !isDisappear) {\n          this._overflowElements.push(item);\n        }\n      });\n    }\n    /** @hidden */\n    _hideElementWithoutGroup(toolbarItem, itemPriority) {\n      const isDisappear = itemPriority === \"disappear\" /* OverflowPriorityEnum.DISAPPEAR */;\n      if (isDisappear) {\n        this._disappearElements.push(toolbarItem);\n      } else {\n        this._overflowElements.push(toolbarItem);\n      }\n    }\n    /** @hidden Sort by group and priority and initial position */\n    _getSortedByPriorityAndGroupItems() {\n      const notSorted = this.toolbarItems.toArray().map((element, index) => ({\n        element,\n        index\n      }));\n      const groups = notSorted.reduce((gr, item) => {\n        let groupId = this._getElementGroup(item.element);\n        const itemPrio = this._getElementPriority(item.element);\n        if (itemPrio === \"never\" /* OverflowPriorityEnum.NEVER */ || itemPrio === \"always\" /* OverflowPriorityEnum.ALWAYS */) {\n          groupId = 0;\n        }\n        if (!gr[groupId]) {\n          gr[groupId] = [];\n        }\n        gr[groupId].push(item);\n        return gr;\n      }, {});\n      const groupIds = Object.keys(groups).map(g => parseInt(g, 10)).filter(g => g !== 0);\n      return groupIds.map(g => {\n        let minIndex = Number.MAX_SAFE_INTEGER;\n        let maxPriority = 0;\n        for (const item of groups[g]) {\n          minIndex = Math.min(minIndex, item.index);\n          maxPriority = Math.max(maxPriority, OVERFLOW_PRIORITY_SCORE.get(this._getElementPriority(item.element)) ?? -Infinity);\n        }\n        return {\n          group: groups[g].map(({\n            element\n          }) => element),\n          minIndex,\n          maxPriority\n        };\n      }).concat(!groups[0] ? [] : groups[0].map(item => ({\n        group: [item.element],\n        maxPriority: OVERFLOW_PRIORITY_SCORE.get(this._getElementPriority(item.element)),\n        minIndex: item.index\n      }))).sort((a, b) => b.maxPriority - a.maxPriority || a.minIndex - b.minIndex).reduce((arr, i) => arr.concat(i.group), []);\n    }\n    /** @hidden Get the object with grouped arrays of elements. */\n    _getGroupedCollection() {\n      const collection = this.toolbarItems && this.toolbarItems.reduce((acc, item) => {\n        const itemPrio = this._getElementPriority(item);\n        if (itemPrio === \"never\" /* OverflowPriorityEnum.NEVER */ || itemPrio === \"always\" /* OverflowPriorityEnum.ALWAYS */) {\n          return acc;\n        }\n        const itemGroup = this._getElementGroup(item);\n        acc[itemGroup] && acc[itemGroup].length ? acc[itemGroup].push(item) : acc[itemGroup] = [item];\n        return acc;\n      }, {}) || {};\n      delete collection[0];\n      return collection;\n    }\n    /** @hidden Get the object with the highest priority for each group of elements. */\n    _getGroupedCollectionPriority() {\n      if (!this._groupedCollection) {\n        return {};\n      }\n      const groups = Object.keys(this._groupedCollection);\n      return groups.reduce((acc, itemGroup) => {\n        const sortedPriorities = this._groupedCollection[itemGroup].map(this._getElementPriority).filter(prio => prio !== \"always\" /* OverflowPriorityEnum.ALWAYS */ && prio !== \"never\" /* OverflowPriorityEnum.NEVER */).sort(this._sortPriorities.bind(this));\n        acc[itemGroup] = sortedPriorities[0];\n        return acc;\n      }, {});\n    }\n    /** @hidden Get group number with the lowest priority.\n     *  Uses for detecting a group of elements which would be hidden from the toolbar.\n     *  */\n    _getLowestPriorityFromGroup(itemGroup) {\n      const priority = this._groupedCollectionPriority;\n      if (!priority || !OVERFLOW_PRIORITY_SCORE.get(priority[itemGroup])) {\n        return itemGroup;\n      }\n      const groups = Object.keys(priority);\n      return groups.reduce((lowestGroup, currentGroup) => {\n        const lowestGroupPriority = priority[lowestGroup];\n        const currentGroupPriority = priority[currentGroup];\n        if (OVERFLOW_PRIORITY_SCORE.get(currentGroupPriority) < OVERFLOW_PRIORITY_SCORE.get(lowestGroupPriority)) {\n          return +currentGroup;\n        }\n        return lowestGroup;\n      }, itemGroup);\n    }\n    /** @hidden */\n    _removeItemFromArray(toolbarItems, toolbarItem) {\n      const itemIndex = toolbarItems.indexOf(toolbarItem);\n      return itemIndex >= 0 ? toolbarItems.splice(itemIndex, 1)[0] : null;\n    }\n    /** @hidden */\n    _removeToolbarItemFromDOM(toolbarItem) {\n      if (toolbarItem.elementRef.nativeElement && toolbarItem.elementRef.nativeElement.parentNode) {\n        // IE11 workaround element.remove() is not supported\n        this._renderer.removeChild(this.elementRef().nativeElement, toolbarItem.elementRef.nativeElement);\n      }\n    }\n    /** @hidden */\n    _addToolbarItemToOverflow(toolbarItems) {\n      toolbarItems.forEach(x => {\n        if (this._overflowBody) {\n          this._overflowBody.appendChild(x.elementRef.nativeElement);\n        }\n      });\n    }\n    /** @hidden */\n    _reset() {\n      this._normalElements.forEach(this._removeToolbarItemFromDOM.bind(this));\n      this._overflowElements.forEach(this._removeToolbarItemFromDOM.bind(this));\n      if (this.overflowSpacer) {\n        this.toolbarItems.map(x => {\n          this._renderer.insertBefore(this._toolbar, x.elementRef.nativeElement, this.overflowSpacer.nativeElement);\n        });\n      }\n      this._overflowElements = [];\n      this._normalElements = [];\n      this._disappearElements = [];\n      this._groupedCollection = null;\n      this._groupedCollectionPriority = null;\n      this._changeOverflowVisibleState(false);\n    }\n    /** @hidden */\n    _changeOverflowVisibleState(visible) {\n      this.overflowVisibility = of(visible).pipe(debounceTime(1));\n    }\n    /** @hidden */\n    _changeItemVisibilityState(element, visible) {\n      const fadeIn = 'fd-toolbar-fade-in';\n      const fadeOut = 'fd-toolbar-fade-out';\n      if (visible) {\n        element.classList.add(fadeIn);\n        element.classList.remove(fadeOut);\n        return;\n      }\n      element.classList.add(fadeOut);\n      element.classList.remove(fadeIn);\n    }\n    /** @hidden Sort priorities of elements/groups. */\n    _sortPriorities(a, b) {\n      return OVERFLOW_PRIORITY_SCORE.get(b) - OVERFLOW_PRIORITY_SCORE.get(a);\n    }\n    /** @hidden */\n    _collapseLastSpacerElement(overflowElements, normalElements) {\n      if (!normalElements || normalElements.length < 1) {\n        return;\n      }\n      const isSpacer = element => element.elementRef.nativeElement.classList.contains('fd-toolbar__spacer');\n      let lastItem = normalElements[normalElements.length - 1];\n      while (isSpacer(lastItem) && normalElements.length > 0) {\n        overflowElements.push(normalElements.pop());\n        lastItem = normalElements[normalElements.length - 1];\n      }\n    }\n    /** @hidden */\n    _getOrderedItemsFollowingQuery(toolbarItems) {\n      const queryArray = this.toolbarItems.toArray();\n      const sortMethod = (a, b) => queryArray.findIndex(_item => _item === a) > queryArray.findIndex(_item => _item === b) ? 1 : -1;\n      return toolbarItems.sort(sortMethod);\n    }\n  }\n  ToolbarComponent.ɵfac = function ToolbarComponent_Factory(t) {\n    return new (t || ToolbarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.ContentDensityObserver), i0.ɵɵdirectiveInject(i2.DestroyedService), i0.ɵɵdirectiveInject(DYNAMIC_PAGE_HEADER_TOKEN, 12));\n  };\n  ToolbarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToolbarComponent,\n    selectors: [[\"fd-toolbar\"]],\n    contentQueries: function ToolbarComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TitleToken, 5);\n        i0.ɵɵcontentQuery(dirIndex, ToolbarItemDirective, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarItems = _t);\n      }\n    },\n    viewQuery: function ToolbarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbar = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overflowBody = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overflowSpacer = _t.first);\n      }\n    },\n    inputs: {\n      class: \"class\",\n      shouldOverflow: \"shouldOverflow\",\n      fdType: \"fdType\",\n      hasTitle: \"hasTitle\",\n      title: \"title\",\n      active: \"active\",\n      clearBorder: \"clearBorder\",\n      forceOverflow: \"forceOverflow\",\n      tabindex: \"tabindex\"\n    },\n    features: [i0.ɵɵProvidersFeature([contentDensityObserverProviders({\n      defaultContentDensity: ContentDensityMode.COMPACT\n    }), DestroyedService])],\n    ngContentSelectors: _c3,\n    decls: 6,\n    vars: 7,\n    consts: [[3, \"tabindex\"], [\"toolbar\", \"\"], [\"class\", \"fd-title fd-title--h4 fd-toolbar__title\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"fd-title\", \"fd-title--h4\", \"fd-toolbar__title\"], [1, \"fd-toolbar__spacer\"], [\"overflowSpacer\", \"\"], [\"class\", \"fd-toolbar__separator\", 4, \"ngIf\"], [\"placement\", \"bottom-end\", 1, \"fd-popover\", 3, \"noArrow\"], [\"fd-button\", \"\", \"title\", \"More\", \"aria-label\", \"More\", \"aria-haspopup\", \"true\", \"fdType\", \"transparent\", \"glyph\", \"overflow\", 4, \"ngIf\"], [1, \"fd-toolbar__overflow\"], [\"overflowBody\", \"\"], [1, \"fd-toolbar__separator\"], [\"fd-button\", \"\", \"title\", \"More\", \"aria-label\", \"More\", \"aria-haspopup\", \"true\", \"fdType\", \"transparent\", \"glyph\", \"overflow\"]],\n    template: function ToolbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵtemplate(3, ToolbarComponent_h4_3_Template, 2, 1, \"h4\", 2);\n        i0.ɵɵprojection(4);\n        i0.ɵɵtemplate(5, ToolbarComponent_ng_container_5_Template, 12, 7, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-toolbar--cozy\", i0.ɵɵpipeBind1(2, 5, ctx._contentDensityObserver.isCozy$));\n        i0.ɵɵproperty(\"tabindex\", ctx.tabindex);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.shouldOverflow);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ButtonComponent, i5.PopoverControlComponent, i5.PopoverBodyComponent, i5.PopoverComponent, i3.AsyncPipe],\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-toolbar>*~:not(.fd-toolbar__spacer){margin-left:.5rem}.fd-toolbar>*~[dir=rtl]:not(.fd-toolbar__spacer),[dir=rtl] .fd-toolbar>*~:not(.fd-toolbar__spacer){margin-left:0;margin-right:.5rem}.fd-toolbar{-webkit-box-sizing:border-box;align-items:center;border:0;border-bottom:.0625rem solid var(--sapGroup_TitleBorderColor);box-sizing:border-box;color:var(--sapTextColor);display:flex;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:2rem;line-height:var(--sapContent_LineHeight);margin:0;padding:0 .5rem}.fd-toolbar:after,.fd-toolbar:before{box-sizing:inherit;font-size:inherit}.fd-toolbar>.fd-toolbar__spacer+:not(.fd-toolbar__spacer){margin-left:0;margin-right:0}.fd-toolbar--title{background-color:var(--sapGroup_TitleBackground)!important;height:2.75rem;padding:0 .5rem 0 1rem}.fd-toolbar--clear{border-bottom:none}.fd-toolbar--auto{background-color:var(--fdToolbar_Auto_Background)}.fd-toolbar--solid{background-color:var(--fdToolbar_Solid_Background)}.fd-toolbar--transparent{background-color:var(--sapToolbar_Background)}.fd-toolbar--fade-in{-webkit-transition:visibility 0s linear 0s,opacity 1s;opacity:1;transition:visibility 0s linear 0s,opacity 1s;visibility:visible}.fd-toolbar--fade-out{-webkit-transition:visibility 0s linear 1s,opacity 1ms;opacity:0;transition:visibility 0s linear 1s,opacity 1ms;visibility:hidden}.fd-toolbar--info{background-color:var(--sapInfobar_NonInteractive_Background);color:var(--sapList_TextColor);outline:none;padding-left:.5rem;padding-right:1rem;position:relative}.fd-toolbar--info.fd-toolbar--active{background-color:var(--sapInfobar_Background);color:var(--sapInfobar_TextColor)}.fd-toolbar--info.fd-toolbar--active.is-hover,.fd-toolbar--info.fd-toolbar--active:hover{background-color:var(--sapInfobar_Hover_Background)}.fd-toolbar--info.fd-toolbar--active.is-active,.fd-toolbar--info.fd-toolbar--active:active{background-color:var(--sapInfobar_Active_Background)}.fd-toolbar--info[dir=rtl],[dir=rtl] .fd-toolbar--info{padding-left:1rem;padding-right:.5rem}.fd-toolbar--info.is-focus:after,.fd-toolbar--info:focus:after{border-color:var(--sapContent_FocusColor);border-style:var(--sapContent_FocusStyle);border-width:var(--sapContent_FocusWidth);content:\\\"\\\";inset:.0625rem;pointer-events:none;position:absolute}.fd-toolbar--info.is-focus,.fd-toolbar--info:focus{z-index:5}.fd-toolbar--info.is-focus:after,.fd-toolbar--info:focus:after{border-color:var(--fdToolbar_Info_Outline_Color)}.fd-toolbar--info [class*=sap-icon]{color:var(--sapInfobar_TextColor);font-size:1rem;height:1rem;line-height:1rem}.fd-toolbar__spacer{-webkit-box-sizing:border-box;-webkit-box-flex:1;-ms-flex:1 auto;border:0;box-sizing:border-box;color:var(--sapTextColor);flex:1 auto;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:100%;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-toolbar__spacer:after,.fd-toolbar__spacer:before{box-sizing:inherit;font-size:inherit}.fd-toolbar__spacer--fixed{-webkit-box-flex:0;-ms-flex:none;display:inline-block;flex:none}.fd-toolbar__separator{-webkit-box-sizing:border-box;background-color:var(--sapToolbar_SeparatorColor);border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:1.5rem;line-height:var(--sapContent_LineHeight);margin:0;padding:0;width:.0625rem}.fd-toolbar__separator:after,.fd-toolbar__separator:before{box-sizing:inherit;font-size:inherit}.fd-toolbar__overflow{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);display:flex;flex-direction:column;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;max-height:50vh;max-width:20rem;overflow:auto;padding:.1875rem .375rem}.fd-toolbar__overflow:after,.fd-toolbar__overflow:before{box-sizing:inherit;font-size:inherit}.fd-toolbar__overflow .fd-toolbar__overflow-button{justify-content:flex-start;margin:.1875rem 0;text-align:left;width:auto}.fd-toolbar__overflow .fd-toolbar__overflow-button[dir=rtl],[dir=rtl] .fd-toolbar__overflow .fd-toolbar__overflow-button{text-align:right}.fd-toolbar__overflow .fd-toolbar__overflow-button--menu{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-box-align:center;-ms-flex-align:center;-webkit-box-pack:justify;-ms-flex-pack:justify;align-items:center;display:flex;justify-content:center;justify-content:space-between;max-width:100%}.fd-toolbar__overflow .fd-toolbar__separator{-webkit-box-sizing:border-box;background-color:var(--sapToolbar_SeparatorColor);border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;height:.0625rem;line-height:var(--sapContent_LineHeight);margin:.1875rem;padding:0;width:auto}.fd-toolbar__overflow .fd-toolbar__separator:after,.fd-toolbar__overflow .fd-toolbar__separator:before{box-sizing:inherit;font-size:inherit}.fd-toolbar__overflow .fd-toolbar__overflow-form-label,.fd-toolbar__overflow .fd-toolbar__overflow-label{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;overflow:hidden;padding:0;text-overflow:ellipsis;white-space:nowrap}.fd-toolbar__overflow .fd-toolbar__overflow-form-label:after,.fd-toolbar__overflow .fd-toolbar__overflow-form-label:before,.fd-toolbar__overflow .fd-toolbar__overflow-label:after,.fd-toolbar__overflow .fd-toolbar__overflow-label:before{box-sizing:inherit;font-size:inherit}.fd-toolbar__overflow .fd-toolbar__overflow-form-label--text,.fd-toolbar__overflow .fd-toolbar__overflow-label--text{margin-top:.4375rem}.fd-toolbar__title{color:var(--sapGroup_TitleTextColor);font-size:var(--sapGroup_Title_FontSize)}.fd-toolbar--cozy{height:2.75rem;min-height:2.75rem}.fd-toolbar--cozy.fd-toolbar--info{height:2rem;min-height:2rem}.fd-toolbar--cozy .fd-toolbar__overflow{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:.25rem .5rem}.fd-toolbar--cozy .fd-toolbar__overflow:after,.fd-toolbar--cozy .fd-toolbar__overflow:before{box-sizing:inherit;font-size:inherit}.fd-toolbar>*{flex-shrink:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  __decorate([applyCssClass, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", Array)], ToolbarComponent.prototype, \"buildComponentCssClass\", null);\n  return ToolbarComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToolbarSeparatorComponent = /*#__PURE__*/(() => {\n  class ToolbarSeparatorComponent {}\n  ToolbarSeparatorComponent.ɵfac = function ToolbarSeparatorComponent_Factory(t) {\n    return new (t || ToolbarSeparatorComponent)();\n  };\n  ToolbarSeparatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToolbarSeparatorComponent,\n    selectors: [[\"fd-toolbar-separator\"]],\n    hostAttrs: [1, \"fd-toolbar__separator\"],\n    decls: 0,\n    vars: 0,\n    template: function ToolbarSeparatorComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ToolbarSeparatorComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToolbarSpacerComponent = /*#__PURE__*/(() => {\n  class ToolbarSpacerComponent {\n    constructor() {\n      /** Determines the width of spacer when fixed property is set to true\n       * Allowed values: absolute and relative metrics\n       * Default value: 0px\n       */\n      this.width = '0px';\n      /** Property allows user to pass additional class\n       */\n      this.class = '';\n      /** Determines if spacer should take only size taken from width property\n       * Default value: false\n       * Default behaviour: spacer takes remaining space automatically\n       */\n      this.fixed = false;\n    }\n    /** @hidden */\n    get css() {\n      return `fd-toolbar__spacer ${this.fixed ? 'fd-toolbar__spacer--fixed' : ''} ${this.class}`;\n    }\n  }\n  ToolbarSpacerComponent.ɵfac = function ToolbarSpacerComponent_Factory(t) {\n    return new (t || ToolbarSpacerComponent)();\n  };\n  ToolbarSpacerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToolbarSpacerComponent,\n    selectors: [[\"fd-toolbar-spacer\"]],\n    hostVars: 3,\n    hostBindings: function ToolbarSpacerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"class\", ctx.css);\n        i0.ɵɵstyleProp(\"width\", ctx.width);\n      }\n    },\n    inputs: {\n      width: \"width\",\n      class: \"class\",\n      fixed: \"fixed\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function ToolbarSpacerComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ToolbarSpacerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToolbarLabelDirective = /*#__PURE__*/(() => {\n  class ToolbarLabelDirective extends ToolbarItemDirective {}\n  ToolbarLabelDirective.ɵfac = /* @__PURE__ */function () {\n    let ɵToolbarLabelDirective_BaseFactory;\n    return function ToolbarLabelDirective_Factory(t) {\n      return (ɵToolbarLabelDirective_BaseFactory || (ɵToolbarLabelDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarLabelDirective)))(t || ToolbarLabelDirective);\n    };\n  }();\n  ToolbarLabelDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarLabelDirective,\n    selectors: [[\"\", \"fd-toolbar-label\", \"\"]],\n    hostAttrs: [1, \"fd-label\", \"fd-toolbar__overflow-label\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ToolbarLabelDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToolbarOverflowButtonDirective = /*#__PURE__*/(() => {\n  class ToolbarOverflowButtonDirective extends ToolbarItemDirective {}\n  ToolbarOverflowButtonDirective.ɵfac = /* @__PURE__ */function () {\n    let ɵToolbarOverflowButtonDirective_BaseFactory;\n    return function ToolbarOverflowButtonDirective_Factory(t) {\n      return (ɵToolbarOverflowButtonDirective_BaseFactory || (ɵToolbarOverflowButtonDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarOverflowButtonDirective)))(t || ToolbarOverflowButtonDirective);\n    };\n  }();\n  ToolbarOverflowButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarOverflowButtonDirective,\n    selectors: [[\"\", \"fdToolbarOverflowButton\", \"\"], [\"\", \"fd-toolbar-overflow-button\", \"\"]],\n    hostAttrs: [1, \"fd-toolbar__overflow-button\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ToolbarOverflowButtonDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToolbarOverflowButtonMenuDirective = /*#__PURE__*/(() => {\n  class ToolbarOverflowButtonMenuDirective extends ToolbarItemDirective {}\n  ToolbarOverflowButtonMenuDirective.ɵfac = /* @__PURE__ */function () {\n    let ɵToolbarOverflowButtonMenuDirective_BaseFactory;\n    return function ToolbarOverflowButtonMenuDirective_Factory(t) {\n      return (ɵToolbarOverflowButtonMenuDirective_BaseFactory || (ɵToolbarOverflowButtonMenuDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarOverflowButtonMenuDirective)))(t || ToolbarOverflowButtonMenuDirective);\n    };\n  }();\n  ToolbarOverflowButtonMenuDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarOverflowButtonMenuDirective,\n    selectors: [[\"\", \"fdToolbarOverflowButtonMenu\", \"\"], [\"\", \"fd-toolbar-overflow-button-menu\", \"\"]],\n    hostAttrs: [1, \"fd-toolbar__overflow-button--menu\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ToolbarOverflowButtonMenuDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToolbarFormLabelDirective = /*#__PURE__*/(() => {\n  class ToolbarFormLabelDirective extends ToolbarItemDirective {}\n  ToolbarFormLabelDirective.ɵfac = /* @__PURE__ */function () {\n    let ɵToolbarFormLabelDirective_BaseFactory;\n    return function ToolbarFormLabelDirective_Factory(t) {\n      return (ɵToolbarFormLabelDirective_BaseFactory || (ɵToolbarFormLabelDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarFormLabelDirective)))(t || ToolbarFormLabelDirective);\n    };\n  }();\n  ToolbarFormLabelDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarFormLabelDirective,\n    selectors: [[\"\", \"fd-toolbar-form-label\", \"\"]],\n    hostAttrs: [1, \"fd-form-label\", \"fd-toolbar__overflow-form-label\", \"fd-toolbar__overflow-form-label--text\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ToolbarFormLabelDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Individual child elements can be \"prioritized\" for the overflow behavior using the `fdOverflowPriority` attribute directive.\n * The values for prioritization are as follows:\n * `always` - This element will always be positioned in the overflow menu.\n * `never` - This element will never be added to the overflow. It will always be visible in the toolbar.\n * `low` - The element has low priority and will be consider first for moving to overflow menu.\n * `high` (default) - This element has high priority and will be considered last for moving to overflow menu.\n * `disappear` - This element is not important and will be removed from the toolbar, and will not be added to the overflow menu.\n * */\nlet ToolbarOverflowPriorityDirective = /*#__PURE__*/(() => {\n  class ToolbarOverflowPriorityDirective extends ToolbarItemDirective {\n    constructor() {\n      super(...arguments);\n      /** The priority of the item. */\n      this.fdOverflowPriority = 'high';\n    }\n  }\n  ToolbarOverflowPriorityDirective.ɵfac = /* @__PURE__ */function () {\n    let ɵToolbarOverflowPriorityDirective_BaseFactory;\n    return function ToolbarOverflowPriorityDirective_Factory(t) {\n      return (ɵToolbarOverflowPriorityDirective_BaseFactory || (ɵToolbarOverflowPriorityDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarOverflowPriorityDirective)))(t || ToolbarOverflowPriorityDirective);\n    };\n  }();\n  ToolbarOverflowPriorityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarOverflowPriorityDirective,\n    selectors: [[\"\", \"fdOverflowPriority\", \"\"]],\n    inputs: {\n      fdOverflowPriority: \"fdOverflowPriority\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ToolbarOverflowPriorityDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Child elements can be grouped so that they can \"overflow\" together.\n * Setting the attribute directive `fdOverflowGroup` to the same number will allow child elements to be grouped.\n * Child elements which are grouped, will enter (or leave) the overflow menu together.\n * Child elements grouped in this manner cannot have the `fdOverflowPriority` values of `always` or `never`.\n * When the value of the property is 0, the element does not belong to any group.\n * */\nlet ToolbarOverflowGroupDirective = /*#__PURE__*/(() => {\n  class ToolbarOverflowGroupDirective extends ToolbarItemDirective {\n    constructor() {\n      super(...arguments);\n      /** The group number of the item. */\n      this.fdOverflowGroup = 0;\n    }\n  }\n  ToolbarOverflowGroupDirective.ɵfac = /* @__PURE__ */function () {\n    let ɵToolbarOverflowGroupDirective_BaseFactory;\n    return function ToolbarOverflowGroupDirective_Factory(t) {\n      return (ɵToolbarOverflowGroupDirective_BaseFactory || (ɵToolbarOverflowGroupDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarOverflowGroupDirective)))(t || ToolbarOverflowGroupDirective);\n    };\n  }();\n  ToolbarOverflowGroupDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToolbarOverflowGroupDirective,\n    selectors: [[\"\", \"fdOverflowGroup\", \"\"]],\n    inputs: {\n      fdOverflowGroup: \"fdOverflowGroup\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ToolbarOverflowGroupDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedToolbarSizeDirective = /*#__PURE__*/(() => {\n  class DeprecatedToolbarSizeDirective extends BehaviorSubject {\n    /** Size of the toolbar. */\n    set size(value) {\n      switch (value) {\n        case 'cozy':\n          this.next(ContentDensityMode.COZY);\n          break;\n        case 'compact':\n          this.next(ContentDensityMode.COMPACT);\n          break;\n        case 'condensed':\n          this.next(ContentDensityMode.CONDENSED);\n          break;\n        default:\n          this.next(ContentDensityMode.COMPACT);\n      }\n    }\n    /** @hidden */\n    constructor() {\n      super(ContentDensityMode.COMPACT);\n      /** @hidden */\n      this.alternative = {\n        name: 'Use [fdContentDensity] directive instead',\n        link: ['/core', 'content-density']\n      };\n      this.message = `Usage of fd-toolbar[size] is deprecated`;\n      if (isDevMode()) {\n        console.warn(`${this.message}. Use [fdContentDensity] directive instead.`);\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this.complete();\n    }\n  }\n  DeprecatedToolbarSizeDirective.ɵfac = function DeprecatedToolbarSizeDirective_Factory(t) {\n    return new (t || DeprecatedToolbarSizeDirective)();\n  };\n  DeprecatedToolbarSizeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedToolbarSizeDirective,\n    selectors: [[\"fd-toolbar\", \"size\", \"\"]],\n    inputs: {\n      size: \"size\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedToolbarSizeDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedToolbarSizeDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst components = [ToolbarComponent, ToolbarItemDirective, ToolbarSpacerComponent, ToolbarSeparatorComponent, ToolbarFormLabelDirective, ToolbarLabelDirective, ToolbarOverflowButtonDirective, ToolbarOverflowButtonMenuDirective, ToolbarOverflowPriorityDirective, ToolbarOverflowGroupDirective, DeprecatedToolbarSizeDirective];\nlet ToolbarModule = /*#__PURE__*/(() => {\n  class ToolbarModule {}\n  ToolbarModule.ɵfac = function ToolbarModule_Factory(t) {\n    return new (t || ToolbarModule)();\n  };\n  ToolbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToolbarModule\n  });\n  ToolbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, ButtonModule, PopoverModule, ContentDensityModule, ContentDensityModule]\n  });\n  return ToolbarModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DeprecatedToolbarSizeDirective, ToolbarComponent, ToolbarFormLabelDirective, ToolbarItemDirective, ToolbarLabelDirective, ToolbarModule, ToolbarOverflowButtonDirective, ToolbarOverflowButtonMenuDirective, ToolbarOverflowGroupDirective, ToolbarOverflowPriorityDirective, ToolbarSeparatorComponent, ToolbarSpacerComponent };\n//# sourceMappingURL=fundamental-ngx-core-toolbar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}