{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport * as i6 from '@fundamental-ngx/core/popover';\nimport { PopoverService, PopoverModule } from '@fundamental-ngx/core/popover';\nimport * as i7 from '@fundamental-ngx/core/input-group';\nimport { InputGroupInputDirective, InputGroupModule } from '@fundamental-ngx/core/input-group';\nimport * as i8 from '@fundamental-ngx/core/time';\nimport { TimeComponent, TimeModule } from '@fundamental-ngx/core/time';\nimport * as i9 from '@fundamental-ngx/i18n';\nimport { I18nModule } from '@fundamental-ngx/i18n';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i3 from '@fundamental-ngx/core/shared';\nimport * as i1 from '@fundamental-ngx/core/datetime';\nimport { DATE_TIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport * as i2 from '@fundamental-ngx/core/form';\nimport { PopoverFormMessageService, registerFormItemControl, FormMessageModule } from '@fundamental-ngx/core/form';\nimport { DeprecatedCompactDirective, CONTENT_DENSITY_DIRECTIVE, ContentDensityModule } from '@fundamental-ngx/core/content-density';\n\n/** Creates an error to be thrown when attempting to use an invalid date implementation. */\nconst _c0 = [\"inputGroupComponent\"];\nfunction TimePickerComponent_fd_form_message_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fd-form-message\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"embedded\", true)(\"type\", ctx_r1.state);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1._message, \" \");\n  }\n}\nfunction TimePickerComponent_fd_time_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-time\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function TimePickerComponent_fd_time_10_Template_fd_time_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7._timeComponentValueChanged($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"tablet\", ctx_r2.tablet)(\"disabled\", ctx_r2.disabled)(\"keepTwoDigits\", ctx_r2.keepTwoDigitsTime)(\"ngModel\", ctx_r2.time)(\"meridian\", ctx_r2._meridian)(\"displayHours\", ctx_r2._displayHours)(\"displayMinutes\", ctx_r2._displayMinutes)(\"displaySeconds\", ctx_r2._displaySeconds)(\"spinnerButtons\", ctx_r2.spinnerButtons);\n  }\n}\nfunction TimePickerComponent_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.valueStateSuccessMessage);\n  }\n}\nfunction TimePickerComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.valueStateInformationMessage);\n  }\n}\nfunction TimePickerComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.valueStateWarningMessage);\n  }\n}\nfunction TimePickerComponent_ng_container_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.valueStateErrorMessage);\n  }\n}\nconst _c1 = function () {\n  return [];\n};\nconst _c2 = [\"*\"];\nfunction createMissingDateImplementationError(provider) {\n  return Error(`FdTime: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: FdDatetimeModule, or provide a ` + `custom implementation.`);\n}\nlet timePickerCounter = 0;\nlet TimePickerComponent = /*#__PURE__*/(() => {\n  class TimePickerComponent {\n    /** Text displayed in message */\n    set message(message) {\n      this._message = message;\n      this._popoverFormMessage.message = message;\n    }\n    /** Type of the message. Can be 'success' | 'error' | 'warning' | 'information' */\n    set messageType(messageType) {\n      this._messageType = messageType;\n      this._popoverFormMessage.messageType = messageType;\n    }\n    /**\n     * The trigger events that will open/close the message box.\n     * Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).\n     */\n    set messageTriggers(triggers) {\n      this._messageTriggers = triggers;\n      this._popoverFormMessage.triggers = triggers;\n    }\n    /**\n     *  The state of the form control - applies css classes.\n     *  Also this is applied to message.\n     *  Can be `success`, `error`, `warning`, `information` or blank for default.\n     */\n    set state(state) {\n      this._state = state;\n      this._popoverFormMessage.messageType = state;\n    }\n    get state() {\n      if (this._state == null && this.useValidation && this._isInvalidTimeInput) {\n        return 'error';\n      }\n      return this._state ?? 'default';\n    }\n    /** @hidden */\n    get _placeholder() {\n      return this.placeholder || this._getPlaceholder();\n    }\n    /** @hidden */\n    constructor(_changeDetectorRef, _elementRef,\n    // Use @Optional to avoid angular injection error message and throw our own which is more precise one\n    _dateTimeAdapter, _dateTimeFormats, _popoverFormMessage, _valueStateAriaMessagesService) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._dateTimeAdapter = _dateTimeAdapter;\n      this._dateTimeFormats = _dateTimeFormats;\n      this._popoverFormMessage = _popoverFormMessage;\n      this._valueStateAriaMessagesService = _valueStateAriaMessagesService;\n      /** If it is mandatory field */\n      this.required = false;\n      /** Whether to show spinner buttons */\n      this.spinnerButtons = true;\n      /** Whether a null input is considered valid(success). */\n      this.allowNull = true;\n      /** Defines if time component should be used with tablet mode */\n      this.tablet = false;\n      /** @hidden */\n      this._message = null;\n      /** @hidden */\n      this._messageType = null;\n      /** @hidden */\n      this._messageTriggers = ['focusin', 'focusout'];\n      /**\n       *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n       *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n       */\n      this.placement = 'bottom-start';\n      /** Whether to validate the time picker input. */\n      this.useValidation = true;\n      /** @hidden */\n      this._state = null;\n      /**\n       * Whether AddOn Button should be focusable\n       * @default true\n       */\n      this.buttonFocusable = true;\n      /**\n       * When set to true, time inputs won't allow to have 1 digit\n       * for example 9 will become 09\n       * but 12 will be kept as 12.\n       */\n      this.keepTwoDigitsTime = false;\n      /**\n       * Value state \"success\" aria message.\n       */\n      this.valueStateSuccessMessage = this._valueStateAriaMessagesService.success;\n      /**\n       * Value state \"information\" aria message.\n       */\n      this.valueStateInformationMessage = this._valueStateAriaMessagesService.information;\n      /**\n       * Value state \"warning\" aria message.\n       */\n      this.valueStateWarningMessage = this._valueStateAriaMessagesService.warning;\n      /**\n       * Value state \"error\" aria message.\n       */\n      this.valueStateErrorMessage = this._valueStateAriaMessagesService.error;\n      /** Event emitted when the state of the isOpen property changes. */\n      this.isOpenChange = new EventEmitter();\n      /**\n       * @hidden\n       * Whether the input time is valid(success). Internal use.\n       */\n      this._isInvalidTimeInput = false;\n      /**\n       * @hidden\n       * Input field value\n       */\n      this._inputTimeValue = '';\n      /** @hidden */\n      this._formValueStateMessageId = `fd-time-picker-form-message-${timePickerCounter++}`;\n      /** @hidden */\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._subscriptions = new Subscription();\n      /** @hidden */\n      this.onChange = () => {};\n      /** @hidden */\n      this.onTouched = () => {};\n      if (!this._dateTimeAdapter) {\n        throw createMissingDateImplementationError('DateTimeAdapter');\n      }\n      if (!this._dateTimeFormats) {\n        throw createMissingDateImplementationError('DATE_TIME_FORMATS');\n      }\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._calculateTimeOptions();\n      this._formatTimeInputField();\n      this._dateTimeAdapter.localeChanges.pipe(takeUntil(this._onDestroy$)).subscribe(() => {\n        this._calculateTimeOptions();\n        this._formatTimeInputField();\n        this._changeDetectorRef.detectChanges();\n      });\n    }\n    /** @hidden */\n    ngOnChanges(changes) {\n      if (['displayHours', 'displayMinutes', 'displaySeconds', 'meridian', 'displayFormat'].some(change => change in changes)) {\n        this._calculateTimeOptions();\n      }\n      if (changes.displayFormat) {\n        this._formatTimeInputField();\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this.initialiseVariablesInMessageService();\n    }\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate() {\n      if (this._isInvalidTimeInput) {\n        return {\n          timeValidation: {\n            valid: false\n          }\n        };\n      }\n      return null;\n    }\n    /**\n     * Returns the current value of the time input.\n     */\n    getTime() {\n      return this.time;\n    }\n    /**\n     * Returns format options to be used during time formatting.\n     */\n    getDisplayFormat() {\n      return this.displayFormat || this._dateTimeFormats.display.timeInput;\n    }\n    /**\n     * Returns format options to be used during time parsing.\n     */\n    getParseFormat() {\n      return this.parseFormat || this._dateTimeFormats.parse.timeInput;\n    }\n    /** @hidden */\n    _getFormattedTime(time = this.time) {\n      let formattedTime = '';\n      try {\n        if (this.allowNull && time === null) {\n          return '';\n        }\n        formattedTime = this._dateTimeAdapter.format(time, this.getDisplayFormat());\n      } catch (e) {}\n      return formattedTime;\n    }\n    /**\n     *  @hidden\n     *  When the open state is changed, there should be at least one active item, which by default is hour.\n     */\n    _setIsOpen(isOpen) {\n      this.isOpen = isOpen;\n      this._onOpenStateChanged(isOpen);\n    }\n    /**\n     * @hidden\n     * Time input field changes handler\n     */\n    _timeInputChanged(inputValue) {\n      inputValue = inputValue.trim();\n      // check if value has been changed\n      if (this._inputTimeValue === inputValue) {\n        return;\n      }\n      this._inputTimeValue = inputValue;\n      if (inputValue === '') {\n        this.time = null;\n        this._isInvalidTimeInput = !this.allowNull;\n      }\n      if (inputValue !== '') {\n        this.time = this._dateTimeAdapter.parse(inputValue, this.getParseFormat());\n        this._isInvalidTimeInput = !this._dateTimeAdapter.isValid(this.time);\n      }\n      this.onChange(this.time);\n      this._changeDetectorRef.detectChanges();\n    }\n    /** @hidden */\n    _inputGroupClicked($event) {\n      if (!this.isOpen && !this.disabled) {\n        $event.stopPropagation();\n        this._setIsOpen(true);\n      }\n    }\n    /** @hidden */\n    _addOnButtonClicked() {\n      if (!this.disabled) {\n        this._setIsOpen(!this.isOpen);\n      }\n    }\n    /** @hidden */\n    _popoverClosed() {\n      this._setIsOpen(false);\n    }\n    /** @hidden */\n    _getPlaceholder() {\n      let retVal = '';\n      if (this._displayHours) {\n        retVal = retVal + 'hh';\n      }\n      if (this._displayMinutes) {\n        retVal = retVal + ':mm';\n      }\n      if (this._displaySeconds) {\n        retVal = retVal + ':ss';\n      }\n      if (this._meridian) {\n        retVal = retVal + ' am/pm';\n      }\n      return retVal;\n    }\n    /** @hidden */\n    _timeComponentValueChanged(time) {\n      if (this._dateTimeAdapter.dateTimesEqual(time, this.time)) {\n        return;\n      }\n      this._inputTimeValue = this._getFormattedTime(time);\n      this.time = time;\n      this._isInvalidTimeInput = !this._dateTimeAdapter.isValid(time);\n      this.onChange(time);\n      this._changeDetectorRef.detectChanges();\n    }\n    // #region ControlValueAccessor\n    /** @hidden */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** @hidden */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** @hidden */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetectorRef.detectChanges();\n    }\n    /** @hidden */\n    writeValue(time) {\n      if (!time) {\n        this.time = null;\n        this._inputTimeValue = '';\n        this._isInvalidTimeInput = !this.allowNull;\n      } else {\n        this.time = this._dateTimeAdapter.parse(time, this.getParseFormat());\n        this._inputTimeValue = this._getFormattedTime(time);\n        this._isInvalidTimeInput = !this._dateTimeAdapter.isValid(time);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    // #endregion ControlValueAccessor\n    /** @hidden */\n    _formatTimeInputField(time = this.time) {\n      return this._inputTimeValue = this._getFormattedTime(time);\n    }\n    /** @hidden */\n    _changeMessageVisibility() {\n      if (this.isOpen) {\n        this._popoverFormMessage.hide();\n      } else {\n        this._popoverFormMessage.show();\n      }\n    }\n    /** @hidden */\n    _onOpenStateChanged(isOpen) {\n      this.isOpenChange.emit(isOpen);\n      this._changeMessageVisibility();\n      if (isOpen) {\n        this._changeDetectorRef.detectChanges();\n        this.child.focusActiveColumn();\n      }\n      // focus input control every time popup is closed\n      if (!isOpen && this._inputElement) {\n        this._inputElement.nativeElement.focus();\n      }\n    }\n    /** @hidden */\n    _focusOut(event) {\n      if (!this._elementRef.nativeElement.contains(event.relatedTarget)) {\n        this.onTouched();\n      }\n    }\n    /** @hidden */\n    _calculateTimeOptions() {\n      const format = this.getDisplayFormat();\n      // default meridian option based on format option\n      this._meridian = this.meridian != null ? this.meridian : this._dateTimeAdapter.isTimeFormatIncludesDayPeriod(format);\n      // default seconds option based on format option\n      this._displaySeconds = this.displaySeconds != null ? this.displaySeconds : this._dateTimeAdapter.isTimeFormatIncludesSeconds(format);\n      // default minutes option based on format option\n      this._displayMinutes = this.displayMinutes != null ? this.displayMinutes : this._dateTimeAdapter.isTimeFormatIncludesMinutes(format);\n      // default hours option based on format option\n      this._displayHours = this.displayHours != null ? this.displayHours : this._dateTimeAdapter.isTimeFormatIncludesHours(format);\n    }\n    /** @hidden */\n    initialiseVariablesInMessageService() {\n      this._popoverFormMessage.init(this._inputGroupElement);\n      this._popoverFormMessage.message = this._message ?? '';\n      this._popoverFormMessage.triggers = this._messageTriggers;\n      this._popoverFormMessage.messageType = this._state ?? 'default';\n    }\n  }\n  TimePickerComponent.ɵfac = function TimePickerComponent_Factory(t) {\n    return new (t || TimePickerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DatetimeAdapter, 8), i0.ɵɵdirectiveInject(DATE_TIME_FORMATS, 8), i0.ɵɵdirectiveInject(i2.PopoverFormMessageService), i0.ɵɵdirectiveInject(i3.ValueStateAriaMessageService));\n  };\n  TimePickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TimePickerComponent,\n    selectors: [[\"fd-time-picker\"]],\n    viewQuery: function TimePickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TimeComponent, 5);\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n        i0.ɵɵviewQuery(InputGroupInputDirective, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.child = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputGroupElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    hostAttrs: [1, \"fd-time-picker\", \"fd-timepicker-custom\"],\n    hostBindings: function TimePickerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusout\", function TimePickerComponent_focusout_HostBindingHandler($event) {\n          return ctx._focusOut($event);\n        })(\"blur\", function TimePickerComponent_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    inputs: {\n      time: \"time\",\n      inputId: \"inputId\",\n      disabled: \"disabled\",\n      required: \"required\",\n      spinnerButtons: \"spinnerButtons\",\n      meridian: \"meridian\",\n      displaySeconds: \"displaySeconds\",\n      displayMinutes: \"displayMinutes\",\n      displayHours: \"displayHours\",\n      placeholder: \"placeholder\",\n      timePickerInputLabel: \"timePickerInputLabel\",\n      timePickerButtonLabel: \"timePickerButtonLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      allowNull: \"allowNull\",\n      tablet: \"tablet\",\n      message: \"message\",\n      messageType: \"messageType\",\n      messageTriggers: \"messageTriggers\",\n      placement: \"placement\",\n      useValidation: \"useValidation\",\n      state: \"state\",\n      buttonFocusable: \"buttonFocusable\",\n      keepTwoDigitsTime: \"keepTwoDigitsTime\",\n      displayFormat: \"displayFormat\",\n      parseFormat: \"parseFormat\",\n      valueStateSuccessMessage: \"valueStateSuccessMessage\",\n      valueStateInformationMessage: \"valueStateInformationMessage\",\n      valueStateWarningMessage: \"valueStateWarningMessage\",\n      valueStateErrorMessage: \"valueStateErrorMessage\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TimePickerComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => TimePickerComponent),\n      multi: true\n    }, PopoverFormMessageService, PopoverService, registerFormItemControl(TimePickerComponent)]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 19,\n    vars: 36,\n    consts: [[3, \"isOpen\", \"triggers\", \"disabled\", \"placement\", \"closeOnEscapeKey\", \"focusAutoCapture\", \"focusTrapped\", \"isOpenChange\"], [\"glyph\", \"fob-watch\", 3, \"button\", \"state\", \"disabled\", \"buttonFocusable\", \"isControl\", \"isExpanded\", \"glyphAriaLabel\", \"addOnButtonClicked\"], [\"inputGroupComponent\", \"\"], [\"type\", \"text\", \"fd-input-group-input\", \"\", 1, \"fd-input\", 3, \"value\", \"disabled\", \"placeholder\", \"focusout\", \"keyup.enter\"], [3, \"embedded\", \"type\", 4, \"ngIf\"], [3, \"tablet\", \"disabled\", \"keepTwoDigits\", \"ngModel\", \"meridian\", \"displayHours\", \"displayMinutes\", \"displaySeconds\", \"spinnerButtons\", \"ngModelChange\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 2, \"display\", \"none\"], [\"aria-atomic\", \"true\", \"aria-live\", \"assertive\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"embedded\", \"type\"], [3, \"tablet\", \"disabled\", \"keepTwoDigits\", \"ngModel\", \"meridian\", \"displayHours\", \"displayMinutes\", \"displaySeconds\", \"spinnerButtons\", \"ngModelChange\"]],\n    template: function TimePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"fd-popover\", 0);\n        i0.ɵɵlistener(\"isOpenChange\", function TimePickerComponent_Template_fd_popover_isOpenChange_0_listener($event) {\n          return ctx.isOpen = $event;\n        })(\"isOpenChange\", function TimePickerComponent_Template_fd_popover_isOpenChange_0_listener($event) {\n          return ctx._onOpenStateChanged($event);\n        });\n        i0.ɵɵelementStart(1, \"fd-popover-control\")(2, \"fd-input-group\", 1, 2);\n        i0.ɵɵlistener(\"addOnButtonClicked\", function TimePickerComponent_Template_fd_input_group_addOnButtonClicked_2_listener() {\n          return ctx._addOnButtonClicked();\n        });\n        i0.ɵɵpipe(4, \"fdTranslate\");\n        i0.ɵɵelementStart(5, \"input\", 3);\n        i0.ɵɵlistener(\"focusout\", function TimePickerComponent_Template_input_focusout_5_listener($event) {\n          return ctx._timeInputChanged($event.currentTarget.value);\n        })(\"keyup.enter\", function TimePickerComponent_Template_input_keyup_enter_5_listener($event) {\n          return ctx._timeInputChanged($event.currentTarget.value);\n        });\n        i0.ɵɵpipe(6, \"fdTranslate\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"fd-popover-body\");\n        i0.ɵɵtemplate(8, TimePickerComponent_fd_form_message_8_Template, 2, 3, \"fd-form-message\", 4);\n        i0.ɵɵprojection(9);\n        i0.ɵɵtemplate(10, TimePickerComponent_fd_time_10_Template, 1, 9, \"fd-time\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"div\", 7);\n        i0.ɵɵelementContainerStart(13, 8);\n        i0.ɵɵtemplate(14, TimePickerComponent_ng_container_14_Template, 2, 1, \"ng-container\", 9);\n        i0.ɵɵtemplate(15, TimePickerComponent_ng_container_15_Template, 2, 1, \"ng-container\", 9);\n        i0.ɵɵtemplate(16, TimePickerComponent_ng_container_16_Template, 2, 1, \"ng-container\", 9);\n        i0.ɵɵtemplate(17, TimePickerComponent_ng_container_17_Template, 2, 1, \"ng-container\", 9);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"isOpen\", ctx.isOpen)(\"triggers\", i0.ɵɵpureFunction0(35, _c1))(\"disabled\", ctx.disabled)(\"placement\", ctx.placement)(\"closeOnEscapeKey\", true)(\"focusAutoCapture\", false)(\"focusTrapped\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"button\", true)(\"state\", ctx.state)(\"disabled\", ctx.disabled)(\"buttonFocusable\", ctx.buttonFocusable)(\"isControl\", true)(\"isExpanded\", ctx.isOpen)(\"glyphAriaLabel\", ctx.timePickerButtonLabel || i0.ɵɵpipeBind1(4, 31, \"coreTimePicker.timePickerButtonLabel\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", ctx._inputTimeValue)(\"disabled\", ctx.disabled)(\"placeholder\", ctx._placeholder);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-label\", ctx.timePickerInputLabel || i0.ɵɵpipeBind1(6, 33, \"coreTimePicker.timePickerInputLabel\"))(\"aria-describedby\", ctx._formValueStateMessageId)(\"aria-required\", ctx.required);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx._message);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx._formValueStateMessageId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.state);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"success\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"information\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"warning\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx._message, \" \");\n      }\n    },\n    dependencies: [i4.NgIf, i4.NgSwitch, i4.NgSwitchCase, i5.NgControlStatus, i5.NgModel, i6.PopoverControlComponent, i6.PopoverBodyComponent, i6.PopoverComponent, i7.InputGroupComponent, i7.InputGroupInputDirective, i8.TimeComponent, i2.FormMessageComponent, i9.FdTranslatePipe],\n    styles: [\".fd-timepicker-custom{display:inline-block}.fd-timepicker-custom fd-popover{display:block}.fd-timepicker-custom fd-time{width:auto}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TimePickerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DeprecatedTimepickerCompactDirective = /*#__PURE__*/(() => {\n  class DeprecatedTimepickerCompactDirective extends DeprecatedCompactDirective {\n    /** @hidden */\n    constructor() {\n      super('fd-time-picker');\n    }\n  }\n  DeprecatedTimepickerCompactDirective.ɵfac = function DeprecatedTimepickerCompactDirective_Factory(t) {\n    return new (t || DeprecatedTimepickerCompactDirective)();\n  };\n  DeprecatedTimepickerCompactDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DeprecatedTimepickerCompactDirective,\n    selectors: [[\"fd-time-picker\", \"compact\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CONTENT_DENSITY_DIRECTIVE,\n      useExisting: forwardRef(() => DeprecatedTimepickerCompactDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return DeprecatedTimepickerCompactDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TimePickerModule = /*#__PURE__*/(() => {\n  class TimePickerModule {}\n  TimePickerModule.ɵfac = function TimePickerModule_Factory(t) {\n    return new (t || TimePickerModule)();\n  };\n  TimePickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TimePickerModule\n  });\n  TimePickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, PopoverModule, InputGroupModule, TimeModule, FormMessageModule, ContentDensityModule, I18nModule, PopoverModule, InputGroupModule, TimeModule, ContentDensityModule]\n  });\n  return TimePickerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DeprecatedTimepickerCompactDirective, TimePickerComponent, TimePickerModule };\n//# sourceMappingURL=fundamental-ngx-core-time-picker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}