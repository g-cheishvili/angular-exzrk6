{"ast":null,"code":"import * as i5 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i4 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, Output, ViewChild, ContentChildren, HostBinding, HostListener, SkipSelf, Pipe, NgModule } from '@angular/core';\nimport * as i3 from '@fundamental-ngx/core/button';\nimport { ButtonModule } from '@fundamental-ngx/core/button';\nimport * as i1$1 from '@fundamental-ngx/core/icon';\nimport { IconModule } from '@fundamental-ngx/core/icon';\nimport * as i4$1 from '@fundamental-ngx/i18n';\nimport { I18nModule } from '@fundamental-ngx/i18n';\nimport { Subject, fromEvent, throttleTime, Subscription } from 'rxjs';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { takeUntil, take, filter } from 'rxjs/operators';\nimport * as i3$1 from '@fundamental-ngx/cdk/utils';\nimport { KeyUtil } from '@fundamental-ngx/cdk/utils';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nfunction SplitterSplitPaneComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nconst _c0 = [\"*\"];\nfunction SplitterPaginationComponent_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function SplitterPaginationComponent_button_0_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const page_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2._changePage(page_r1));\n    })(\"keydown.enter\", function SplitterPaginationComponent_button_0_Template_button_keydown_enter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const page_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4._changePage(page_r1));\n    });\n    i0.ɵɵpipe(1, \"fdTranslate\");\n    i0.ɵɵelement(2, \"span\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const page_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"fd-splitter__pagination-item--active\", page_r1 === ctx_r0.currentPage);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.paginationItemAriaLabel || i0.ɵɵpipeBind1(1, 4, \"coreSplitter.paginationItemAriaLabel\"))(\"aria-checked\", page_r1 === ctx_r0.currentPage);\n  }\n}\nfunction SplitterPaneContainerComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = function (a0) {\n  return [a0];\n};\nconst _c2 = function (a0) {\n  return {\n    panes: a0,\n    showResizer: true\n  };\n};\nfunction SplitterPaneContainerComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, SplitterPaneContainerComponent_ng_container_0_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c2, i0.ɵɵpureFunction1(2, _c1, ctx_r5._defaultPane)));\n  }\n}\nfunction SplitterPaneContainerComponent_ng_container_0_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction SplitterPaneContainerComponent_ng_container_0_fd_splitter_pagination_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-splitter-pagination\", 8);\n    i0.ɵɵlistener(\"onPageChange\", function SplitterPaneContainerComponent_ng_container_0_fd_splitter_pagination_6_Template_fd_splitter_pagination_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9._onPageChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"pages\", ctx_r7._pages)(\"currentPage\", ctx_r7._currentPage);\n  }\n}\nconst _c3 = function (a0) {\n  return {\n    panes: a0\n  };\n};\nfunction SplitterPaneContainerComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, SplitterPaneContainerComponent_ng_container_0_ng_container_1_Template, 2, 6, \"ng-container\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4)(3, \"div\", 5);\n    i0.ɵɵtemplate(4, SplitterPaneContainerComponent_ng_container_0_ng_container_4_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵpipe(5, \"noDefaultPane\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, SplitterPaneContainerComponent_ng_container_0_fd_splitter_pagination_6_Template, 1, 2, \"fd-splitter-pagination\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0._defaultPane == null ? null : ctx_r0._defaultPane.isOnCanvas) && ctx_r0._activePanes.length > 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"fd-splitter__pane-container--horizontal\", !ctx_r0._isRootContainer && ctx_r0._isHorizontal)(\"fd-splitter__pane-container--vertical\", ctx_r0._isRootContainer || ctx_r0._isVertical);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c3, i0.ɵɵpipeBind2(5, 8, ctx_r0._activePanes, (ctx_r0._defaultPane == null ? null : ctx_r0._defaultPane.isOnCanvas) && ctx_r0._activePanes.length > 1)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._pages.length);\n  }\n}\nfunction SplitterPaneContainerComponent_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction SplitterPaneContainerComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SplitterPaneContainerComponent_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, ctx_r2._panesOnCanvas));\n  }\n}\nfunction SplitterPaneContainerComponent_ng_template_3_ng_container_0_ng_template_2_Template(rf, ctx) {}\nfunction SplitterPaneContainerComponent_ng_template_3_ng_container_0_fd_splitter_resizer_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fd-splitter-resizer\", 13);\n    i0.ɵɵlistener(\"startResize\", function SplitterPaneContainerComponent_ng_template_3_ng_container_0_fd_splitter_resizer_3_Template_fd_splitter_resizer_startResize_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r19._startResize());\n    })(\"endResize\", function SplitterPaneContainerComponent_ng_template_3_ng_container_0_fd_splitter_resizer_3_Template_fd_splitter_resizer_endResize_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r21._endResize());\n    })(\"resize\", function SplitterPaneContainerComponent_ng_template_3_ng_container_0_fd_splitter_resizer_3_Template_fd_splitter_resizer_resize_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const pane_r15 = i0.ɵɵnextContext().$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22._onResize(pane_r15.id, $event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(\"fd-splitter__resizer--\" + ctx_r18.resizerType);\n    i0.ɵɵproperty(\"orientation\", ctx_r18.orientation);\n  }\n}\nfunction SplitterPaneContainerComponent_ng_template_3_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"section\", 10);\n    i0.ɵɵtemplate(2, SplitterPaneContainerComponent_ng_template_3_ng_container_0_ng_template_2_Template, 0, 0, \"ng-template\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, SplitterPaneContainerComponent_ng_template_3_ng_container_0_fd_splitter_resizer_3_Template, 1, 3, \"fd-splitter-resizer\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const pane_r15 = ctx.$implicit;\n    const last_r16 = ctx.last;\n    const showResizer_r13 = i0.ɵɵnextContext().showResizer;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r14._getPaneStyles(pane_r15));\n    i0.ɵɵproperty(\"id\", pane_r15.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkPortalOutlet\", pane_r15._content);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !last_r16 || showResizer_r13);\n  }\n}\nfunction SplitterPaneContainerComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SplitterPaneContainerComponent_ng_template_3_ng_container_0_Template, 4, 5, \"ng-container\", 9);\n  }\n  if (rf & 2) {\n    const panes_r12 = ctx.panes;\n    i0.ɵɵproperty(\"ngForOf\", panes_r12);\n  }\n}\nconst PANE_AUTO_SIZE = 'auto';\nconst PANE_NONE_SIZE = 'none';\nconst RESIZER_SIZE_PX = 16;\nconst ROOT_PAGE = 'FD_SPLITTER_ROOT_PAGE';\nlet paneUniqueId = 0;\n/** @dynamic */\nlet SplitterSplitPaneComponent = /*#__PURE__*/(() => {\n  class SplitterSplitPaneComponent {\n    /** Size (height in vertical orientation, width in horizontal orientation) of the pane. */\n    set size(size) {\n      this._size = size;\n      this._actualSize = this._size;\n    }\n    get size() {\n      return this._size;\n    }\n    /** Returns if the pane is on canvas. */\n    get isOnCanvas() {\n      return this._isOnCanvas;\n    }\n    /** @hidden */\n    get _content() {\n      return this._contentPortal;\n    }\n    /** @hidden */\n    get _window() {\n      return this._document?.defaultView;\n    }\n    /** @hidden */\n    constructor(_viewContainerRef, _viewportRuler, _document) {\n      this._viewContainerRef = _viewContainerRef;\n      this._viewportRuler = _viewportRuler;\n      this._document = _document;\n      /** Id of the split pane. Generated if not provided. */\n      this.id = `fd-splitter-split-pane-${paneUniqueId++}`;\n      /** Whether pane is reachable using pagination bar when is off-canvas. */\n      this.demandPane = true;\n      /** Event emitted when the pane appears on/disappears out of canvas. */\n      this.toggleOnCanvas = new EventEmitter();\n      /** @hidden */\n      this._actualSize = PANE_AUTO_SIZE;\n      /** @hidden */\n      this._size = PANE_AUTO_SIZE;\n      /** @hidden */\n      this._contentPortal = null;\n      /** @hidden */\n      this._isOnCanvas = true;\n      /** @hidden */\n      this._unsubscribe$ = new Subject();\n    }\n    /** @hidden */\n    ngOnInit() {\n      this._contentPortal = new TemplatePortal(this._templateRef, this._viewContainerRef);\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._processPaneOnCanvas();\n      this._listenToResize();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._unsubscribe$.next();\n      this._unsubscribe$.complete();\n    }\n    /** Hide pane from the canvas. */\n    hideFromCanvas() {\n      if (!this.isOnCanvas) {\n        return;\n      }\n      this._isOnCanvas = false;\n      this.toggleOnCanvas.emit(false);\n    }\n    /** Show pane on the canvas. */\n    showOnCanvas() {\n      if (this.isOnCanvas) {\n        return;\n      }\n      this._isOnCanvas = true;\n      this.toggleOnCanvas.emit(true);\n    }\n    /** @hidden */\n    _listenToResize() {\n      if (!this._window) {\n        return;\n      }\n      this._viewportRuler.change(10).pipe(takeUntil(this._unsubscribe$)).subscribe(() => this._processPaneOnCanvas());\n    }\n    /** @hidden */\n    _processPaneOnCanvas() {\n      if (!this._window) {\n        return;\n      }\n      if (this.requiredParentWidth > this._window.innerWidth && this.isOnCanvas) {\n        this.hideFromCanvas();\n      }\n      if (this.requiredParentWidth < this._window.innerWidth && !this.isOnCanvas) {\n        this.showOnCanvas();\n      }\n    }\n  }\n  SplitterSplitPaneComponent.ɵfac = function SplitterSplitPaneComponent_Factory(t) {\n    return new (t || SplitterSplitPaneComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n  SplitterSplitPaneComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SplitterSplitPaneComponent,\n    selectors: [[\"fd-splitter-split-pane\"]],\n    viewQuery: function SplitterSplitPaneComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templateRef = _t.first);\n      }\n    },\n    inputs: {\n      size: \"size\",\n      id: \"id\",\n      requiredParentWidth: \"requiredParentWidth\",\n      demandPane: \"demandPane\"\n    },\n    outputs: {\n      toggleOnCanvas: \"toggleOnCanvas\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function SplitterSplitPaneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, SplitterSplitPaneComponent_ng_template_0_Template, 1, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SplitterSplitPaneComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SplitterComponent = /*#__PURE__*/(() => {\n  class SplitterComponent {\n    constructor() {\n      /** @hidden */\n      this._defaultPaneId$ = new Subject();\n    }\n    /** Id of the main pane. */\n    set defaultPaneId(value) {\n      this._defaultPaneId = value;\n      this._defaultPaneId$.next(this._defaultPaneId);\n    }\n    get defaultPaneId() {\n      return this._defaultPaneId;\n    }\n    /** Check whether certain pane is on canvas. */\n    isPaneOnCanvas(paneId) {\n      if (!this._panes.length) {\n        return false;\n      }\n      const paneToCheck = this._panes.find(pane => pane.id === paneId);\n      return !!paneToCheck?.isOnCanvas;\n    }\n    /** Hide certain pane from the canvas. */\n    hidePaneFromCanvas(paneId) {\n      if (!this._panes.length) {\n        return;\n      }\n      const paneToRemove = this._panes.find(pane => pane.id === paneId);\n      paneToRemove?.hideFromCanvas();\n    }\n    /** Show certain pane from the canvas. */\n    showPaneOnCanvas(paneId) {\n      if (!this._panes.length) {\n        return;\n      }\n      const paneToShow = this._panes.find(pane => pane.id === paneId);\n      paneToShow?.showOnCanvas();\n    }\n  }\n  SplitterComponent.ɵfac = function SplitterComponent_Factory(t) {\n    return new (t || SplitterComponent)();\n  };\n  SplitterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SplitterComponent,\n    selectors: [[\"fd-splitter\"]],\n    contentQueries: function SplitterComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, SplitterSplitPaneComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._panes = _t);\n      }\n    },\n    hostAttrs: [1, \"fd-splitter\"],\n    inputs: {\n      defaultPaneId: \"defaultPaneId\",\n      paginationItemAriaLabel: \"paginationItemAriaLabel\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function SplitterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"/*!\\n * Fundamental Library Styles v0.28.3\\n * Copyright (c) 2023 SAP SE or an SAP affiliate company.\\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/main/LICENSE)\\n */.fd-splitter{display:flex;flex-direction:row;height:100%;width:100%}.fd-splitter,.fd-splitter__pagination,.fd-splitter__pagination-item-dot,.fd-splitter__pane,.fd-splitter__pane-container,.fd-splitter__resizer,.fd-splitter__resizer-decoration-after,.fd-splitter__resizer-decoration-before,.fd-splitter__resizer-grip-icon{-webkit-box-sizing:border-box;border:0;box-sizing:border-box;color:var(--sapTextColor);font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;forced-color-adjust:none;line-height:var(--sapContent_LineHeight);margin:0;padding:0}.fd-splitter:after,.fd-splitter:before,.fd-splitter__pagination-item-dot:after,.fd-splitter__pagination-item-dot:before,.fd-splitter__pagination:after,.fd-splitter__pagination:before,.fd-splitter__pane-container:after,.fd-splitter__pane-container:before,.fd-splitter__pane:after,.fd-splitter__pane:before,.fd-splitter__resizer-decoration-after:after,.fd-splitter__resizer-decoration-after:before,.fd-splitter__resizer-decoration-before:after,.fd-splitter__resizer-decoration-before:before,.fd-splitter__resizer-grip-icon:after,.fd-splitter__resizer-grip-icon:before,.fd-splitter__resizer:after,.fd-splitter__resizer:before{box-sizing:inherit;font-size:inherit}.fd-splitter__resizer,.fd-splitter__resizer-decoration-after,.fd-splitter__resizer-decoration-before,.fd-splitter__resizer-grip,.fd-splitter__resizer-grip-icon{-webkit-user-select:none;user-select:none}.fd-splitter__pane,.fd-splitter__pane-container{max-height:100%;max-width:100%}.fd-splitter .fd-splitter__pane-container{-webkit-box-flex:1;-ms-flex-positive:1;display:flex;flex-direction:row;flex-grow:1;overflow:hidden}.fd-splitter .fd-splitter__pane-container--horizontal{flex-direction:column}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer{border-left:none;border-right:none;cursor:row-resize;height:1rem}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-hover .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-hover .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:hover .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:hover .fd-splitter__resizer-decoration-before{width:100%}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-focus,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:focus{z-index:5}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-active .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-active .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-focus .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer.is-focus .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:active .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:active .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:focus .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer:focus .fd-splitter__resizer-decoration-before{width:100%}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer .fd-splitter__resizer-decoration-before{height:.0625rem;min-width:4rem}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer .fd-splitter__resizer-decoration-before{background:linear-gradient(90deg,transparent,var(--fdSplitter_Resizer_Decoration_Background))}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer .fd-splitter__resizer-decoration-after{background:linear-gradient(270deg,transparent,var(--fdSplitter_Resizer_Decoration_Background))}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer .fd-splitter__resizer-grip{cursor:row-resize;max-height:1.5rem;max-width:2rem;min-width:2rem}.fd-splitter .fd-splitter__pane-container--horizontal>.fd-splitter__resizer .fd-splitter__resizer-grip-icon{margin-top:.0625rem}.fd-splitter .fd-splitter__pane-container--vertical{flex-direction:row}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer{border-bottom:none;border-top:none;cursor:col-resize;flex-direction:column;width:1rem}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-hover .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-hover .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:hover .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:hover .fd-splitter__resizer-decoration-before{height:100%}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-focus,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:focus{z-index:5}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-active .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-active .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-focus .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer.is-focus .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:active .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:active .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:focus .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer:focus .fd-splitter__resizer-decoration-before{height:100%}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-decoration-before{min-height:4rem;width:.0625rem}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-decoration-before{background:linear-gradient(180deg,transparent,var(--fdSplitter_Resizer_Decoration_Background))}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-decoration-after{background:linear-gradient(0deg,transparent,var(--fdSplitter_Resizer_Decoration_Background))}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-grip{cursor:col-resize;max-height:2rem;max-width:1.5rem;min-width:1.5rem}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-grip-icon{margin-left:.0625rem}.fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-grip-icon[dir=rtl],[dir=rtl] .fd-splitter .fd-splitter__pane-container--vertical>.fd-splitter__resizer .fd-splitter__resizer-grip-icon{margin-left:0;margin-right:.0625rem}.fd-splitter__split-pane{-webkit-box-flex:1;-ms-flex-positive:1;display:flex;flex-direction:column;flex-grow:1;overflow:auto;text-overflow:ellipsis}.fd-splitter .fd-splitter__resizer{-webkit-box-pack:center;-ms-flex-pack:center;align-items:center;background:var(--sapShell_Background);border:var(--fdSplitter_Resizer_Border);display:flex;justify-content:center}.fd-splitter .fd-splitter__resizer.is-focus,.fd-splitter .fd-splitter__resizer:focus{outline-color:var(--sapContent_FocusColor);outline-offset:-.125rem;outline-style:var(--sapContent_FocusStyle);outline-width:var(--sapContent_FocusWidth)}.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-decoration-before{transition:all .1s ease-in}.fd-splitter .fd-splitter__resizer.is-active .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__resizer.is-active .fd-splitter__resizer-decoration-before,.fd-splitter .fd-splitter__resizer:active .fd-splitter__resizer-decoration-after,.fd-splitter .fd-splitter__resizer:active .fd-splitter__resizer-decoration-before{background:var(--sapContent_Selected_ForegroundColor)}.fd-splitter .fd-splitter__resizer--translucent{background:var(--sapGroup_ContentBackground)}.fd-splitter .fd-splitter__resizer--transparent{background:transparent}.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-grip{-webkit-box-shadow:none;-ms-flex-negative:0;border-width:var(--fdSplitter_Resizer_Grip_Border_Width);box-shadow:none;flex-shrink:0;outline:none}.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-grip.is-hover,.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-grip:hover{background:var(--sapButton_Lite_Background)}.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-grip.is-active,.fd-splitter .fd-splitter__resizer .fd-splitter__resizer-grip:active{background:var(--sapButton_Lite_Background);color:var(--sapButton_Lite_TextColor)}.fd-splitter__pagination{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-box-align:center;-ms-flex-align:center;-ms-flex-negative:0;align-items:center;background:var(--sapPageFooter_Background);border-top:.0625rem solid var(--sapPageFooter_BorderColor);display:flex;flex-shrink:0;height:2.75rem;justify-content:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}.fd-splitter__pagination .fd-splitter__pagination-item{border-width:var(--fdSplitter_Pagination_Item_Border_Width)}.fd-splitter__pagination .fd-splitter__pagination-item.is-active:not(.fd-splitter__pagination-item--active) .fd-splitter__pagination-item-dot,.fd-splitter__pagination .fd-splitter__pagination-item:active:not(.fd-splitter__pagination-item--active) .fd-splitter__pagination-item-dot{background:var(--sapButton_Active_TextColor)}.fd-splitter__pagination .fd-splitter__pagination-item-dot{background:var(--sapContent_NonInteractiveIconColor);border-radius:100%;height:.25rem;width:.25rem}.fd-splitter__pagination .fd-splitter__pagination-item--active .fd-splitter__pagination-item-dot{background:var(--sapSelectedColor);height:.5rem;width:.5rem}.fd-splitter__pagination .fd-splitter__pagination-item--active.is-active,.fd-splitter__pagination .fd-splitter__pagination-item--active:active{background:var(--sapButton_Lite_Hover_Background)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SplitterComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SplitterPaginationComponent = /*#__PURE__*/(() => {\n  class SplitterPaginationComponent {\n    /**\n     * @hidden\n     * @deprecated use i18n capabilities instead\n     */\n    get paginationItemAriaLabel() {\n      return this._splitter.paginationItemAriaLabel;\n    }\n    /** @Hidden */\n    constructor(_splitter) {\n      this._splitter = _splitter;\n      /** Array of pages ids. */\n      this.pages = [];\n      /** Event emitted on page change. */\n      // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n      this.onPageChange = new EventEmitter();\n    }\n    /** @hidden */\n    _changePage(page) {\n      if (page === this.currentPage) {\n        return;\n      }\n      this.currentPage = page;\n      this.onPageChange.emit(this.currentPage);\n    }\n  }\n  SplitterPaginationComponent.ɵfac = function SplitterPaginationComponent_Factory(t) {\n    return new (t || SplitterPaginationComponent)(i0.ɵɵdirectiveInject(SplitterComponent));\n  };\n  SplitterPaginationComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SplitterPaginationComponent,\n    selectors: [[\"fd-splitter-pagination\"]],\n    hostAttrs: [1, \"fd-splitter__pagination\"],\n    hostVars: 1,\n    hostBindings: function SplitterPaginationComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", \"radiogroup\");\n      }\n    },\n    inputs: {\n      pages: \"pages\",\n      currentPage: \"currentPage\"\n    },\n    outputs: {\n      onPageChange: \"onPageChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"fd-button\", \"\", \"fdType\", \"transparent\", \"class\", \"fd-splitter__pagination-item\", \"role\", \"radio\", 3, \"fd-splitter__pagination-item--active\", \"click\", \"keydown.enter\", 4, \"ngFor\", \"ngForOf\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"role\", \"radio\", 1, \"fd-splitter__pagination-item\", 3, \"click\", \"keydown.enter\"], [1, \"fd-splitter__pagination-item-dot\"]],\n    template: function SplitterPaginationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SplitterPaginationComponent_button_0_Template, 3, 6, \"button\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.pages);\n      }\n    },\n    dependencies: [i4.NgForOf, i3.ButtonComponent, i4$1.FdTranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SplitterPaginationComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar SplitterPaneContainerOrientation = /*#__PURE__*/(() => {\n  (function (SplitterPaneContainerOrientation) {\n    SplitterPaneContainerOrientation[\"vertical\"] = \"vertical\";\n    SplitterPaneContainerOrientation[\"horizontal\"] = \"horizontal\";\n  })(SplitterPaneContainerOrientation || (SplitterPaneContainerOrientation = {}));\n  return SplitterPaneContainerOrientation;\n})();\n/** @dynamic */\nlet SplitterResizerComponent = /*#__PURE__*/(() => {\n  class SplitterResizerComponent {\n    /** @hidden */\n    get _role() {\n      return 'separator';\n    }\n    /** @hidden */\n    get _ariaOrientation() {\n      return this.orientation;\n    }\n    /** @hidden */\n    get _isHorizontal() {\n      return this.orientation === SplitterPaneContainerOrientation.horizontal;\n    }\n    /** @hidden */\n    get _isVertical() {\n      return this.orientation === SplitterPaneContainerOrientation.vertical;\n    }\n    /** @hidden */\n    constructor(_elementRef, _cdr, _ngZone, _document) {\n      this._elementRef = _elementRef;\n      this._cdr = _cdr;\n      this._ngZone = _ngZone;\n      this._document = _document;\n      /** Orientation of the splitter's host pane container. */\n      this.orientation = SplitterPaneContainerOrientation.vertical;\n      /** Event emitted after resizing has started. */\n      this.startResize = new EventEmitter();\n      /** Event emitted after resizing has ended. */\n      this.endResize = new EventEmitter();\n      /** Event emitted while resizing. */\n      // eslint-disable-next-line @angular-eslint/no-output-native\n      this.resize = new EventEmitter();\n      /** @hidden */\n      this._start = null;\n      /** @hidden */\n      this._isInFocus = false;\n      /** @hidden */\n      this._prevDiff = 0;\n      /** @hidden */\n      this._pointerMoveListener = new Subject();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._unsubscribe();\n    }\n    /** @hidden */\n    _onMouseDown(event) {\n      event.preventDefault();\n      this._start = this._isHorizontal ? event.clientY : event.clientX;\n      this.startResize.emit();\n      this._listenToPointerMove();\n    }\n    /** @hidden */\n    _onKeydown(event) {\n      if (KeyUtil.isKeyCode(event, [DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW])) {\n        event.preventDefault();\n        let diff;\n        if (this._isHorizontal) {\n          this._start = this._elementRef.nativeElement.getBoundingClientRect().left;\n          if (KeyUtil.isKeyCode(event, [UP_ARROW])) {\n            diff = this._start - 1;\n          }\n          if (KeyUtil.isKeyCode(event, [DOWN_ARROW])) {\n            diff = this._start + 1;\n          }\n        }\n        if (this._isVertical) {\n          this._start = this._elementRef.nativeElement.getBoundingClientRect().top;\n          if (KeyUtil.isKeyCode(event, [LEFT_ARROW])) {\n            diff = this._start - 1;\n          }\n          if (KeyUtil.isKeyCode(event, [RIGHT_ARROW])) {\n            diff = this._start + 1;\n          }\n        }\n        if (diff !== undefined) {\n          this.startResize.emit();\n          this._emitResize(diff);\n          this.endResize.emit();\n        }\n        this._unsubscribe(false);\n      }\n    }\n    /** @hidden */\n    _onFocus() {\n      this._isInFocus = true;\n      this._cdr.markForCheck();\n    }\n    /** @hidden */\n    _onBlur() {\n      this._isInFocus = false;\n      this._cdr.markForCheck();\n    }\n    /** @hidden */\n    _listenToPointerMove() {\n      this._pointerMoveListener = new Subject();\n      if (!this._document) {\n        return;\n      }\n      this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._document, 'mousemove').pipe(throttleTime(10), takeUntil(this._pointerMoveListener)).subscribe(event => {\n          this._ngZone.run(() => {\n            const newPosition = this._isHorizontal ? event.clientY : event.clientX;\n            this._emitResize(newPosition);\n            this._cdr.markForCheck();\n          });\n        });\n        fromEvent(this._document, 'mouseup').pipe(take(1), takeUntil(this._pointerMoveListener)).subscribe(() => {\n          this._ngZone.run(() => {\n            this.endResize.emit();\n            this._unsubscribe();\n            this._cdr.markForCheck();\n          });\n        });\n      });\n    }\n    /** @hidden */\n    _emitResize(newPosition) {\n      const diff = newPosition - (this._start ?? newPosition);\n      this.resize.emit(diff - this._prevDiff);\n      this._prevDiff = diff;\n    }\n    /** @hidden */\n    _unsubscribe(removeFocus = true) {\n      this._start = null;\n      this._prevDiff = 0;\n      this._pointerMoveListener?.next();\n      this._pointerMoveListener?.complete();\n      if (removeFocus) {\n        this._isInFocus = false;\n        this._cdr.markForCheck();\n      }\n    }\n  }\n  SplitterResizerComponent.ɵfac = function SplitterResizerComponent_Factory(t) {\n    return new (t || SplitterResizerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n  SplitterResizerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SplitterResizerComponent,\n    selectors: [[\"fd-splitter-resizer\"]],\n    hostAttrs: [1, \"fd-splitter__resizer\"],\n    hostVars: 5,\n    hostBindings: function SplitterResizerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousedown\", function SplitterResizerComponent_mousedown_HostBindingHandler($event) {\n          return ctx._onMouseDown($event);\n        })(\"keydown\", function SplitterResizerComponent_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        })(\"focus\", function SplitterResizerComponent_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function SplitterResizerComponent_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"tabindex\", 0);\n        i0.ɵɵattribute(\"role\", ctx._role)(\"aria-orientation\", ctx._ariaOrientation);\n        i0.ɵɵclassProp(\"is-active\", ctx._start != null || ctx._isInFocus);\n      }\n    },\n    inputs: {\n      orientation: \"orientation\"\n    },\n    outputs: {\n      startResize: \"startResize\",\n      endResize: \"endResize\",\n      resize: \"resize\"\n    },\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"fd-splitter__resizer-decoration-before\"], [\"fd-button\", \"\", \"fdType\", \"transparent\", \"tabindex\", \"-1\", 1, \"fd-splitter__resizer-grip\"], [1, \"fd-splitter__resizer-grip-icon\", 3, \"glyph\"], [1, \"fd-splitter__resizer-decoration-after\"]],\n    template: function SplitterResizerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"button\", 1);\n        i0.ɵɵelement(2, \"fd-icon\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"div\", 3);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"glyph\", ctx._isVertical && \"vertical-grip\" || ctx._isHorizontal && \"horizontal-grip\");\n      }\n    },\n    dependencies: [i1$1.IconComponent, i3.ButtonComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SplitterResizerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SplitterPaneContainerComponent = /*#__PURE__*/(() => {\n  class SplitterPaneContainerComponent {\n    /** @hidden */\n    get _isHorizontal() {\n      return this.orientation === SplitterPaneContainerOrientation.horizontal;\n    }\n    /** @hidden */\n    get _isVertical() {\n      return this.orientation === SplitterPaneContainerOrientation.vertical;\n    }\n    /** @hidden */\n    get _isRootContainer() {\n      return !this._parentSplitterPaneContainer;\n    }\n    /** @hidden */\n    get _panesOnCanvas() {\n      return this._directPanes.filter(pane => pane.isOnCanvas);\n    }\n    /** @hidden */\n    get _activePanes() {\n      if (this._currentPage === ROOT_PAGE) {\n        return this._panesOnCanvas;\n      }\n      return this._panes.filter(pane => pane.id === this._currentPage);\n    }\n    /** @hidden */\n    get _panesInRightOrderForResize() {\n      const panes = this._directPanes.filter(pane => pane.id !== this._defaultPane?.id);\n      if (this._defaultPane) {\n        panes.unshift(this._defaultPane);\n      }\n      return panes;\n    }\n    /** @hidden */\n    get _isRtl() {\n      return this._rtlService?.rtl.getValue();\n    }\n    /** @hidden */\n    constructor(_cdr, _elementRef, _splitter, _viewportRuler, _rtlService, _parentSplitterPaneContainer) {\n      this._cdr = _cdr;\n      this._elementRef = _elementRef;\n      this._splitter = _splitter;\n      this._viewportRuler = _viewportRuler;\n      this._rtlService = _rtlService;\n      this._parentSplitterPaneContainer = _parentSplitterPaneContainer;\n      /** Pane type - vertical (default) or horizontal. */\n      this.orientation = SplitterPaneContainerOrientation.vertical;\n      /**\n       * Style of the resizer.\n       */\n      this.resizerType = 'default';\n      /** Event emitted after container's panes has resized. */\n      this.resize = new EventEmitter();\n      /** @hidden */\n      this._pages = [];\n      /** @hidden */\n      this._paneSizes = [];\n      /** @hidden */\n      this._wantedPanesSizes = [];\n      /** @hidden */\n      this._initialPaneSizes = [];\n      /** @hidden */\n      this._directPaneSubscription$ = new Subscription();\n      /** @hidden */\n      this._subscription$ = new Subscription();\n    }\n    /** @hidden */\n    ngAfterContentInit() {\n      if (this._isRootContainer) {\n        this._setDefaultPane();\n        this._updatePages();\n        this._panes.forEach(pane => {\n          this._subscription$.add(pane.toggleOnCanvas.subscribe(() => this._updatePages()));\n        });\n      }\n    }\n    /** @hidden */\n    ngAfterViewInit() {\n      this._setPanes();\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._directPaneSubscription$.unsubscribe();\n      this._subscription$.unsubscribe();\n    }\n    /** @hidden */\n    _getPaneStyles(pane) {\n      const style = {\n        'min-width': PANE_AUTO_SIZE,\n        'max-width': PANE_NONE_SIZE,\n        'min-height': PANE_AUTO_SIZE,\n        'max-height': PANE_NONE_SIZE\n      };\n      if (this._isVertical && pane.isOnCanvas && pane._actualSize !== PANE_AUTO_SIZE) {\n        style['min-width'] = pane._actualSize;\n        style['max-width'] = pane._actualSize;\n      }\n      if (this._isHorizontal && pane.isOnCanvas && pane._actualSize !== PANE_AUTO_SIZE) {\n        style['min-height'] = pane._actualSize;\n        style['max-height'] = pane._actualSize;\n      }\n      return style;\n    }\n    /** @hidden */\n    _startResize() {\n      this._paneSizes = [];\n      this._initialPaneSizes = [];\n      this._panesInRightOrderForResize.forEach(pane => {\n        const paneSize = this._getPaneElementSizePx(pane.id);\n        this._paneSizes.push(paneSize);\n        this._initialPaneSizes.push(paneSize);\n      });\n    }\n    /** @hidden */\n    _endResize() {\n      const changedPaneSizes = [];\n      this._panesInRightOrderForResize.forEach((pane, index) => {\n        if (this._paneSizes[index] !== this._initialPaneSizes[index]) {\n          changedPaneSizes.push({\n            paneId: pane.id,\n            oldSize: this._initialPaneSizes[index] + 'px',\n            newSize: this._paneSizes[index] + 'px'\n          });\n        }\n      });\n      this.resize.emit(changedPaneSizes);\n      this._resizePanesToFitInContainer(true);\n    }\n    /** @hidden */\n    _onResize(paneId, diff) {\n      if (diff === 0) {\n        return;\n      }\n      diff *= this._isRtl && this.orientation === SplitterPaneContainerOrientation.vertical ? -1 : 1;\n      const resizedPaneIndex = this._panesInRightOrderForResize.findIndex(pane => pane.id === paneId) + (diff < 0 ? 1 : 0);\n      const resizedPane = this._panesInRightOrderForResize[resizedPaneIndex];\n      let siblingPaneIndex = resizedPaneIndex;\n      let siblingPane;\n      let siblingPaneSize;\n      do {\n        siblingPaneIndex += diff < 0 ? -1 : 1;\n        siblingPane = this._panesInRightOrderForResize[siblingPaneIndex];\n        siblingPaneSize = this._paneSizes[siblingPaneIndex];\n        if (!siblingPane) {\n          return;\n        }\n      } while (!siblingPaneSize);\n      const resizedPaneNewSize = this._paneSizes[resizedPaneIndex] + diff * (diff < 0 ? -1 : 1);\n      const siblingPaneNewSize = this._paneSizes[siblingPaneIndex] + diff * (diff < 0 ? 1 : -1);\n      /** Prevent from setting negative size */\n      if (resizedPaneNewSize < 0 || siblingPaneNewSize < 0) {\n        return;\n      }\n      this._paneSizes[resizedPaneIndex] = resizedPaneNewSize;\n      this._paneSizes[siblingPaneIndex] = siblingPaneNewSize;\n      resizedPane.size = this._paneSizes[resizedPaneIndex] + 'px';\n      siblingPane.size = this._paneSizes[siblingPaneIndex] + 'px';\n      this._cdr.markForCheck();\n    }\n    /** @hidden */\n    _onPageChange(page = ROOT_PAGE) {\n      this._currentPage = page;\n      this._cdr.detectChanges();\n    }\n    /** @hidden */\n    _updatePages() {\n      this._pages = [];\n      const offCanvasDemandPages = this._panes.filter(pane => !pane.isOnCanvas && pane.demandPane).map(pane => pane.id);\n      let newPage = ROOT_PAGE;\n      if (offCanvasDemandPages.length) {\n        this._pages = offCanvasDemandPages;\n        newPage = offCanvasDemandPages[0];\n        if (this._panesOnCanvas.length > 1) {\n          this._pages.unshift(ROOT_PAGE);\n          newPage = ROOT_PAGE;\n        }\n        if (this._panesOnCanvas.length === 1) {\n          this._pages.unshift(this._panesOnCanvas[0].id);\n          newPage = this._panesOnCanvas[0].id;\n        }\n      }\n      const currentPageExist = this._pages.includes(this._currentPage);\n      if (!currentPageExist) {\n        /** Detaching basically works without the code but it's the edge-case */\n        const isShouldDetachDefaultPane = this._currentPage === this._defaultPane?.id && newPage === ROOT_PAGE;\n        if (isShouldDetachDefaultPane && this._defaultPane?._content?.isAttached) {\n          this._defaultPane._content.detach();\n        }\n        this._onPageChange(newPage);\n        return;\n      }\n      this._cdr.markForCheck();\n    }\n    /** @hidden */\n    _setPanes() {\n      this._resizePanesToFitInContainer(true);\n      const setDirectPanesSubscription = () => {\n        this._directPaneSubscription$.unsubscribe();\n        this._directPaneSubscription$ = new Subscription();\n        this._directPanes.forEach(pane => {\n          this._directPaneSubscription$.add(pane.toggleOnCanvas.subscribe(() => this._resizePanesToFitInContainer()));\n        });\n      };\n      let prevDirectPanes = [...this._directPanes];\n      const areDirectPanesSame = panes => {\n        if (panes.length !== prevDirectPanes.length) {\n          return false;\n        }\n        return prevDirectPanes.every(prevPane => !!panes.find(pane => pane.id === prevPane.id));\n      };\n      setDirectPanesSubscription();\n      this._subscription$.add(this._panes.changes.pipe(filter(panes => !areDirectPanesSame(panes))).subscribe(panesList => {\n        prevDirectPanes = panesList.toArray();\n        setDirectPanesSubscription();\n        this._resizePanesToFitInContainer(true);\n      }));\n      this._subscription$.add(this._viewportRuler.change(10).subscribe(() => this._resizePanesToFitInContainer()));\n    }\n    /** @hidden */\n    _setDefaultPane() {\n      const setDefaultPane = () => {\n        if (this._splitter.defaultPaneId) {\n          this._defaultPane = this._panes.find(pane => pane.id === this._splitter.defaultPaneId) ?? this._directPanes[0];\n        }\n        /** Detaching basically works without the code but it's the edge-case */\n        if (this._defaultPane?._content?.isAttached) {\n          this._defaultPane._content.detach();\n        }\n      };\n      setDefaultPane();\n      this._subscription$.add(this._splitter._defaultPaneId$.subscribe(() => {\n        this._cdr.detectChanges();\n        setDefaultPane();\n        this._resizePanesToFitInContainer(true);\n        this._updatePages();\n      }));\n    }\n    /** @hidden */\n    _resizePanesToFitInContainer(setInitialSize = false) {\n      if (setInitialSize) {\n        this._cdr.detectChanges();\n      }\n      const containerSizePx = this._isHorizontal ? this._elementRef.nativeElement.offsetHeight : this._elementRef.nativeElement.offsetWidth;\n      let availableSpacePx = containerSizePx - RESIZER_SIZE_PX * (this._directPanes.length - 1);\n      this._directPanes.forEach((pane, index) => {\n        if (!availableSpacePx) {\n          pane._actualSize = '0px';\n          return;\n        }\n        if (setInitialSize) {\n          this._wantedPanesSizes[index] = this._getPaneElementSizePx(pane.id);\n        }\n        const paneSize = this._wantedPanesSizes[index];\n        if (availableSpacePx - this._wantedPanesSizes[index] < 0) {\n          pane._actualSize = availableSpacePx + 'px';\n          availableSpacePx = 0;\n          return;\n        }\n        pane._actualSize = pane.size === PANE_AUTO_SIZE ? PANE_AUTO_SIZE : paneSize + 'px';\n        availableSpacePx -= paneSize;\n      });\n      this._cdr.detectChanges();\n    }\n    /** @hidden */\n    _getPaneElementSizePx(paneId) {\n      const paneElement = this._getPaneElement(paneId);\n      if (!paneElement) {\n        return 0;\n      }\n      return this._isHorizontal ? paneElement.offsetHeight : paneElement.offsetWidth;\n    }\n    /** @hidden */\n    _getPaneElement(paneId) {\n      return this._elementRef.nativeElement.querySelector(`#${paneId}`);\n    }\n  }\n  SplitterPaneContainerComponent.ɵfac = function SplitterPaneContainerComponent_Factory(t) {\n    return new (t || SplitterPaneContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SplitterComponent), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i3$1.RtlService, 8), i0.ɵɵdirectiveInject(SplitterPaneContainerComponent, 12));\n  };\n  SplitterPaneContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SplitterPaneContainerComponent,\n    selectors: [[\"fd-splitter-pane-container\"]],\n    contentQueries: function SplitterPaneContainerComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, SplitterSplitPaneComponent, 5);\n        i0.ɵɵcontentQuery(dirIndex, SplitterSplitPaneComponent, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._panes = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._directPanes = _t);\n      }\n    },\n    hostAttrs: [1, \"fd-splitter__pane-container\"],\n    hostVars: 4,\n    hostBindings: function SplitterPaneContainerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fd-splitter__pane-container--horizontal\", !ctx._isRootContainer && ctx._isHorizontal)(\"fd-splitter__pane-container--vertical\", ctx._isRootContainer || ctx._isVertical);\n      }\n    },\n    inputs: {\n      orientation: \"orientation\",\n      resizerType: \"resizerType\"\n    },\n    outputs: {\n      resize: \"resize\"\n    },\n    decls: 5,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"panesOnCanvasTemplate\", \"\"], [\"panesTemplate\", \"\"], [4, \"ngIf\"], [1, \"fd-splitter__split-pane\"], [1, \"fd-splitter__pane-container\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"pages\", \"currentPage\", \"onPageChange\", 4, \"ngIf\"], [3, \"pages\", \"currentPage\", \"onPageChange\"], [4, \"ngFor\", \"ngForOf\"], [1, \"fd-splitter__split-pane\", 3, \"id\"], [3, \"cdkPortalOutlet\"], [3, \"orientation\", \"class\", \"startResize\", \"endResize\", \"resize\", 4, \"ngIf\"], [3, \"orientation\", \"startResize\", \"endResize\", \"resize\"]],\n    template: function SplitterPaneContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SplitterPaneContainerComponent_ng_container_0_Template, 7, 13, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, SplitterPaneContainerComponent_ng_template_1_Template, 1, 4, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, SplitterPaneContainerComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", ctx._isRootContainer)(\"ngIfElse\", _r1);\n      }\n    },\n    dependencies: function () {\n      return [i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i5.CdkPortalOutlet, SplitterResizerComponent, SplitterPaginationComponent, NoDefaultPanePipe];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SplitterPaneContainerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NoDefaultPanePipe = /*#__PURE__*/(() => {\n  class NoDefaultPanePipe {\n    /** @hidden */\n    constructor(_splitterPaneContainer) {\n      this._splitterPaneContainer = _splitterPaneContainer;\n    }\n    /** @hidden */\n    transform(value, excludingCondition = true) {\n      if (!excludingCondition) {\n        return value;\n      }\n      return value.filter(pane => pane.id !== this._splitterPaneContainer._defaultPane?.id);\n    }\n  }\n  NoDefaultPanePipe.ɵfac = function NoDefaultPanePipe_Factory(t) {\n    return new (t || NoDefaultPanePipe)(i0.ɵɵdirectiveInject(SplitterPaneContainerComponent, 16));\n  };\n  NoDefaultPanePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"noDefaultPane\",\n    type: NoDefaultPanePipe,\n    pure: true\n  });\n  return NoDefaultPanePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SplitterModule = /*#__PURE__*/(() => {\n  class SplitterModule {}\n  SplitterModule.ɵfac = function SplitterModule_Factory(t) {\n    return new (t || SplitterModule)();\n  };\n  SplitterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SplitterModule\n  });\n  SplitterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule, ButtonModule, PortalModule, I18nModule]\n  });\n  return SplitterModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoDefaultPanePipe, SplitterComponent, SplitterModule, SplitterPaginationComponent, SplitterPaneContainerComponent, SplitterPaneContainerOrientation, SplitterResizerComponent, SplitterSplitPaneComponent };\n//# sourceMappingURL=fundamental-ngx-core-splitter.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}