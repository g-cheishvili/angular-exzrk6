{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/router';\nimport { merge, cloneDeep } from 'lodash-es';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { THEME_SWITCHER_ROUTER_MISSING_ERROR } from '@fundamental-ngx/cdk/utils';\n\n/**\n * Theming Configuration.\n */\nclass BaseThemingConfig {\n  constructor() {\n    /**\n     * Array of user-defined themes.\n     */\n    this.customThemes = [];\n    /**\n     * Default theme.\n     */\n    this.defaultTheme = 'sap_fiori_3';\n    /**\n     * Default theme font file. Used as a fallback for themes which do not have own font file.\n     */\n    this.defaultFontFile = 'sap_fiori_3';\n    /**\n     * Whether to exclude default themes from the list of available options. By default, false.\n     */\n    this.excludeDefaultThemes = false;\n    /**\n     * Whether to exclude theme font file from inserting it onto the page. By default, false.\n     */\n    this.excludeThemingFonts = false;\n    /**\n     * URL Query parameter flag to change theme based on the provided parameter.\n     */\n    this.themeQueryParam = 'theme';\n    /**\n     * Whether to change theme if URL Query parameter flag has been found or changed. Default is true.\n     */\n    this.changeThemeOnQueryParamChange = true;\n    /**\n     * Identifiers of theme style links.\n     */\n    this.themeStyleLinkIdentifiers = {\n      'base-theme': 'base-theme-styles',\n      'custom-theme': 'custom-theme-styles',\n      fonts: 'theme-font-styles'\n    };\n  }\n}\nconst STANDARD_THEMES = [{\n  id: 'sap_horizon',\n  name: 'Morning Horizon (Light)',\n  theming: {\n    themeFontPath: 'sap_horizon_fonts.css'\n  }\n}, {\n  id: 'sap_horizon_dark',\n  name: 'Evening Horizon (Dark)',\n  theming: {\n    themeFontPath: 'sap_horizon_fonts.css'\n  }\n}, {\n  id: 'sap_horizon_hcb',\n  name: 'Horizon High Contrast Black',\n  description: 'Optimized contrast and accessibility for extremely bright environments',\n  theming: {\n    themeFontPath: 'sap_horizon_fonts.css'\n  }\n}, {\n  id: 'sap_horizon_hcw',\n  name: 'Horizon High Contrast White',\n  description: 'Optimized contrast and accessibility for extremely dark environments',\n  theming: {\n    themeFontPath: 'sap_horizon_fonts.css'\n  }\n}, {\n  id: 'sap_fiori_3',\n  name: 'Quartz Light',\n  description: 'Use in regular office environment'\n}, {\n  id: 'sap_fiori_3_dark',\n  name: 'Quartz Dark',\n  description: 'Use in dimmed environments'\n}, {\n  id: 'sap_fiori_3_hcb',\n  name: 'Quartz High Contrast Black',\n  description: 'Optimized contrast and accessibility for extremely bright environments'\n}, {\n  id: 'sap_fiori_3_hcw',\n  name: 'Quartz High Contrast White',\n  description: 'Optimized contrast and accessibility for extremely dark environments'\n}, {\n  id: 'sap_fiori_3_light_dark',\n  name: 'Quartz Auto (Depending on the OS Settings)'\n}];\nconst THEMING_CONFIG_TOKEN = new InjectionToken('FdThemingConfig');\nlet ThemingService = /*#__PURE__*/(() => {\n  class ThemingService {\n    /**\n     * Observable of the current theme, applied to the application.\n     */\n    get currentTheme() {\n      return this._currentThemeSubject.asObservable();\n    }\n    /**\n     * @hidden\n     */\n    constructor(_rendererFactory, _document, _activatedRoute, _providedConfig) {\n      this._rendererFactory = _rendererFactory;\n      this._document = _document;\n      this._activatedRoute = _activatedRoute;\n      this._providedConfig = _providedConfig;\n      /**\n       * Theming configuration.\n       */\n      this.config = new BaseThemingConfig();\n      /** @hidden */\n      this._standardThemes = [];\n      /** @hidden **/\n      this._onDestroy$ = new Subject();\n      /** @hidden */\n      this._currentThemeSubject = new BehaviorSubject(null);\n      this.config = merge(cloneDeep(this.config), cloneDeep(this._providedConfig));\n      this._renderer = this._rendererFactory.createRenderer(this._document, null);\n      if (!this.config.excludeDefaultThemes) {\n        this._standardThemes = STANDARD_THEMES;\n      }\n      const mergedThemes = this._formatProvidedThemes(this.config.customThemes);\n      this._availableThemes = new Map(mergedThemes.map(theme => [theme.id, theme]));\n    }\n    /**\n     * Initiates theme change based on query parameter or provided default theme in config.\n     */\n    init() {\n      if (this.config.changeThemeOnQueryParamChange) {\n        this._setThemeByRoute();\n      } else {\n        this.setTheme(this.config.defaultTheme);\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      this._onDestroy$.next();\n      this._onDestroy$.complete();\n    }\n    /**\n     * Sets defined theme.\n     * @param themeId ID of theme that needs to be used by the application.\n     */\n    setTheme(themeId) {\n      const theme = this._availableThemes.get(themeId);\n      if (!theme) {\n        console.warn(`Theme with ID '${themeId}' is not found. Please check if ID is correct or provide custom theme for ThemingModule.`);\n        return false;\n      }\n      this._setThemeResource('base-theme', theme.theming.themingBasePath);\n      this._setThemeResource('custom-theme', theme.theming.themePath);\n      if (!this.config.excludeThemingFonts) {\n        this._setThemeResource('fonts', theme.theming.themeFontPath);\n      }\n      this._currentThemeSubject.next(theme);\n      return true;\n    }\n    /**\n     * Returns array of available themes.\n     */\n    getThemes() {\n      return [...this._availableThemes].map(entry => entry[1]);\n    }\n    /**\n     * Returns current theme definition.\n     */\n    getCurrentTheme() {\n      return this._currentThemeSubject.value;\n    }\n    /**\n     * @hidden\n     * @param type\n     * @param resourceUrl\n     * @private\n     */\n    _setThemeResource(type, resourceUrl) {\n      const linkElm = this._getStyleLinkElement(type);\n      if (linkElm.getAttribute('href') === resourceUrl) {\n        return;\n      }\n      this._renderer.setAttribute(linkElm, 'href', resourceUrl);\n    }\n    /**\n     * @hidden\n     * @param type\n     * @private\n     */\n    _getStyleLinkElement(type) {\n      const existingLinkElement = this._document.getElementById(this.config.themeStyleLinkIdentifiers[type]);\n      if (existingLinkElement) {\n        return existingLinkElement;\n      }\n      const newLinkElement = this._renderer.createElement('link');\n      this._renderer.setAttribute(newLinkElement, 'rel', 'stylesheet');\n      this._renderer.setAttribute(newLinkElement, 'id', this.config.themeStyleLinkIdentifiers[type]);\n      this._renderer.appendChild(this._document.head, newLinkElement);\n      return newLinkElement;\n    }\n    /**\n     * @hidden\n     * @param themes\n     * @private\n     */\n    _formatProvidedThemes(themes) {\n      themes = themes || [];\n      const mergedThemes = [...this._standardThemes, ...themes];\n      if (mergedThemes.length === 0 && isDevMode()) {\n        console.error('Error. No themes were provided. Please check your configuration.');\n      }\n      return mergedThemes.map(theme => {\n        theme.theming = this._getThemingResourceConfig(theme);\n        return theme;\n      });\n    }\n    /** @hidden */\n    _getThemingResourceConfig(theme) {\n      const existingConfig = theme.theming || {};\n      const defaultConfig = {\n        themingBasePath: `assets/theming-base/${theme.id}/css_variables.css`,\n        themePath: `assets/fundamental-styles-theming/${theme.id}.css`,\n        themeFontPath: `${this.config.defaultFontFile}_fonts.css`\n      };\n      return Object.assign(defaultConfig, existingConfig);\n    }\n    /** @hidden */\n    _getNativeParameterByName(paramName) {\n      paramName = paramName.replace(/[[\\\\\\]]/g, '\\\\$&');\n      const regex = new RegExp('[?&]' + paramName + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(window.location.href);\n      if (!results || !results[2]) {\n        return '';\n      }\n      return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n    }\n    /**\n     * @hidden\n     * Set theme according to additional URL parameter.\n     * This parameter can be changed in function argument.\n     **/\n    _setThemeByRoute() {\n      const paramName = this.config.themeQueryParam;\n      if (!this._activatedRoute) {\n        throw new Error(THEME_SWITCHER_ROUTER_MISSING_ERROR);\n      }\n      this._activatedRoute.queryParams.pipe(takeUntil(this._onDestroy$), filter(param => param && param[paramName])).subscribe(param => this.setTheme(param[paramName]));\n      const nativeTheme = this._getNativeParameterByName(paramName) || this.config.defaultTheme;\n      this.setTheme(nativeTheme);\n    }\n  }\n  ThemingService.ɵfac = function ThemingService_Factory(t) {\n    return new (t || ThemingService)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.ActivatedRoute, 8), i0.ɵɵinject(THEMING_CONFIG_TOKEN, 8));\n  };\n  ThemingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ThemingService,\n    factory: ThemingService.ɵfac\n  });\n  return ThemingService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ThemingModule = /*#__PURE__*/(() => {\n  class ThemingModule {\n    /** Module with providers */\n    static withConfig(config) {\n      return {\n        ngModule: ThemingModule,\n        providers: [{\n          provide: THEMING_CONFIG_TOKEN,\n          useValue: config\n        }]\n      };\n    }\n  }\n  ThemingModule.ɵfac = function ThemingModule_Factory(t) {\n    return new (t || ThemingModule)();\n  };\n  ThemingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ThemingModule\n  });\n  ThemingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: THEMING_CONFIG_TOKEN,\n      useValue: new BaseThemingConfig()\n    }, ThemingService],\n    imports: [CommonModule]\n  });\n  return ThemingModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseThemingConfig, STANDARD_THEMES, THEMING_CONFIG_TOKEN, ThemingModule, ThemingService };\n//# sourceMappingURL=fundamental-ngx-core-theming.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}