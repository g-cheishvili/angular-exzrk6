{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, PLATFORM_ID, Directive, Input, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport scrollbarStyles from 'fundamental-styles/dist/js/scrollbar';\nimport * as i1 from '@angular/cdk/overlay';\nimport { CdkScrollable } from '@angular/cdk/overlay';\nlet scrollbarElementsQuantity = 0;\nlet styleSheet = null;\n/**\n * The scrollbar directive.\n *\n * Children usage:\n * ```html\n * <div fd-scrollbar>\n * <div fd-scrollbar noVerticalScroll>\n * <div fd-scrollbar [noVerticalScroll]=\"true\">\n * <div fd-scrollbar noHorizontalScroll>\n * <div fd-scrollbar [noHorizontalScroll]=\"true\">\n * ```\n */\nlet ScrollbarDirective = /*#__PURE__*/(() => {\n  class ScrollbarDirective {\n    /** Whether overflow horizontal content should be hidden. */\n    set noHorizontalScroll(value) {\n      this._noHorizontalScroll = coerceBooleanProperty(value);\n    }\n    get noHorizontalScroll() {\n      return this._noHorizontalScroll;\n    }\n    /** Whether overflow vertical content should be hidden. */\n    set noVerticalScroll(value) {\n      this._noVerticalScroll = coerceBooleanProperty(value);\n    }\n    get noVerticalScroll() {\n      return this._noVerticalScroll;\n    }\n    /** Whether scrollbars should be visible even if content fits. */\n    set alwaysVisible(value) {\n      this._alwaysVisible = coerceBooleanProperty(value);\n    }\n    get alwaysVisible() {\n      return this._alwaysVisible;\n    }\n    /** @hidden */\n    get _tabindex() {\n      return this.overrideTabindex ? 0 : null;\n    }\n    /** @hidden */\n    get _overflowX() {\n      if (this.noHorizontalScroll) {\n        return 'hidden';\n      }\n      return this._overflow;\n    }\n    /** @hidden */\n    get _overflowY() {\n      if (this.noVerticalScroll) {\n        return 'hidden';\n      }\n      return this._overflow;\n    }\n    /** @hidden */\n    onScroll(event) {\n      event.stopImmediatePropagation();\n    }\n    /**\n     * @hidden\n     */\n    constructor(_elementRef, renderer2) {\n      this._elementRef = _elementRef;\n      /** Whether to force apply tabindex attribute. */\n      this.overrideTabindex = true;\n      /** @hidden */\n      this._document = inject(DOCUMENT);\n      /** @hidden */\n      this._noHorizontalScroll = false;\n      /** @hidden */\n      this._noVerticalScroll = false;\n      /** @hidden */\n      this._alwaysVisible = false;\n      scrollbarElementsQuantity++;\n      const platform = inject(PLATFORM_ID);\n      if (!styleSheet && isPlatformBrowser(platform)) {\n        styleSheet = renderer2.createElement('style');\n        styleSheet.innerHTML = scrollbarStyles.cssSource;\n        renderer2.appendChild(this._document.head, styleSheet);\n      }\n    }\n    /** @hidden */\n    ngOnDestroy() {\n      if (--scrollbarElementsQuantity === 0) {\n        styleSheet?.remove();\n        styleSheet = null;\n      }\n    }\n    /** method to invoke scroll */\n    scroll(options) {\n      this._elementRef.nativeElement.scroll(options);\n    }\n    /** @hidden */\n    get _overflow() {\n      if (this.alwaysVisible) {\n        return 'scroll';\n      }\n      return 'auto';\n    }\n  }\n  ScrollbarDirective.ɵfac = function ScrollbarDirective_Factory(t) {\n    return new (t || ScrollbarDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  ScrollbarDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ScrollbarDirective,\n    selectors: [[\"\", \"fdScrollbar\", \"\"], [\"\", \"fd-scrollbar\", \"\"]],\n    hostAttrs: [1, \"fd-scrollbar\"],\n    hostVars: 5,\n    hostBindings: function ScrollbarDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"scroll\", function ScrollbarDirective_scroll_HostBindingHandler($event) {\n          return ctx.onScroll($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx._tabindex);\n        i0.ɵɵstyleProp(\"overflow-x\", ctx._overflowX)(\"overflow-y\", ctx._overflowY);\n      }\n    },\n    inputs: {\n      noHorizontalScroll: \"noHorizontalScroll\",\n      noVerticalScroll: \"noVerticalScroll\",\n      alwaysVisible: \"alwaysVisible\",\n      overrideTabindex: \"overrideTabindex\"\n    },\n    standalone: true,\n    features: [i0.ɵɵHostDirectivesFeature([i1.CdkScrollable])]\n  });\n  return ScrollbarDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ScrollbarModule = /*#__PURE__*/(() => {\n  class ScrollbarModule {}\n  ScrollbarModule.ɵfac = function ScrollbarModule_Factory(t) {\n    return new (t || ScrollbarModule)();\n  };\n  ScrollbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ScrollbarModule\n  });\n  ScrollbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return ScrollbarModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ScrollbarDirective, ScrollbarModule };\n//# sourceMappingURL=fundamental-ngx-core-scrollbar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}